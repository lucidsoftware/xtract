Index.PACKAGES = {"com.lucidchart.open.xtract" : [{"name" : "com.lucidchart.open.xtract.ParseResultMatchers", "trait" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html", "kind" : "trait", "members_trait" : [{"label" : "InvariantMatcherFunction", "tail" : "", "member" : "org.specs2.matcher.SequenceMatchersCreation.InvariantMatcherFunction", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#InvariantMatcherFunction[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AdaptFunction", "tail" : "", "member" : "org.specs2.matcher.MatchersCreation.AdaptFunction", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#AdaptFunction[T<:<?>,S<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "resultFunction", "tail" : "", "member" : "org.specs2.matcher.ResultImplicits.resultFunction", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#resultFunction[T<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher22", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher22", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher22[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>,T20<:<?>,T21<:<?>,T22<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher21", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher21", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher21[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>,T20<:<?>,T21<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher20", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher20", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher20[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>,T20<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher19", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher19", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher19[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher18", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher18", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher18[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher17", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher17", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher17[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher16", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher16", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher16[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher15", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher15", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher15[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher14", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher14", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher14[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher13", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher13", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher13[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher12", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher12", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher12[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher11", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher11", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher11[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher10", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher10", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher10[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher9", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher9", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher9[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher8", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher8", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher8[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher7", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher7", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher7[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher6", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher6", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher6[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher5", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher5", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher5[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher4", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher4", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher4[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher3", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher3", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher3[T1<:<?>,T2<:<?>,T3<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher2", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher2", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TupleMatcher2[T1<:<?>,T2<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ContainSeqMatcherFunction", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.ContainSeqMatcherFunction", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ContainSeqMatcherFunction[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ResultLogicalCombinator", "tail" : "", "member" : "org.specs2.execute.ResultLogicalCombinators.ResultLogicalCombinator", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ResultLogicalCombinatorextendsAnyRef", "kind" : "class"}, {"label" : "MatchResultCombinator", "tail" : "", "member" : "org.specs2.matcher.MatchResultLogicalCombinators.MatchResultCombinator", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#MatchResultCombinator[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Descriptible", "tail" : "", "member" : "org.specs2.matcher.ExpectationsDescription.Descriptible", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#Descriptible[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ExpectationDescription", "tail" : "", "member" : "org.specs2.matcher.ExpectationsDescription.ExpectationDescription", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ExpectationDescriptionextendsAnyRef", "kind" : "class"}, {"label" : "TypedEqualExpectation", "tail" : "", "member" : "org.specs2.matcher.TypedEqual.TypedEqualExpectation", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TypedEqualExpectation[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "futureAsResult", "tail" : "", "member" : "org.specs2.matcher.FutureMatchers.futureAsResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#futureAsResult[T<:<?>]extendsFutureMatchers.this.FutureAsResult[T]", "kind" : "implicit class"}, {"label" : "FutureMatchable", "tail" : "", "member" : "org.specs2.matcher.FutureMatchers.FutureMatchable", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#FutureMatchable[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TryResultMatcher", "tail" : "", "member" : "org.specs2.matcher.TryBeHaveMatchers.TryResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TryResultMatcher[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "EitherResultMatcher", "tail" : "", "member" : "org.specs2.matcher.EitherBeHaveMatchers.EitherResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#EitherResultMatcher[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "OptionResultMatcher", "tail" : "", "member" : "org.specs2.matcher.OptionBeHaveMatchers.OptionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#OptionResultMatcher[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "SignificantSyntax", "tail" : "", "member" : "org.specs2.matcher.NumericMatchers.SignificantSyntax", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#SignificantSyntax[N<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SignificantFiguresSyntax", "tail" : "", "member" : "org.specs2.matcher.NumericMatchers.SignificantFiguresSyntax", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#SignificantFiguresSyntaxextendsAnyRef", "kind" : "implicit class"}, {"label" : "NeutralMatcherNumeric", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.NeutralMatcherNumeric", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#NeutralMatcherNumericextendsAnyRef", "kind" : "class"}, {"label" : "NeutralMatcherOrdered", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.NeutralMatcherOrdered", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#NeutralMatcherOrderedextendsAnyRef", "kind" : "class"}, {"label" : "NumericResultMatcher", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.NumericResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#NumericResultMatcher[S<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "OrderedResultMatcher", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.OrderedResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#OrderedResultMatcher[S<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ExceptionMatcherResult", "tail" : "", "member" : "org.specs2.matcher.ExceptionBeHaveMatchers.ExceptionMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ExceptionMatcherResult[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ExceptionMatcher", "tail" : "", "member" : "org.specs2.matcher.ExceptionBaseMatchers.ExceptionMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ExceptionMatcher[E<:<?>]extendsMatcher[Any]", "kind" : "class"}, {"label" : "ExceptionClassMatcher", "tail" : "", "member" : "org.specs2.matcher.ExceptionBaseMatchers.ExceptionClassMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ExceptionClassMatcherextendsMatcher[Any]", "kind" : "class"}, {"label" : "NotStringMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBeHaveMatchers.NotStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#NotStringMatcherextendsAnyRef", "kind" : "class"}, {"label" : "NeutralStringMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBeHaveMatchers.NeutralStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#NeutralStringMatcherextendsAnyRef", "kind" : "class"}, {"label" : "StringResultMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBeHaveMatchers.StringResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#StringResultMatcherextendsAnyRef", "kind" : "class"}, {"label" : "FindMatcherPatternWithGroups", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherPatternWithGroups", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#FindMatcherPatternWithGroupsextendsStringBaseMatchers.this.FindMatcherWithGroups", "kind" : "class"}, {"label" : "FindMatcherWithGroups", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherWithGroups", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#FindMatcherWithGroupsextendsMatcher[String]", "kind" : "class"}, {"label" : "FindMatcherRegex", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherRegex", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#FindMatcherRegexextendsStringBaseMatchers.this.FindMatcherPattern", "kind" : "class"}, {"label" : "FindMatcherPattern", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherPattern", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#FindMatcherPatternextendsStringBaseMatchers.this.FindMatcher", "kind" : "class"}, {"label" : "FindMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#FindMatcherextendsMatcher[String]", "kind" : "class"}, {"label" : "PartialFunctionResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.PartialFunctionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#PartialFunctionResultMatcher[K<:<?>,V<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MapResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.MapResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#MapResultMatcher[K<:<?>,V<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MapValueResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.MapValueResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#MapValueResultMatcher[V<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MapKeyResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.MapKeyResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#MapKeyResultMatcher[K<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ImplicitParam10", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam10", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ImplicitParam10extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam9", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam9", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ImplicitParam9extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam8", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam8", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ImplicitParam8extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam7", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam7", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ImplicitParam7extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam6", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam6", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ImplicitParam6extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam5", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam5", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ImplicitParam5extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam4", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam4", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ImplicitParam4extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam3", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam3", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ImplicitParam3extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam2", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam2", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ImplicitParam2extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam1", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam1", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ImplicitParam1extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ImplicitParamextendsAnyRef", "kind" : "trait"}, {"label" : "OrderedSeqMatchResult", "tail" : "", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.OrderedSeqMatchResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#OrderedSeqMatchResult[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HasSize", "tail" : "", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.HasSize", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#HasSize[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "TraversableBeHaveMatchers", "tail" : "", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.TraversableBeHaveMatchers", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#TraversableBeHaveMatchers[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "BeLikeResultMatcher", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.BeLikeResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#BeLikeResultMatcher[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AnyWithEmptyMatchers", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyWithEmptyMatchers", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#AnyWithEmptyMatchers[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ClassMatcherResult", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.ClassMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ClassMatcherResultextendsAnyRef", "kind" : "class"}, {"label" : "AnyMatcherResult", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#AnyMatcherResultextendsAnyRef", "kind" : "class"}, {"label" : "AnyRefMatcherResult", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyRefMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#AnyRefMatcherResult[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AnyBeHaveMatchers", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyBeHaveMatchers", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#AnyBeHaveMatchers[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "bePartialSuccess", "tail" : "(check: (PartialParseSuccess[T]) => MatchResult[Any]): Matcher[ParseResult[T]]", "member" : "com.lucidchart.open.xtract.ParseResultMatchers.bePartialSuccess", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#bePartialSuccess[T](check:com.lucidchart.open.xtract.PartialParseSuccess[T]=>org.specs2.matcher.MatchResult[Any]):org.specs2.matcher.Matcher[com.lucidchart.open.xtract.ParseResult[T]]", "kind" : "def"}, {"label" : "beParseFailure", "tail" : "(check: ValueCheck[Seq[ParseError]]): Matcher[ParseResult[T]]", "member" : "com.lucidchart.open.xtract.ParseResultMatchers.beParseFailure", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beParseFailure[T](check:org.specs2.matcher.ValueCheck[Seq[com.lucidchart.open.xtract.ParseError]]):org.specs2.matcher.Matcher[com.lucidchart.open.xtract.ParseResult[T]]", "kind" : "def"}, {"label" : "beParseFailure", "tail" : "(): Matcher[ParseResult[T]]", "member" : "com.lucidchart.open.xtract.ParseResultMatchers.beParseFailure", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beParseFailure[T]:org.specs2.matcher.Matcher[com.lucidchart.open.xtract.ParseResult[T]]", "kind" : "def"}, {"label" : "beParseSuccess", "tail" : "(check: ValueCheck[T]): Matcher[ParseResult[T]]", "member" : "com.lucidchart.open.xtract.ParseResultMatchers.beParseSuccess", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beParseSuccess[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.Matcher[com.lucidchart.open.xtract.ParseResult[T]]", "kind" : "def"}, {"label" : "beParseSuccess", "tail" : "(): Matcher[ParseResult[T]]", "member" : "com.lucidchart.open.xtract.ParseResultMatchers.beParseSuccess", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beParseSuccess[T]:org.specs2.matcher.Matcher[com.lucidchart.open.xtract.ParseResult[T]]", "kind" : "def"}, {"label" : "postfixOpsAreAllowed", "tail" : ": postfixOps", "member" : "org.specs2.control.LanguageFeatures.postfixOpsAreAllowed", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#postfixOpsAreAllowed:languageFeature.postfixOps", "kind" : "implicit lazy val"}, {"label" : "implicitsAreAllowed", "tail" : ": implicitConversions", "member" : "org.specs2.control.LanguageFeatures.implicitsAreAllowed", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitsAreAllowed:languageFeature.implicitConversions", "kind" : "implicit lazy val"}, {"label" : "atMostOnceWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, R])(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atMostOnceWhen", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#atMostOnceWhen[T,R](values:collection.Traversable[T])(f:PartialFunction[T,R])(implicitevidence$8:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "atLeastOnceWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, R])(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atLeastOnceWhen", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#atLeastOnceWhen[T,R](values:collection.Traversable[T])(f:PartialFunction[T,R])(implicitevidence$7:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "atMostOnce", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atMostOnce", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#atMostOnce[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "atLeastOnce", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atLeastOnce", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#atLeastOnce[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "atMostOnce", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atMostOnce", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#atMostOnce[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$6:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "atLeastOnce", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atLeastOnce", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#atLeastOnce[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$5:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "foreachWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, R])(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.foreachWhen", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#foreachWhen[T,R](values:collection.Traversable[T])(f:PartialFunction[T,R])(implicitevidence$4:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.foreach", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#foreach[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.foreach", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#foreach[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$3:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "forallWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, MatchResult[U]]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.forallWhen", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#forallWhen[T,U](values:collection.Traversable[T])(f:PartialFunction[T,org.specs2.matcher.MatchResult[U]]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "forall", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.forall", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#forall[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "forall", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.forall", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#forall[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$2:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "stringMatcherFunctionToBynameMatcherFunction", "tail" : "(f: (T) => Matcher[R]): (=> T) => Matcher[R]", "member" : "org.specs2.matcher.MatchersCreation.stringMatcherFunctionToBynameMatcherFunction", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#stringMatcherFunctionToBynameMatcherFunction[T,R](f:T=>org.specs2.matcher.Matcher[R]):(=>T)=>org.specs2.matcher.Matcher[R]", "kind" : "implicit def"}, {"label" : "matchResultFunctionToMatcher", "tail" : "(f: (T) => R)(arg0: AsResult[R]): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.matchResultFunctionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#matchResultFunctionToMatcher[T,R](f:T=>R)(implicitevidence$9:org.specs2.execute.AsResult[R]):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "tripletFunctionToMatcher", "tail" : "(f: (T) => (Boolean, String, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.tripletFunctionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#tripletFunctionToMatcher[T](f:T=>(Boolean,String,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "pairFunctionToMatcher", "tail" : "(f: (T) => (Boolean, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.pairFunctionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#pairFunctionToMatcher[T](f:T=>(Boolean,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionAndMessagesToMatcher", "tail" : "(f: ((T) => Boolean, (T) => String, (T) => String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionAndMessagesToMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#functionAndMessagesToMatcher[T](f:(T=>Boolean,T=>String,T=>String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionAndKoMessageToMatcher", "tail" : "(f: ((T) => Boolean, (T) => String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionAndKoMessageToMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#functionAndKoMessageToMatcher[T](f:(T=>Boolean,T=>String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionToMatcher2", "tail" : "(f: ((T) => Boolean, String, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionToMatcher2", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#functionToMatcher2[T](f:(T=>Boolean,String,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionToMatcher", "tail" : "(f: ((T) => Boolean, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#functionToMatcher[T](f:(T=>Boolean,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "fromMatchResult", "tail" : "(r: => MatchResult[_]): Boolean", "member" : "org.specs2.matcher.MatchResultImplicits.fromMatchResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#fromMatchResult(r:=>org.specs2.matcher.MatchResult[_]):Boolean", "kind" : "implicit def"}, {"label" : "asResult", "tail" : "(r: MatchResult[T]): Result", "member" : "org.specs2.matcher.MatchResultImplicits.asResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#asResult[T](r:org.specs2.matcher.MatchResult[T]):org.specs2.execute.Result", "kind" : "implicit def"}, {"label" : "seqToResult", "tail" : "(r: Seq[MatchResult[T]]): Result", "member" : "org.specs2.matcher.MatchResultImplicits.seqToResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#seqToResult[T](r:Seq[org.specs2.matcher.MatchResult[T]]):org.specs2.execute.Result", "kind" : "implicit def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19], m20: (=> T20) => Matcher[S20], m21: (=> T21) => Matcher[S21], m22: (=> T22) => Matcher[S22]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, S21, S22)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21,S22](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19],m20:(=>T20)=>org.specs2.matcher.Matcher[S20],m21:(=>T21)=>org.specs2.matcher.Matcher[S21],m22:(=>T22)=>org.specs2.matcher.Matcher[S22]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21,S22)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19], m20: (=> T20) => Matcher[S20], m21: (=> T21) => Matcher[S21]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, S21)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19],m20:(=>T20)=>org.specs2.matcher.Matcher[S20],m21:(=>T21)=>org.specs2.matcher.Matcher[S21]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19], m20: (=> T20) => Matcher[S20]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19],m20:(=>T20)=>org.specs2.matcher.Matcher[S20]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,S1,S2,S3,S4,S5,S6,S7,S8,S9](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8]): (=> (T1, T2, T3, T4, T5, T6, T7, T8)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,S1,S2,S3,S4,S5,S6,S7,S8](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8]):(=>(T1,T2,T3,T4,T5,T6,T7,T8))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7]): (=> (T1, T2, T3, T4, T5, T6, T7)) => Matcher[(S1, S2, S3, S4, S5, S6, S7)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,S1,S2,S3,S4,S5,S6,S7](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7]):(=>(T1,T2,T3,T4,T5,T6,T7))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6]): (=> (T1, T2, T3, T4, T5, T6)) => Matcher[(S1, S2, S3, S4, S5, S6)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,T6,S1,S2,S3,S4,S5,S6](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6]):(=>(T1,T2,T3,T4,T5,T6))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5]): (=> (T1, T2, T3, T4, T5)) => Matcher[(S1, S2, S3, S4, S5)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,T5,S1,S2,S3,S4,S5](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5]):(=>(T1,T2,T3,T4,T5))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4]): (=> (T1, T2, T3, T4)) => Matcher[(S1, S2, S3, S4)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,T4,S1,S2,S3,S4](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4]):(=>(T1,T2,T3,T4))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3]): (=> (T1, T2, T3)) => Matcher[(S1, S2, S3)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,T3,S1,S2,S3](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3]):(=>(T1,T2,T3))=>org.specs2.matcher.Matcher[(S1,S2,S3)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2]): (=> (T1, T2)) => Matcher[(S1, S2)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#zip[T1,T2,S1,S2](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2]):(=>(T1,T2))=>org.specs2.matcher.Matcher[(S1,S2)]", "kind" : "def"}, {"label" : "contain", "tail" : "(f: (=> T) => Matcher[S])(expected: => Seq[T]): (Seq[S]) => MatchResult[Seq[S]]", "member" : "org.specs2.matcher.MatcherZipOperators.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T,S](f:(=>T)=>org.specs2.matcher.Matcher[S])(expected:=>Seq[T]):Seq[S]=>org.specs2.matcher.MatchResult[Seq[S]]", "kind" : "def"}, {"label" : "combineResult", "tail" : "(r: => Result): ResultLogicalCombinator", "member" : "org.specs2.execute.ResultLogicalCombinators.combineResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#combineResult(r:=>org.specs2.execute.Result):ResultLogicalCombinators.this.ResultLogicalCombinator", "kind" : "implicit def"}, {"label" : "combineBoolean", "tail" : "(b: => Boolean): ResultLogicalCombinator", "member" : "org.specs2.execute.ResultLogicalCombinators.combineBoolean", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#combineBoolean(b:=>Boolean):ResultLogicalCombinators.this.ResultLogicalCombinator", "kind" : "implicit def"}, {"label" : "negateWhen", "tail" : "(condition: Boolean)(r: Result): Result", "member" : "org.specs2.execute.Results.negateWhen", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#negateWhen(condition:Boolean)(r:org.specs2.execute.Result):org.specs2.execute.Result", "kind" : "def"}, {"label" : "negate", "tail" : "(r: Result): Result", "member" : "org.specs2.execute.Results.negate", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#negate(r:org.specs2.execute.Result):org.specs2.execute.Result", "kind" : "def"}, {"label" : "booleanToSimpleResult", "tail" : "(b: Boolean): Result", "member" : "org.specs2.execute.Results.booleanToSimpleResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#booleanToSimpleResult(b:Boolean):org.specs2.execute.Result", "kind" : "def"}, {"label" : "toResult", "tail" : "(b: Boolean): Result", "member" : "org.specs2.execute.Results.toResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toResult(b:Boolean):org.specs2.execute.Result", "kind" : "implicit def"}, {"label" : "combineMatchResult", "tail" : "(m: => MatchResult[T]): MatchResultCombinator[T]", "member" : "org.specs2.matcher.MatchResultLogicalCombinators.combineMatchResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#combineMatchResult[T](m:=>org.specs2.matcher.MatchResult[T]):MatchResultLogicalCombinators.this.MatchResultCombinator[T]", "kind" : "implicit def"}, {"label" : "describe", "tail" : "(t: => T): Descriptible[T]", "member" : "org.specs2.matcher.ExpectationsDescription.describe", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#describe[T](t:=>T):ExpectationsDescription.this.Descriptible[T]", "kind" : "implicit def"}, {"label" : "describeExpectation", "tail" : "(description: String): ExpectationDescription", "member" : "org.specs2.matcher.ExpectationsDescription.describeExpectation", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#describeExpectation(description:String):ExpectationsDescription.this.ExpectationDescription", "kind" : "implicit def"}, {"label" : "typedEqualExpectation", "tail" : "(t: => T): TypedEqualExpectation[T]", "member" : "org.specs2.matcher.TypedEqual.typedEqualExpectation", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#typedEqualExpectation[T](t:=>T):TypedEqual.this.TypedEqualExpectation[T]", "kind" : "implicit def"}, {"label" : "retry", "tail" : "(m: Matcher[T])(retries: Int)(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.retry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#retry[T](m:org.specs2.matcher.Matcher[T])(retries:Int)(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "awaitFor", "tail" : "(m: Matcher[T])(timeout: FiniteDuration)(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.awaitFor", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#awaitFor[T](m:org.specs2.matcher.Matcher[T])(timeout:scala.concurrent.duration.FiniteDuration)(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "await", "tail" : "(m: Matcher[T])(retries: Int, timeout: FiniteDuration)(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.await", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#await[T](m:org.specs2.matcher.Matcher[T])(retries:Int,timeout:scala.concurrent.duration.FiniteDuration)(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "await", "tail" : "(m: Matcher[T])(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.await", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#await[T](m:org.specs2.matcher.Matcher[T])(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "eventually", "tail" : "(nested: => Matcher[T]): Matcher[T]", "member" : "org.specs2.matcher.EventuallyMatchers.eventually", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#eventually[T](nested:=>org.specs2.matcher.Matcher[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "eventually", "tail" : "(nested: => Matcher[T], retries: Int, sleep: Duration): Matcher[T]", "member" : "org.specs2.matcher.EventuallyMatchers.eventually", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#eventually[T](nested:=>org.specs2.matcher.Matcher[T],retries:Int,sleep:scala.concurrent.duration.Duration):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "eventually", "tail" : "(nested: => Matcher[T], retries: Int, sleep: (Int) => Duration): Matcher[T]", "member" : "org.specs2.matcher.EventuallyMatchers.eventually", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#eventually[T](nested:=>org.specs2.matcher.Matcher[T],retries:Int,sleep:Int=>scala.concurrent.duration.Duration):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "eventually", "tail" : "(result: => T)(arg0: AsResult[T]): T", "member" : "org.specs2.execute.EventuallyResults.eventually", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#eventually[T](result:=>T)(implicitevidence$3:org.specs2.execute.AsResult[T]):T", "kind" : "def"}, {"label" : "eventually", "tail" : "(retries: Int, sleep: Duration)(result: => T)(arg0: AsResult[T]): T", "member" : "org.specs2.execute.EventuallyResults.eventually", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#eventually[T](retries:Int,sleep:scala.concurrent.duration.Duration)(result:=>T)(implicitevidence$2:org.specs2.execute.AsResult[T]):T", "kind" : "def"}, {"label" : "eventually", "tail" : "(retries: Int, sleep: (Int) => Duration)(result: => T)(arg0: AsResult[T]): T", "member" : "org.specs2.execute.EventuallyResults.eventually", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#eventually[T](retries:Int,sleep:Int=>scala.concurrent.duration.Duration)(result:=>T)(implicitevidence$1:org.specs2.execute.AsResult[T]):T", "kind" : "def"}, {"label" : "toTryResultMatcher", "tail" : "(result: MatchResult[Try[T]]): TryResultMatcher[T]", "member" : "org.specs2.matcher.TryBeHaveMatchers.toTryResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toTryResultMatcher[T](result:org.specs2.matcher.MatchResult[scala.util.Try[T]]):TryBeHaveMatchers.this.TryResultMatcher[T]", "kind" : "implicit def"}, {"label" : "aFailedTry", "tail" : "(t: Throwable): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aFailedTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#aFailedTry[T](t:Throwable):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "failedTry", "tail" : "(t: Throwable): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.failedTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#failedTry[T](t:Throwable):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "aFailedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aFailedTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#aFailedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "failedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.failedTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#failedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "beAFailedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beAFailedTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beAFailedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "beFailedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beFailedTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beFailedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "aFailedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aFailedTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#aFailedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "failedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.failedTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#failedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "beAFailedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beAFailedTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beAFailedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "beFailedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beFailedTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beFailedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "aSuccessfulTry", "tail" : "(t: T)(arg0: Diffable[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#aSuccessfulTry[T](t:T)(implicitevidence$2:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "successfulTry", "tail" : "(t: T)(arg0: Diffable[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.successfulTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#successfulTry[T](t:T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "aSuccessfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#aSuccessfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "successfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.successfulTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#successfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "beASuccessfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beASuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beASuccessfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "beSuccessfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beSuccessfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "aSuccessfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#aSuccessfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "successfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.successfulTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#successfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "beASuccessfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beASuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beASuccessfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "beSuccessfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beSuccessfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "left", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): LeftMatcher[Nothing]", "member" : "org.specs2.matcher.EitherBaseMatchers.left", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#left[T<:<?>](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.LeftMatcher[Nothing]", "kind" : "def"}, {"label" : "left", "tail" : "(t: ValueCheck[T]): LeftCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.left", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#left[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.LeftCheckedMatcher[T]", "kind" : "def"}, {"label" : "left", "tail" : "(t: T)(arg0: Diffable[T]): LeftCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.left", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#left[T](t:T)(implicitevidence$2:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.LeftCheckedMatcher[T]", "kind" : "def"}, {"label" : "beLeft", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): LeftMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beLeft", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beLeft[T](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.LeftMatcher[T]", "kind" : "def"}, {"label" : "beLeft", "tail" : "(t: ValueCheck[T]): LeftCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beLeft", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beLeft[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.LeftCheckedMatcher[T]", "kind" : "def"}, {"label" : "right", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): RightMatcher[Nothing]", "member" : "org.specs2.matcher.EitherBaseMatchers.right", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#right[T<:<?>](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.RightMatcher[Nothing]", "kind" : "def"}, {"label" : "right", "tail" : "(t: ValueCheck[T]): RightCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.right", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#right[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.RightCheckedMatcher[T]", "kind" : "def"}, {"label" : "right", "tail" : "(t: T)(arg0: Diffable[T]): RightCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.right", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#right[T](t:T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.RightCheckedMatcher[T]", "kind" : "def"}, {"label" : "beRight", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): RightMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beRight", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beRight[T](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.RightMatcher[T]", "kind" : "def"}, {"label" : "beRight", "tail" : "(t: ValueCheck[T]): RightCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beRight", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beRight[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.RightCheckedMatcher[T]", "kind" : "def"}, {"label" : "downcastBeEqualTypedValueCheck", "tail" : "(check: BeEqualTypedValueCheck[T]): ValueCheck[S]", "member" : "org.specs2.matcher.ValueChecks.downcastBeEqualTypedValueCheck", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#downcastBeEqualTypedValueCheck[T,S>:T](check:org.specs2.matcher.BeEqualTypedValueCheck[T]):org.specs2.matcher.ValueCheck[S]", "kind" : "implicit def"}, {"label" : "partialfunctionIsValueCheck", "tail" : "(f: PartialFunction[T, R])(arg0: AsResult[R]): ValueCheck[T]", "member" : "org.specs2.matcher.ValueChecks.partialfunctionIsValueCheck", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#partialfunctionIsValueCheck[T,R](f:PartialFunction[T,R])(implicitevidence$2:org.specs2.execute.AsResult[R]):org.specs2.matcher.ValueCheck[T]", "kind" : "implicit def"}, {"label" : "valueIsTypedValueCheck", "tail" : "(expected: T)(di: Diffable[T]): BeEqualTypedValueCheck[T]", "member" : "org.specs2.matcher.ValueChecksBase.valueIsTypedValueCheck", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#valueIsTypedValueCheck[T](expected:T)(implicitdi:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.BeEqualTypedValueCheck[T]", "kind" : "def"}, {"label" : "matcherIsValueCheck", "tail" : "(m: Matcher[T]): ValueCheck[T]", "member" : "org.specs2.matcher.ValueChecksBase.matcherIsValueCheck", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#matcherIsValueCheck[T](m:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ValueCheck[T]", "kind" : "implicit def"}, {"label" : "toOptionResultMatcher", "tail" : "(result: MatchResult[Option[T]]): OptionResultMatcher[T]", "member" : "org.specs2.matcher.OptionBeHaveMatchers.toOptionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toOptionResultMatcher[T](result:org.specs2.matcher.MatchResult[Option[T]]):OptionBeHaveMatchers.this.OptionResultMatcher[T]", "kind" : "implicit def"}, {"label" : "asNoneAs", "tail" : "(other: => Option[T]): Matcher[Option[T]]", "member" : "org.specs2.matcher.OptionBaseMatchers.asNoneAs", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#asNoneAs[T](other:=>Option[T]):org.specs2.matcher.Matcher[Option[T]]", "kind" : "def"}, {"label" : "beAsNoneAs", "tail" : "(other: => Option[T]): Matcher[Option[T]]", "member" : "org.specs2.matcher.OptionBaseMatchers.beAsNoneAs", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beAsNoneAs[T](other:=>Option[T]):org.specs2.matcher.Matcher[Option[T]]", "kind" : "def"}, {"label" : "none", "tail" : "(): Matcher[Option[Any]]", "member" : "org.specs2.matcher.OptionBaseMatchers.none", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#none:org.specs2.matcher.Matcher[Option[Any]]", "kind" : "def"}, {"label" : "beNone", "tail" : "(): Matcher[Option[Any]]", "member" : "org.specs2.matcher.OptionBaseMatchers.beNone", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beNone:org.specs2.matcher.Matcher[Option[Any]]", "kind" : "def"}, {"label" : "some", "tail" : "(): SomeMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.some", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#some[T]:org.specs2.matcher.SomeMatcher[T]", "kind" : "def"}, {"label" : "beSome", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): SomeMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.beSome", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beSome[T](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.SomeMatcher[T]", "kind" : "def"}, {"label" : "some", "tail" : "(check: ValueCheck[T]): SomeCheckedMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.some", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#some[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.SomeCheckedMatcher[T]", "kind" : "def"}, {"label" : "some", "tail" : "(t: T)(arg0: Diffable[T]): SomeCheckedMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.some", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#some[T](t:T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.SomeCheckedMatcher[T]", "kind" : "def"}, {"label" : "beSome", "tail" : "(check: ValueCheck[T]): SomeCheckedMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.beSome", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beSome[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.SomeCheckedMatcher[T]", "kind" : "def"}, {"label" : "ToDelta", "tail" : "(n: S)(arg0: Numeric[S]): CanHaveDelta[S]", "member" : "org.specs2.matcher.NumericMatchers.ToDelta", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ToDelta[S](n:S)(implicitevidence$1:Numeric[S]):org.specs2.matcher.CanHaveDelta[S]", "kind" : "implicit def"}, {"label" : "toNeutralMatcherNumeric", "tail" : "(result: NeutralMatcher[Any]): NeutralMatcherNumeric", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toNeutralMatcherNumeric", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toNeutralMatcherNumeric(result:org.specs2.matcher.NeutralMatcher[Any]):NumericBeHaveMatchers.this.NeutralMatcherNumeric", "kind" : "implicit def"}, {"label" : "toNeutralMatcherOrdered", "tail" : "(result: NeutralMatcher[Any]): NeutralMatcherOrdered", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toNeutralMatcherOrdered", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toNeutralMatcherOrdered(result:org.specs2.matcher.NeutralMatcher[Any]):NumericBeHaveMatchers.this.NeutralMatcherOrdered", "kind" : "implicit def"}, {"label" : "toNumericResultMatcher", "tail" : "(result: MatchResult[S])(arg0: Numeric[S]): NumericResultMatcher[S]", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toNumericResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toNumericResultMatcher[S](result:org.specs2.matcher.MatchResult[S])(implicitevidence$36:Numeric[S]):NumericBeHaveMatchers.this.NumericResultMatcher[S]", "kind" : "implicit def"}, {"label" : "toOrderedResultMatcher", "tail" : "(result: MatchResult[S])(arg0: (S) => Ordered[S]): OrderedResultMatcher[S]", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toOrderedResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toOrderedResultMatcher[S](result:org.specs2.matcher.MatchResult[S])(implicitevidence$34:S=>Ordered[S]):NumericBeHaveMatchers.this.OrderedResultMatcher[S]", "kind" : "implicit def"}, {"label" : "be]", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.be]", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be][T](t1:T,t2:T)(implicitevidence$32:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "be[", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.be[", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be[[T](t1:T,t2:T)(implicitevidence$31:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "between", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.between", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#between[T](t1:T,t2:T)(implicitevidence$30:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "beBetween", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.beBetween", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beBetween[T](t1:T,t2:T)(implicitevidence$29:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(target: SignificantTarget[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#closeTo[S](target:org.specs2.matcher.SignificantTarget[S])(implicitevidence$28:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(target: S, figures: SignificantFigures)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#closeTo[S](target:S,figures:org.specs2.matcher.SignificantFigures)(implicitevidence$27:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(target: SignificantTarget[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beCloseTo[S](target:org.specs2.matcher.SignificantTarget[S])(implicitevidence$26:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(target: S, figures: SignificantFigures)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beCloseTo[S](target:S,figures:org.specs2.matcher.SignificantFigures)(implicitevidence$25:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "~", "tail" : "(delta: PlusOrMinus[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.~", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#~[S](delta:org.specs2.matcher.PlusOrMinus[S])(implicitevidence$24:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "~", "tail" : "(n: S)(delta: S)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.~", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#~[S](n:S)(delta:S)(implicitevidence$23:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(delta: PlusOrMinus[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#closeTo[S](delta:org.specs2.matcher.PlusOrMinus[S])(implicitevidence$22:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(delta: PlusOrMinus[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beCloseTo[S](delta:org.specs2.matcher.PlusOrMinus[S])(implicitevidence$21:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(n: S, delta: S)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#closeTo[S](n:S,delta:S)(implicitevidence$20:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(n: S, delta: S)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beCloseTo[S](n:S,delta:S)(implicitevidence$19:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : ">", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.>", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#>[S](n:S)(implicitevidence$18:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "be_>", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_>", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be_>[S](n:S)(implicitevidence$17:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "greaterThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.greaterThan", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#greaterThan[S](n:S)(implicitevidence$16:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beGreaterThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beGreaterThan", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beGreaterThan[S](n:S)(implicitevidence$15:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : ">=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.>=", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#>=[S](n:S)(implicitevidence$14:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "be_>=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_>=", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be_>=[S](n:S)(implicitevidence$13:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "greaterThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.greaterThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#greaterThanOrEqualTo[S](n:S)(implicitevidence$12:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beGreaterThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beGreaterThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beGreaterThanOrEqualTo[S](n:S)(implicitevidence$11:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "<", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.<", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#<[S](n:S)(implicitevidence$10:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "be_<", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_<", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be_<[S](n:S)(implicitevidence$9:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "lessThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.lessThan", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#lessThan[S](n:S)(implicitevidence$8:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "beLessThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beLessThan", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beLessThan[S](n:S)(implicitevidence$7:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "<=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.<=", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#<=[S](n:S)(implicitevidence$6:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "be_<=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_<=", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be_<=[S](n:S)(implicitevidence$5:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "lessThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.lessThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#lessThanOrEqualTo[S](n:S)(implicitevidence$4:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "beLessThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beLessThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beLessThanOrEqualTo[S](n:S)(implicitevidence$3:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "throwAn", "tail" : "(e: E): ExceptionMatcher[E]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwAn", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#throwAn[E<:Throwable](e:E):ExceptionBaseMatchers.this.ExceptionMatcher[E]", "kind" : "def"}, {"label" : "throwAn", "tail" : "(message: String)(m: ClassTag[E]): Matcher[Any]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwAn", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#throwAn[E<:Throwable](message:String)(implicitm:scala.reflect.ClassTag[E]):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "throwAn", "tail" : "(m: ClassTag[E]): ExceptionClassMatcher", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwAn", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#throwAn[E<:Throwable](implicitm:scala.reflect.ClassTag[E]):ExceptionBaseMatchers.this.ExceptionClassMatcher", "kind" : "def"}, {"label" : "throwA", "tail" : "(e: E): ExceptionMatcher[E]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwA", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#throwA[E<:Throwable](e:E):ExceptionBaseMatchers.this.ExceptionMatcher[E]", "kind" : "def"}, {"label" : "throwA", "tail" : "(message: String)(m: ClassTag[E]): Matcher[Any]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwA", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#throwA[E<:Throwable](message:String)(implicitm:scala.reflect.ClassTag[E]):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "throwA", "tail" : "(m: ClassTag[E]): ExceptionClassMatcher", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwA", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#throwA[E<:Throwable](implicitm:scala.reflect.ClassTag[E]):ExceptionBaseMatchers.this.ExceptionClassMatcher", "kind" : "def"}, {"label" : "sandboxMatchResult", "tail" : "(mr: => MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.sandboxMatchResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#sandboxMatchResult[T](mr:=>org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "checkMatchResultFailure", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.checkMatchResultFailure", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#checkMatchResultFailure[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "checkResultFailure", "tail" : "(r: => Result): Result", "member" : "org.specs2.matcher.ExpectationsCreation.checkResultFailure", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#checkResultFailure(r:=>org.specs2.execute.Result):org.specs2.execute.Result", "kind" : "def"}, {"label" : "mapMatchResult", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.mapMatchResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#mapMatchResult[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "checkFailure", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.checkFailure", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#checkFailure[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "createExpectableWithShowAs", "tail" : "(t: => T, showAs: => String): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectableWithShowAs", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#createExpectableWithShowAs[T](t:=>T,showAs:=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: Option[(String) => String]): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#createExpectable[T](t:=>T,alias:Option[String=>String]):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: (String) => String): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#createExpectable[T](t:=>T,alias:String=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: => String): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#createExpectable[T](t:=>T,alias:=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#createExpectable[T](t:=>T):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "setStacktrace", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.MatchResultStackTrace.setStacktrace", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#setStacktrace[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "stringMatcher", "tail" : "(m: AdaptableMatcher[Any]): StringMatcher", "member" : "org.specs2.matcher.StringMatchers.stringMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#stringMatcher(m:org.specs2.matcher.AdaptableMatcher[Any]):org.specs2.matcher.StringMatcher", "kind" : "implicit def"}, {"label" : "endingWith", "tail" : "(s: => String): Matcher[String]", "member" : "org.specs2.matcher.StringBeHaveMatchers.endingWith", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#endingWith(s:=>String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "startingWith", "tail" : "(s: => String): Matcher[String]", "member" : "org.specs2.matcher.StringBeHaveMatchers.startingWith", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#startingWith(s:=>String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "containing", "tail" : "(s: String): Matcher[String]", "member" : "org.specs2.matcher.StringBeHaveMatchers.containing", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#containing(s:String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "matching", "tail" : "(r: Regex): BeMatchingRegex", "member" : "org.specs2.matcher.StringBeHaveMatchers.matching", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#matching(r:scala.util.matching.Regex):org.specs2.matcher.BeMatchingRegex", "kind" : "def"}, {"label" : "matching", "tail" : "(t: Pattern): BeMatchingPattern", "member" : "org.specs2.matcher.StringBeHaveMatchers.matching", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#matching(t:java.util.regex.Pattern):org.specs2.matcher.BeMatchingPattern", "kind" : "def"}, {"label" : "matching", "tail" : "(t: => String): BeMatching", "member" : "org.specs2.matcher.StringBeHaveMatchers.matching", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#matching(t:=>String):org.specs2.matcher.BeMatching", "kind" : "def"}, {"label" : "toNotStringMatcher", "tail" : "(result: NotMatcher[Any]): NotStringMatcher", "member" : "org.specs2.matcher.StringBeHaveMatchers.toNotStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toNotStringMatcher(result:org.specs2.matcher.NotMatcher[Any]):StringBeHaveMatchers.this.NotStringMatcher", "kind" : "implicit def"}, {"label" : "toNeutralStringMatcher", "tail" : "(result: NeutralMatcher[Any]): NeutralStringMatcher", "member" : "org.specs2.matcher.StringBeHaveMatchers.toNeutralStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toNeutralStringMatcher(result:org.specs2.matcher.NeutralMatcher[Any]):StringBeHaveMatchers.this.NeutralStringMatcher", "kind" : "implicit def"}, {"label" : "toStringResultMatcher", "tail" : "(result: MatchResult[String]): StringResultMatcher", "member" : "org.specs2.matcher.StringBeHaveMatchers.toStringResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toStringResultMatcher(result:org.specs2.matcher.MatchResult[String]):StringBeHaveMatchers.this.StringResultMatcher", "kind" : "implicit def"}, {"label" : "find", "tail" : "(r: Regex): FindMatcherRegex", "member" : "org.specs2.matcher.StringBaseMatchers.find", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#find(r:scala.util.matching.Regex):StringBaseMatchers.this.FindMatcherRegex", "kind" : "def"}, {"label" : "find", "tail" : "(p: Pattern): FindMatcherPattern", "member" : "org.specs2.matcher.StringBaseMatchers.find", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#find(p:java.util.regex.Pattern):StringBaseMatchers.this.FindMatcherPattern", "kind" : "def"}, {"label" : "find", "tail" : "(a: => String): FindMatcher", "member" : "org.specs2.matcher.StringBaseMatchers.find", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#find(a:=>String):StringBaseMatchers.this.FindMatcher", "kind" : "def"}, {"label" : "endWith", "tail" : "(t: => String): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.endWith", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#endWith(t:=>String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "startWith", "tail" : "(a: String): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.startWith", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#startWith(a:String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "=~", "tail" : "(r: Regex): BeMatchingRegex", "member" : "org.specs2.matcher.StringBaseMatchers.=~", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#=~(r:scala.util.matching.Regex):org.specs2.matcher.BeMatchingRegex", "kind" : "def"}, {"label" : "=~", "tail" : "(p: Pattern): BeMatchingPattern", "member" : "org.specs2.matcher.StringBaseMatchers.=~", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#=~(p:java.util.regex.Pattern):org.specs2.matcher.BeMatchingPattern", "kind" : "def"}, {"label" : "=~", "tail" : "(t: => String): BeMatching", "member" : "org.specs2.matcher.StringBaseMatchers.=~", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#=~(t:=>String):org.specs2.matcher.BeMatching", "kind" : "def"}, {"label" : "beMatching", "tail" : "(a: Regex): BeMatchingRegex", "member" : "org.specs2.matcher.StringBaseMatchers.beMatching", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beMatching(a:scala.util.matching.Regex):org.specs2.matcher.BeMatchingRegex", "kind" : "def"}, {"label" : "beMatching", "tail" : "(a: Pattern): BeMatchingPattern", "member" : "org.specs2.matcher.StringBaseMatchers.beMatching", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beMatching(a:java.util.regex.Pattern):org.specs2.matcher.BeMatchingPattern", "kind" : "def"}, {"label" : "beMatching", "tail" : "(a: => String): BeMatching", "member" : "org.specs2.matcher.StringBaseMatchers.beMatching", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beMatching(a:=>String):org.specs2.matcher.BeMatching", "kind" : "def"}, {"label" : "contain", "tail" : "(t: Char): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain(t:Char):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "contain", "tail" : "(t: String): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain(t:String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "!=\/", "tail" : "(s: String): Matcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.!=\/", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#!=\/(s:String):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "be_!=\/", "tail" : "(a: String): Matcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.be_!=\/", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be_!=\/(a:String):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "be_==\/", "tail" : "(a: String): AdaptableMatcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.be_==\/", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be_==\/(a:String):org.specs2.matcher.AdaptableMatcher[Any]", "kind" : "def"}, {"label" : "==\/", "tail" : "(s: String): AdaptableMatcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.==\/", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#==\/(s:String):org.specs2.matcher.AdaptableMatcher[Any]", "kind" : "def"}, {"label" : "definedBy", "tail" : "(values: (K, V)*): Matcher[PartialFunction[K, V]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.definedBy", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#definedBy[K,V](values:(K,V)*):org.specs2.matcher.Matcher[PartialFunction[K,V]]", "kind" : "def"}, {"label" : "definedAt", "tail" : "(values: K*): Matcher[PartialFunction[K, Any]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.definedAt", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#definedAt[K](values:K*):org.specs2.matcher.Matcher[PartialFunction[K,Any]]", "kind" : "def"}, {"label" : "pairs", "tail" : "(pairs: (K, V)*): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.pairs", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#pairs[K,V](pairs:(K,V)*):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "pair", "tail" : "(p: (K, V)): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.pair", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#pair[K,V](p:(K,V)):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "values", "tail" : "(vs: V*): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.values", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#values[V](vs:V*):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "value", "tail" : "(v: V): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.value", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#value[V](v:V):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "keys", "tail" : "(ks: K*): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.keys", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#keys[K](ks:K*):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "key", "tail" : "(k: K): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.key", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#key[K](k:K):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "toPartialFunctionResultMatcher", "tail" : "(result: MatchResult[PartialFunction[K, V]]): PartialFunctionResultMatcher[K, V]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toPartialFunctionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toPartialFunctionResultMatcher[K,V](result:org.specs2.matcher.MatchResult[PartialFunction[K,V]]):MapBeHaveMatchers.this.PartialFunctionResultMatcher[K,V]", "kind" : "implicit def"}, {"label" : "toMapResultMatcher", "tail" : "(result: MatchResult[Iterable[(K, V)]]): MapResultMatcher[K, V]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toMapResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toMapResultMatcher[K,V](result:org.specs2.matcher.MatchResult[Iterable[(K,V)]]):MapBeHaveMatchers.this.MapResultMatcher[K,V]", "kind" : "implicit def"}, {"label" : "toMapValueResultMatcher", "tail" : "(result: MatchResult[Iterable[(Any, V)]]): MapValueResultMatcher[V]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toMapValueResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toMapValueResultMatcher[V](result:org.specs2.matcher.MatchResult[Iterable[(Any,V)]]):MapBeHaveMatchers.this.MapValueResultMatcher[V]", "kind" : "implicit def"}, {"label" : "toMapKeyResultMatcher", "tail" : "(result: MatchResult[Iterable[(K, Any)]]): MapKeyResultMatcher[K]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toMapKeyResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toMapKeyResultMatcher[K](result:org.specs2.matcher.MatchResult[Iterable[(K,Any)]]):MapBeHaveMatchers.this.MapKeyResultMatcher[K]", "kind" : "implicit def"}, {"label" : "beDefinedBy", "tail" : "(values: (K, V)*): Matcher[PartialFunction[K, V]]", "member" : "org.specs2.matcher.MapBaseMatchers.beDefinedBy", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beDefinedBy[K,V](values:(K,V)*):org.specs2.matcher.Matcher[PartialFunction[K,V]]", "kind" : "def"}, {"label" : "beDefinedAt", "tail" : "(values: K*): Matcher[PartialFunction[K, Any]]", "member" : "org.specs2.matcher.MapBaseMatchers.beDefinedAt", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beDefinedAt[K](values:K*):org.specs2.matcher.Matcher[PartialFunction[K,Any]]", "kind" : "def"}, {"label" : "havePairs", "tail" : "(pairs: (K, V)*): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.havePairs", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#havePairs[K,V](pairs:(K,V)*):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "havePair", "tail" : "(p: (K, V)): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.havePair", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#havePair[K,V](p:(K,V)):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "haveValues", "tail" : "(values: V*): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveValues", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#haveValues[V](values:V*):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "haveValue", "tail" : "(v: V): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveValue", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#haveValue[V](v:V):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "haveKeys", "tail" : "(keys: K*): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveKeys", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#haveKeys[K](keys:K*):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "haveKey", "tail" : "(k: K): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveKey", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#haveKey[K](k:K):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "timesFor", "tail" : "(n: Int): Times", "member" : "org.specs2.control.NumberOfTimes.timesFor", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#timesFor(n:Int):org.specs2.control.Times", "kind" : "implicit def"}, {"label" : "implicitParameter10", "tail" : ": ImplicitParam10", "member" : "org.specs2.control.ImplicitParameters.implicitParameter10", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitParameter10:ImplicitParameters.this.ImplicitParam10", "kind" : "implicit lazy val"}, {"label" : "implicitParameter9", "tail" : ": ImplicitParam9", "member" : "org.specs2.control.ImplicitParameters.implicitParameter9", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitParameter9:ImplicitParameters.this.ImplicitParam9", "kind" : "implicit lazy val"}, {"label" : "implicitParameter8", "tail" : ": ImplicitParam8", "member" : "org.specs2.control.ImplicitParameters.implicitParameter8", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitParameter8:ImplicitParameters.this.ImplicitParam8", "kind" : "implicit lazy val"}, {"label" : "implicitParameter7", "tail" : ": ImplicitParam7", "member" : "org.specs2.control.ImplicitParameters.implicitParameter7", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitParameter7:ImplicitParameters.this.ImplicitParam7", "kind" : "implicit lazy val"}, {"label" : "implicitParameter6", "tail" : ": ImplicitParam6", "member" : "org.specs2.control.ImplicitParameters.implicitParameter6", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitParameter6:ImplicitParameters.this.ImplicitParam6", "kind" : "implicit lazy val"}, {"label" : "implicitParameter5", "tail" : ": ImplicitParam5", "member" : "org.specs2.control.ImplicitParameters.implicitParameter5", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitParameter5:ImplicitParameters.this.ImplicitParam5", "kind" : "implicit lazy val"}, {"label" : "implicitParameter4", "tail" : ": ImplicitParam4", "member" : "org.specs2.control.ImplicitParameters.implicitParameter4", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitParameter4:ImplicitParameters.this.ImplicitParam4", "kind" : "implicit lazy val"}, {"label" : "implicitParameter3", "tail" : ": ImplicitParam3", "member" : "org.specs2.control.ImplicitParameters.implicitParameter3", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitParameter3:ImplicitParameters.this.ImplicitParam3", "kind" : "implicit lazy val"}, {"label" : "implicitParameter2", "tail" : ": ImplicitParam2", "member" : "org.specs2.control.ImplicitParameters.implicitParameter2", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitParameter2:ImplicitParameters.this.ImplicitParam2", "kind" : "implicit lazy val"}, {"label" : "implicitParameter1", "tail" : ": ImplicitParam1", "member" : "org.specs2.control.ImplicitParameters.implicitParameter1", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitParameter1:ImplicitParameters.this.ImplicitParam1", "kind" : "implicit lazy val"}, {"label" : "implicitParameter", "tail" : ": ImplicitParam", "member" : "org.specs2.control.ImplicitParameters.implicitParameter", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#implicitParameter:ImplicitParameters.this.ImplicitParam", "kind" : "implicit lazy val"}, {"label" : "matcherSeqIsContainCheckSeq", "tail" : "(seq: Seq[Matcher[T]]): Seq[ValueCheck[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchersLowImplicits.matcherSeqIsContainCheckSeq", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#matcherSeqIsContainCheckSeq[T](seq:Seq[org.specs2.matcher.Matcher[T]]):Seq[org.specs2.matcher.ValueCheck[T]]", "kind" : "implicit def"}, {"label" : "checkableSeqIsContainCheckSeq", "tail" : "(seq: Seq[T])(to: (T) => ValueCheck[T]): Seq[ValueCheck[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchersLowImplicits.checkableSeqIsContainCheckSeq", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#checkableSeqIsContainCheckSeq[T](seq:Seq[T])(implicitto:T=>org.specs2.matcher.ValueCheck[T]):Seq[org.specs2.matcher.ValueCheck[T]]", "kind" : "implicit def"}, {"label" : "functionIsValueCheck", "tail" : "(f: (T) => R)(arg0: AsResult[R]): ValueCheck[T]", "member" : "org.specs2.matcher.ValueChecksLowImplicits.functionIsValueCheck", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#functionIsValueCheck[T,R](f:T=>R)(implicitevidence$3:org.specs2.execute.AsResult[R]):org.specs2.matcher.ValueCheck[T]", "kind" : "implicit def"}, {"label" : "orderedSeqMatchResult", "tail" : "(result: MatchResult[Seq[T]])(arg0: Ordering[T]): OrderedSeqMatchResult[T]", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.orderedSeqMatchResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#orderedSeqMatchResult[T](result:org.specs2.matcher.MatchResult[Seq[T]])(implicitevidence$14:Ordering[T]):TraversableBeHaveMatchers.this.OrderedSeqMatchResult[T]", "kind" : "implicit def"}, {"label" : "sized", "tail" : "(s: MatchResult[T])(arg0: Sized[T]): HasSize[T]", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.sized", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#sized[T](s:org.specs2.matcher.MatchResult[T])(implicitevidence$12:org.specs2.data.Sized[T]):TraversableBeHaveMatchers.this.HasSize[T]", "kind" : "implicit def"}, {"label" : "traversable", "tail" : "(s: MatchResult[Traversable[T]]): TraversableBeHaveMatchers[T]", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.traversable", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#traversable[T](s:org.specs2.matcher.MatchResult[collection.Traversable[T]]):TraversableBeHaveMatchers.this.TraversableBeHaveMatchers[T]", "kind" : "implicit def"}, {"label" : "lazyParameter", "tail" : "(value: => T): LazyParameter[T]", "member" : "org.specs2.control.LazyParameters.lazyParameter", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#lazyParameter[T](value:=>T):org.specs2.control.LazyParameter[T]", "kind" : "implicit def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T], t20: ValueCheck[T], t21: ValueCheck[T], t22: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T],t20:org.specs2.matcher.ValueCheck[T],t21:org.specs2.matcher.ValueCheck[T],t22:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T], t20: ValueCheck[T], t21: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T],t20:org.specs2.matcher.ValueCheck[T],t21:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T], t20: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T],t20:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "sorted", "tail" : "(arg0: Ordering[T]): OrderingMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.sorted", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#sorted[T](implicitevidence$11:Ordering[T]):org.specs2.matcher.OrderingMatcher[T]", "kind" : "def"}, {"label" : "beSorted", "tail" : "(arg0: Ordering[T]): OrderingMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.beSorted", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beSorted[T](implicitevidence$10:Ordering[T]):org.specs2.matcher.OrderingMatcher[T]", "kind" : "def"}, {"label" : "length", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.length", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#length[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$9:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "haveLength", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveLength", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#haveLength[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$8:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "size", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.size", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#size[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$7:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "haveSize", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveSize", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#haveSize[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$6:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "length", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.length", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#length[T](n:Int)(implicitevidence$5:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "haveLength", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveLength", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#haveLength[T](n:Int)(implicitevidence$4:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "size", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.size", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#size[T](n:Int)(implicitevidence$3:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "haveSize", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveSize", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#haveSize[T](n:Int)(implicitevidence$2:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "containTheSameElementsAs", "tail" : "(seq: Seq[T], equality: (T, T) => Boolean): Matcher[Traversable[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containTheSameElementsAs", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#containTheSameElementsAs[T](seq:Seq[T],equality:(T,T)=>Boolean):org.specs2.matcher.Matcher[collection.Traversable[T]]", "kind" : "def"}, {"label" : "containPattern", "tail" : "(t: => String): Matcher[Traversable[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containPattern", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#containPattern[T](t:=>String):org.specs2.matcher.Matcher[collection.Traversable[T]]", "kind" : "def"}, {"label" : "containMatch", "tail" : "(t: => String): Matcher[Traversable[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containMatch", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#containMatch[T](t:=>String):org.specs2.matcher.Matcher[collection.Traversable[T]]", "kind" : "def"}, {"label" : "containAnyOf", "tail" : "(seq: Seq[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containAnyOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#containAnyOf[T](seq:Seq[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "containAllOf", "tail" : "(seq: Seq[T])(arg0: Diffable[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containAllOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#containAllOf[T](seq:Seq[T])(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.atMost", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#atMost[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.atLeast", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#atLeast[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "exactly", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.exactly", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#exactly[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "eachOf", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.eachOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#eachOf[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "allOf", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.allOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#allOf[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(cm: ContainWithResultSeq[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](cm:org.specs2.matcher.ContainWithResultSeq[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(check: ValueCheck[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#contain[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "anInstanceOf", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#anInstanceOf[T](implicitevidence$22:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "assignableFrom", "tail" : "(arg0: ClassTag[T]): Matcher[Class[_]]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.assignableFrom", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#assignableFrom[T](implicitevidence$21:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[Class[_]]", "kind" : "def"}, {"label" : "interface", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.interface", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#interface[T](implicitevidence$20:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "superClass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.superClass", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#superClass[T](implicitevidence$19:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "klass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.klass", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#klass[T](implicitevidence$18:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "anyOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anyOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#anyOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.oneOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#oneOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.empty", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#empty[T<:Any{defisEmpty:Boolean}]:org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "likeA", "tail" : "(pattern: => PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.likeA", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#likeA[T](pattern:=>PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beLikeA", "tail" : "(pattern: => PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.beLikeA", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beLikeA[T](pattern:=>PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "like", "tail" : "(pattern: => PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.like", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#like[T](pattern:=>PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "asNullAs", "tail" : "(a: => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.asNullAs", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#asNullAs[T](a:=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "toBeLikeResultMatcher", "tail" : "(result: MatchResult[T]): BeLikeResultMatcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toBeLikeResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toBeLikeResultMatcher[T](result:org.specs2.matcher.MatchResult[T]):AnyBeHaveMatchers.this.BeLikeResultMatcher[T]", "kind" : "implicit def"}, {"label" : "anyWithEmpty", "tail" : "(result: MatchResult[T])(arg0: (T) => Any { def isEmpty: Boolean }): AnyWithEmptyMatchers[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anyWithEmpty", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#anyWithEmpty[T](result:org.specs2.matcher.MatchResult[T])(implicitevidence$16:T=>Any{defisEmpty:Boolean}):AnyBeHaveMatchers.this.AnyWithEmptyMatchers[T]", "kind" : "implicit def"}, {"label" : "toClassMatcherResult", "tail" : "(result: MatchResult[Class[_]]): ClassMatcherResult", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toClassMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toClassMatcherResult(result:org.specs2.matcher.MatchResult[Class[_]]):AnyBeHaveMatchers.this.ClassMatcherResult", "kind" : "implicit def"}, {"label" : "toAnyMatcherResult", "tail" : "(result: MatchResult[AnyRef]): AnyMatcherResult", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toAnyMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toAnyMatcherResult(result:org.specs2.matcher.MatchResult[AnyRef]):AnyBeHaveMatchers.this.AnyMatcherResult", "kind" : "implicit def"}, {"label" : "toAnyRefMatcherResult", "tail" : "(result: MatchResult[T]): AnyRefMatcherResult[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toAnyRefMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toAnyRefMatcherResult[T<:AnyRef](result:org.specs2.matcher.MatchResult[T]):AnyBeHaveMatchers.this.AnyRefMatcherResult[T]", "kind" : "implicit def"}, {"label" : "anyBeHaveMatcher", "tail" : "(result: MatchResult[T]): AnyBeHaveMatchers[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anyBeHaveMatcher", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#anyBeHaveMatcher[T](result:org.specs2.matcher.MatchResult[T]):AnyBeHaveMatchers.this.AnyBeHaveMatchers[T]", "kind" : "implicit def"}, {"label" : "not", "tail" : "(): NotMatcher[Any]", "member" : "org.specs2.matcher.BeHaveMatchers.not", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#not:org.specs2.matcher.NotMatcher[Any]", "kind" : "def"}, {"label" : "have", "tail" : "(): NeutralMatcher[Any]", "member" : "org.specs2.matcher.BeHaveMatchers.have", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#have:org.specs2.matcher.NeutralMatcher[Any]", "kind" : "def"}, {"label" : "be", "tail" : "(): NeutralMatcher[Any]", "member" : "org.specs2.matcher.BeHaveMatchers.be", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be:org.specs2.matcher.NeutralMatcher[Any]", "kind" : "def"}, {"label" : "beAnInstanceOf", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAnInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beAnInstanceOf[T](implicitevidence$13:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "beAssignableFrom", "tail" : "(arg0: ClassTag[T]): Matcher[Class[_]]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAssignableFrom", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beAssignableFrom[T](implicitevidence$12:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[Class[_]]", "kind" : "def"}, {"label" : "haveInterface", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.haveInterface", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#haveInterface[T](implicitevidence$11:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "haveSuperclass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.haveSuperclass", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#haveSuperclass[T](implicitevidence$10:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "haveClass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.haveClass", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#haveClass[T](implicitevidence$9:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "beLike", "tail" : "(pattern: PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beLike", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beLike[T](pattern:PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beAnyOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAnyOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beAnyOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beOneOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beOneOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beOneOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beAsNullAs", "tail" : "(a: => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAsNullAs", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beAsNullAs[T](a:=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beNull", "tail" : "(): BeNull[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beNull", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beNull[T]:org.specs2.matcher.BeNull[T]", "kind" : "def"}, {"label" : "beEmpty", "tail" : "(arg0: (T) => Any { def isEmpty: Boolean }): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beEmpty", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beEmpty[T](implicitevidence$8:T=>Any{defisEmpty:Boolean}):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "not", "tail" : "(m: Matcher[T]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.not", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#not[T](m:org.specs2.matcher.Matcher[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "==~", "tail" : "(s: => S)(arg0: Diffable[T], convert: (S) => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.==~", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#==~[T,S](s:=>S)(implicitevidence$7:org.specs2.matcher.describe.Diffable[T],implicitconvert:S=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "be_==~", "tail" : "(s: => S)(arg0: Diffable[T], convert: (S) => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_==~", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be_==~[T,S](s:=>S)(implicitevidence$6:org.specs2.matcher.describe.Diffable[T],implicitconvert:S=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "typedEqualTo", "tail" : "(t: => T): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.typedEqualTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#typedEqualTo[T](t:=>T):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "beTypedEqualTo", "tail" : "(t: => T)(arg0: Diffable[T]): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beTypedEqualTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beTypedEqualTo[T](t:=>T)(implicitevidence$5:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "equalTo", "tail" : "(t: => T): BeEqualTo", "member" : "org.specs2.matcher.AnyBaseMatchers.equalTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#equalTo[T](t:=>T):org.specs2.matcher.BeEqualTo", "kind" : "def"}, {"label" : "beEqualTo", "tail" : "(t: => T): BeEqualTo", "member" : "org.specs2.matcher.AnyBaseMatchers.beEqualTo", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beEqualTo[T](t:=>T):org.specs2.matcher.BeEqualTo", "kind" : "def"}, {"label" : "!==", "tail" : "(t: => T)(arg0: Diffable[T]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.!==", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#!==[T](t:=>T)(implicitevidence$4:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "be_!==", "tail" : "(t: => T)(arg0: Diffable[T]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_!==", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be_!==[T](t:=>T)(implicitevidence$3:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "===", "tail" : "(t: => T)(arg0: Diffable[T]): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.===", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#===[T](t:=>T)(implicitevidence$2:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "be_===", "tail" : "(t: => T)(arg0: Diffable[T]): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_===", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be_===[T](t:=>T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "be_!=", "tail" : "(t: => T): Matcher[Any]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_!=", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be_!=[T](t:=>T):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "be_==", "tail" : "(t: => T): BeEqualTo", "member" : "org.specs2.matcher.AnyBaseMatchers.be_==", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be_==[T](t:=>T):org.specs2.matcher.BeEqualTo", "kind" : "def"}, {"label" : "be", "tail" : "(t: => T): BeTheSameAs[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#be[T<:AnyRef](t:=>T):org.specs2.matcher.BeTheSameAs[T]", "kind" : "def"}, {"label" : "beTheSameAs", "tail" : "(t: => T): BeTheSameAs[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beTheSameAs", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beTheSameAs[T<:AnyRef](t:=>T):org.specs2.matcher.BeTheSameAs[T]", "kind" : "def"}, {"label" : "beFalse", "tail" : "(): Matcher[Boolean]", "member" : "org.specs2.matcher.AnyBaseMatchers.beFalse", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beFalse:org.specs2.matcher.Matcher[Boolean]", "kind" : "def"}, {"label" : "beTrue", "tail" : "(): BeTrueMatcher", "member" : "org.specs2.matcher.AnyBaseMatchers.beTrue", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#beTrue:org.specs2.matcher.BeTrueMatcher", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/ParseResultMatchers.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "com.lucidchart.open.xtract.XmlMatchers", "trait" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html", "kind" : "trait", "members_trait" : [{"label" : "Debuggable", "tail" : "", "member" : "org.specs2.control.Debug.Debuggable", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#Debuggable[T<:<?>]extendsConsoleOutput", "kind" : "class"}, {"label" : "PendingUntilFixed", "tail" : "", "member" : "org.specs2.execute.PendingUntilFixed.PendingUntilFixed", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#PendingUntilFixed[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "InvariantMatcherFunction", "tail" : "", "member" : "org.specs2.matcher.SequenceMatchersCreation.InvariantMatcherFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#InvariantMatcherFunction[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AdaptFunction", "tail" : "", "member" : "org.specs2.matcher.MatchersCreation.AdaptFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#AdaptFunction[T<:<?>,S<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "resultFunction", "tail" : "", "member" : "org.specs2.matcher.ResultImplicits.resultFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#resultFunction[T<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher22", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher22", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher22[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>,T20<:<?>,T21<:<?>,T22<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher21", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher21", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher21[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>,T20<:<?>,T21<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher20", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher20", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher20[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>,T20<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher19", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher19", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher19[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher18", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher18", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher18[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher17", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher17", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher17[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher16", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher16", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher16[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher15", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher15", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher15[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher14", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher14", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher14[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher13", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher13", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher13[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher12", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher12", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher12[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher11", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher11", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher11[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher10", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher10", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher10[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher9", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher9", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher9[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher8", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher8", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher8[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher7", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher7", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher7[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher6", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher6", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher6[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher5", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher5", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher5[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher4", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher4", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher4[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher3", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher3", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher3[T1<:<?>,T2<:<?>,T3<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher2", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher2", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TupleMatcher2[T1<:<?>,T2<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ContainSeqMatcherFunction", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.ContainSeqMatcherFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ContainSeqMatcherFunction[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ResultLogicalCombinator", "tail" : "", "member" : "org.specs2.execute.ResultLogicalCombinators.ResultLogicalCombinator", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ResultLogicalCombinatorextendsAnyRef", "kind" : "class"}, {"label" : "MatchResultCombinator", "tail" : "", "member" : "org.specs2.matcher.MatchResultLogicalCombinators.MatchResultCombinator", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#MatchResultCombinator[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Descriptible", "tail" : "", "member" : "org.specs2.matcher.ExpectationsDescription.Descriptible", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#Descriptible[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ExpectationDescription", "tail" : "", "member" : "org.specs2.matcher.ExpectationsDescription.ExpectationDescription", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ExpectationDescriptionextendsAnyRef", "kind" : "class"}, {"label" : "TypedEqualExpectation", "tail" : "", "member" : "org.specs2.matcher.TypedEqual.TypedEqualExpectation", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TypedEqualExpectation[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "futureAsResult", "tail" : "", "member" : "org.specs2.matcher.FutureMatchers.futureAsResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#futureAsResult[T]extendsFutureMatchers.this.FutureAsResult[T]", "kind" : "implicit class"}, {"label" : "FutureMatchable", "tail" : "", "member" : "org.specs2.matcher.FutureMatchers.FutureMatchable", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#FutureMatchable[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TryResultMatcher", "tail" : "", "member" : "org.specs2.matcher.TryBeHaveMatchers.TryResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TryResultMatcher[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "EitherResultMatcher", "tail" : "", "member" : "org.specs2.matcher.EitherBeHaveMatchers.EitherResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#EitherResultMatcher[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "OptionResultMatcher", "tail" : "", "member" : "org.specs2.matcher.OptionBeHaveMatchers.OptionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#OptionResultMatcher[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "SignificantSyntax", "tail" : "", "member" : "org.specs2.matcher.NumericMatchers.SignificantSyntax", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#SignificantSyntax[N<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SignificantFiguresSyntax", "tail" : "", "member" : "org.specs2.matcher.NumericMatchers.SignificantFiguresSyntax", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#SignificantFiguresSyntaxextendsAnyRef", "kind" : "implicit class"}, {"label" : "NeutralMatcherNumeric", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.NeutralMatcherNumeric", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#NeutralMatcherNumericextendsAnyRef", "kind" : "class"}, {"label" : "NeutralMatcherOrdered", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.NeutralMatcherOrdered", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#NeutralMatcherOrderedextendsAnyRef", "kind" : "class"}, {"label" : "NumericResultMatcher", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.NumericResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#NumericResultMatcher[S<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "OrderedResultMatcher", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.OrderedResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#OrderedResultMatcher[S<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ExceptionMatcherResult", "tail" : "", "member" : "org.specs2.matcher.ExceptionBeHaveMatchers.ExceptionMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ExceptionMatcherResult[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ExceptionMatcher", "tail" : "", "member" : "org.specs2.matcher.ExceptionBaseMatchers.ExceptionMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ExceptionMatcher[E<:<?>]extendsMatcher[Any]", "kind" : "class"}, {"label" : "ExceptionClassMatcher", "tail" : "", "member" : "org.specs2.matcher.ExceptionBaseMatchers.ExceptionClassMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ExceptionClassMatcherextendsMatcher[Any]", "kind" : "class"}, {"label" : "NotStringMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBeHaveMatchers.NotStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#NotStringMatcherextendsAnyRef", "kind" : "class"}, {"label" : "NeutralStringMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBeHaveMatchers.NeutralStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#NeutralStringMatcherextendsAnyRef", "kind" : "class"}, {"label" : "StringResultMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBeHaveMatchers.StringResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#StringResultMatcherextendsAnyRef", "kind" : "class"}, {"label" : "FindMatcherPatternWithGroups", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherPatternWithGroups", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#FindMatcherPatternWithGroupsextendsStringBaseMatchers.this.FindMatcherWithGroups", "kind" : "class"}, {"label" : "FindMatcherWithGroups", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherWithGroups", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#FindMatcherWithGroupsextendsMatcher[String]", "kind" : "class"}, {"label" : "FindMatcherRegex", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherRegex", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#FindMatcherRegexextendsStringBaseMatchers.this.FindMatcherPattern", "kind" : "class"}, {"label" : "FindMatcherPattern", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherPattern", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#FindMatcherPatternextendsStringBaseMatchers.this.FindMatcher", "kind" : "class"}, {"label" : "FindMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#FindMatcherextendsMatcher[String]", "kind" : "class"}, {"label" : "PartialFunctionResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.PartialFunctionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#PartialFunctionResultMatcher[K<:<?>,V<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MapResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.MapResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#MapResultMatcher[K<:<?>,V<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MapValueResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.MapValueResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#MapValueResultMatcher[V<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MapKeyResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.MapKeyResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#MapKeyResultMatcher[K<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ImplicitParam10", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam10", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ImplicitParam10extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam9", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam9", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ImplicitParam9extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam8", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam8", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ImplicitParam8extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam7", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam7", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ImplicitParam7extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam6", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam6", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ImplicitParam6extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam5", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam5", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ImplicitParam5extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam4", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam4", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ImplicitParam4extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam3", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam3", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ImplicitParam3extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam2", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam2", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ImplicitParam2extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam1", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam1", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ImplicitParam1extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ImplicitParamextendsAnyRef", "kind" : "trait"}, {"label" : "OrderedSeqMatchResult", "tail" : "", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.OrderedSeqMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#OrderedSeqMatchResult[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HasSize", "tail" : "", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.HasSize", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#HasSize[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "TraversableBeHaveMatchers", "tail" : "", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.TraversableBeHaveMatchers", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TraversableBeHaveMatchers[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "BeLikeResultMatcher", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.BeLikeResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#BeLikeResultMatcher[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AnyWithEmptyMatchers", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyWithEmptyMatchers", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#AnyWithEmptyMatchers[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ClassMatcherResult", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.ClassMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ClassMatcherResultextendsAnyRef", "kind" : "class"}, {"label" : "AnyMatcherResult", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#AnyMatcherResultextendsAnyRef", "kind" : "class"}, {"label" : "AnyRefMatcherResult", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyRefMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#AnyRefMatcherResult[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AnyBeHaveMatchers", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyBeHaveMatchers", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#AnyBeHaveMatchers[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "FragmentsTaggedAs", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TagDsl.FragmentsTaggedAs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#FragmentsTaggedAsextendsAnyRef", "kind" : "implicit class"}, {"label" : "FragmentTaggedAs", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TagDsl.FragmentTaggedAs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#FragmentTaggedAsextendsAnyRef", "kind" : "implicit class"}, {"label" : "mutableSeeFragment", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.mutableSeeFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#mutableSeeFragmentextendsReferenceDsl.this.seeFragment", "kind" : "implicit class"}, {"label" : "mutableLinkFragment", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.mutableLinkFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#mutableLinkFragmentextendsReferenceDsl.this.linkFragment", "kind" : "implicit class"}, {"label" : "MutableTitleOps", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TitleDsl.MutableTitleOps", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#MutableTitleOpsextendsTitleDsl.this.TitleOps", "kind" : "class"}, {"label" : "fragmentsFormatting", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TextDsl.fragmentsFormatting", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fragmentsFormattingextendsAnyRef", "kind" : "implicit class"}, {"label" : "fragmentFormatting", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TextDsl.fragmentFormatting", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fragmentFormattingextendsAnyRef", "kind" : "implicit class"}, {"label" : "textFragment", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TextDsl.textFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#textFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "MutableBangExample", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl.MutableBangExample", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#MutableBangExampleextendsExampleDsl.this.BangExample", "kind" : "class"}, {"label" : "BlockExample", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl1.BlockExample", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#BlockExampleextendsExampleDsl1.this.BlockExample0", "kind" : "class"}, {"label" : "BlockExample0", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl0.BlockExample0", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#BlockExample0extendsAnyRef", "kind" : "class"}, {"label" : "WarningForgottenOperator", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.BlockDsl.WarningForgottenOperator", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#WarningForgottenOperatorextendsAnyRef", "kind" : "class"}, {"label" : "describe", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.BlockDsl.describe", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#describeextendsAnyRef", "kind" : "implicit class"}, {"label" : "specificationInStringContext", "tail" : "", "member" : "org.specs2.specification.create.S2StringContextCreation.specificationInStringContext", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#specificationInStringContextextendsAnyRef", "kind" : "implicit class"}, {"label" : "seeFragment", "tail" : "", "member" : "org.specs2.specification.dsl.ReferenceDsl.seeFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#seeFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "linkFragment", "tail" : "", "member" : "org.specs2.specification.dsl.ReferenceDsl.linkFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#linkFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "BangExample", "tail" : "", "member" : "org.specs2.specification.dsl.ExampleDsl.BangExample", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#BangExampleextendsAnyRef", "kind" : "class"}, {"label" : "TitleOps", "tail" : "", "member" : "org.specs2.specification.dsl.TitleDsl.TitleOps", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#TitleOpsextendsAnyRef", "kind" : "class"}, {"label" : "appendSpecStructureToSpecStructure", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDsl.appendSpecStructureToSpecStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#appendSpecStructureToSpecStructureextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendSpecStructureToSpecHeader", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDsl.appendSpecStructureToSpecHeader", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#appendSpecStructureToSpecHeaderextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendSpecStructureToFragment", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDsl.appendSpecStructureToFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#appendSpecStructureToFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendSpecStructureToString", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDsl.appendSpecStructureToString", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#appendSpecStructureToStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendSpecStructureToFragments", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDslLowImplicits.appendSpecStructureToFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#appendSpecStructureToFragmentsextendsAnyRef", "kind" : "implicit class"}, {"label" : "MutedFragment", "tail" : "", "member" : "org.specs2.specification.dsl.FragmentsDsl.MutedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#MutedFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "HiddenFragment", "tail" : "", "member" : "org.specs2.specification.dsl.FragmentsDsl.HiddenFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#HiddenFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendToFragments", "tail" : "", "member" : "org.specs2.specification.dsl.FragmentsDsl.appendToFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#appendToFragmentsextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendToFragment", "tail" : "", "member" : "org.specs2.specification.dsl.FragmentsDsl.appendToFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#appendToFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendToString", "tail" : "", "member" : "org.specs2.specification.dsl.FragmentsDsl.appendToString", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#appendToStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendToArguments", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDsl1.appendToArguments", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#appendToArgumentsextendsAnyRef", "kind" : "implicit class"}, {"label" : "isNodeSeqWithLength", "tail" : "(n: Int): Matcher[NodeSeq]", "member" : "com.lucidchart.open.xtract.XmlMatchers.isNodeSeqWithLength", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#isNodeSeqWithLength(n:Int):org.specs2.matcher.Matcher[scala.xml.NodeSeq]", "kind" : "def"}, {"label" : "isNodeWithLabel", "tail" : "(label: String): Matcher[NodeSeq]", "member" : "com.lucidchart.open.xtract.XmlMatchers.isNodeWithLabel", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#isNodeWithLabel(label:String):org.specs2.matcher.Matcher[scala.xml.NodeSeq]", "kind" : "def"}, {"label" : "isNodeWithAttribute", "tail" : "(attribute: String, expected: String): Matcher[NodeSeq]", "member" : "com.lucidchart.open.xtract.XmlMatchers.isNodeWithAttribute", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#isNodeWithAttribute(attribute:String,expected:String):org.specs2.matcher.Matcher[scala.xml.NodeSeq]", "kind" : "def"}, {"label" : "createShouldExpectable", "tail" : "(t: => T): ShouldExpectable[T]", "member" : "org.specs2.matcher.ShouldThrownExpectables.createShouldExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#createShouldExpectable[T](t:=>T):org.specs2.matcher.ShouldExpectable[T]", "kind" : "def"}, {"label" : "akaShould", "tail" : "(tm: Expectable[T]): ShouldExpectable[T]", "member" : "org.specs2.matcher.ShouldThrownExpectables.akaShould", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#akaShould[T](tm:org.specs2.matcher.Expectable[T]):org.specs2.matcher.ShouldExpectable[T]", "kind" : "implicit def"}, {"label" : "sandboxMatchResult", "tail" : "(mr: => MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ThrownStandardMatchResults.sandboxMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#sandboxMatchResult[T](mr:=>org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "ko", "tail" : ": MatchResult[Any]", "member" : "org.specs2.matcher.ThrownStandardMatchResults.ko", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ko:org.specs2.matcher.MatchResult[Any]", "kind" : "lazy val"}, {"label" : "skipped", "tail" : "(s: Skipped): Skipped", "member" : "org.specs2.matcher.ThrownStandardResults.skipped", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#skipped(s:org.specs2.execute.Skipped):org.specs2.execute.Skipped", "kind" : "def"}, {"label" : "skipped", "tail" : "(m: String): Skipped", "member" : "org.specs2.matcher.ThrownStandardResults.skipped", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#skipped(m:String):org.specs2.execute.Skipped", "kind" : "def"}, {"label" : "skipped", "tail" : "(): Skipped", "member" : "org.specs2.matcher.ThrownStandardResults.skipped", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#skipped:org.specs2.execute.Skipped", "kind" : "def"}, {"label" : "pending", "tail" : "(p: Pending): Pending", "member" : "org.specs2.matcher.ThrownStandardResults.pending", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#pending(p:org.specs2.execute.Pending):org.specs2.execute.Pending", "kind" : "def"}, {"label" : "pending", "tail" : "(m: String): Pending", "member" : "org.specs2.matcher.ThrownStandardResults.pending", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#pending(m:String):org.specs2.execute.Pending", "kind" : "def"}, {"label" : "pending", "tail" : "(): Pending", "member" : "org.specs2.matcher.ThrownStandardResults.pending", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#pending:org.specs2.execute.Pending", "kind" : "def"}, {"label" : "failure", "tail" : "(f: Failure): Failure", "member" : "org.specs2.matcher.ThrownStandardResults.failure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#failure(f:org.specs2.execute.Failure):org.specs2.execute.Failure", "kind" : "def"}, {"label" : "failure", "tail" : "(m: String): Failure", "member" : "org.specs2.matcher.ThrownStandardResults.failure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#failure(m:String):org.specs2.execute.Failure", "kind" : "def"}, {"label" : "success", "tail" : "(m: String): Success", "member" : "org.specs2.matcher.ThrownStandardResults.success", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#success(m:String):org.specs2.execute.Success", "kind" : "def"}, {"label" : "success", "tail" : ": Success", "member" : "org.specs2.matcher.ThrownStandardResults.success", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#success:org.specs2.execute.Success", "kind" : "lazy val"}, {"label" : "anError", "tail" : "(): Error", "member" : "org.specs2.matcher.ThrownStandardResults.anError", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#anError:org.specs2.execute.Error", "kind" : "def"}, {"label" : "todo", "tail" : "(): Pending", "member" : "org.specs2.matcher.ThrownStandardResults.todo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#todo:org.specs2.execute.Pending", "kind" : "def"}, {"label" : "failure", "tail" : "(): Failure", "member" : "org.specs2.matcher.ThrownStandardResults.failure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#failure:org.specs2.execute.Failure", "kind" : "def"}, {"label" : "akaMust", "tail" : "(tm: Expectable[T]): MustExpectable[T]", "member" : "org.specs2.matcher.MustThrownExpectables.akaMust", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#akaMust[T](tm:org.specs2.matcher.Expectable[T]):org.specs2.matcher.MustExpectable[T]", "kind" : "implicit def"}, {"label" : "createMustExpectable", "tail" : "(t: => T): MustExpectable[T]", "member" : "org.specs2.matcher.MustThrownExpectationsCreation.createMustExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#createMustExpectable[T](t:=>T):org.specs2.matcher.MustExpectable[T]", "kind" : "def"}, {"label" : "checkMatchResultFailure", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ThrownExpectables.checkMatchResultFailure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#checkMatchResultFailure[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "checkResultFailure", "tail" : "(result: => Result): Result", "member" : "org.specs2.matcher.ThrownExpectables.checkResultFailure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#checkResultFailure(result:=>org.specs2.execute.Result):org.specs2.execute.Result", "kind" : "def"}, {"label" : "createExpectableWithShowAs", "tail" : "(t: => T, show: => String): Expectable[T]", "member" : "org.specs2.matcher.ThrownExpectables.createExpectableWithShowAs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#createExpectableWithShowAs[T](t:=>T,show:=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: Option[(String) => String]): Expectable[T]", "member" : "org.specs2.matcher.ThrownExpectables.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#createExpectable[T](t:=>T,alias:Option[String=>String]):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "executionEnvToExecutorService", "tail" : "(ee: ExecutionEnv): ExecutorService", "member" : "org.specs2.concurrent.ImplicitExecutorServiceFromExecutionEnv.executionEnvToExecutorService", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#executionEnvToExecutorService(implicitee:org.specs2.concurrent.ExecutionEnv):java.util.concurrent.ExecutorService", "kind" : "implicit def"}, {"label" : "executionEnvToExecutionContext", "tail" : "(ee: ExecutionEnv): ExecutionContext", "member" : "org.specs2.concurrent.ImplicitExecutionContextFromExecutionEnv.executionEnvToExecutionContext", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#executionEnvToExecutionContext(implicitee:org.specs2.concurrent.ExecutionEnv):scala.concurrent.ExecutionContext", "kind" : "implicit def"}, {"label" : "debug", "tail" : "(t: => T): Debuggable[T]", "member" : "org.specs2.control.Debug.debug", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#debug[T](t:=>T):Debug.this.Debuggable[T]", "kind" : "implicit def"}, {"label" : "toPendingUntilFixed", "tail" : "(t: => T)(arg0: AsResult[T]): PendingUntilFixed[T]", "member" : "org.specs2.execute.PendingUntilFixed.toPendingUntilFixed", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toPendingUntilFixed[T](t:=>T)(implicitevidence$3:org.specs2.execute.AsResult[T]):PendingUntilFixed.this.PendingUntilFixed[T]", "kind" : "implicit def"}, {"label" : "pendingUntilFixed", "tail" : "(m: String)(t: => T)(arg0: AsResult[T]): Result", "member" : "org.specs2.execute.PendingUntilFixed.pendingUntilFixed", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#pendingUntilFixed[T](m:String)(t:=>T)(implicitevidence$2:org.specs2.execute.AsResult[T]):org.specs2.execute.Result", "kind" : "def"}, {"label" : "pendingUntilFixed", "tail" : "(t: => T)(arg0: AsResult[T]): Result", "member" : "org.specs2.execute.PendingUntilFixed.pendingUntilFixed", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#pendingUntilFixed[T](t:=>T)(implicitevidence$1:org.specs2.execute.AsResult[T]):org.specs2.execute.Result", "kind" : "def"}, {"label" : "ok", "tail" : ": MatchResult[Any]", "member" : "org.specs2.matcher.StandardMatchResults.ok", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ok:org.specs2.matcher.MatchResult[Any]", "kind" : "lazy val"}, {"label" : "ko", "tail" : "(m: String): MatchResult[Any]", "member" : "org.specs2.matcher.StandardMatchResults.ko", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ko(m:String):org.specs2.matcher.MatchResult[Any]", "kind" : "def"}, {"label" : "ok", "tail" : "(m: String): MatchResult[Any]", "member" : "org.specs2.matcher.StandardMatchResults.ok", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ok(m:String):org.specs2.matcher.MatchResult[Any]", "kind" : "def"}, {"label" : "skipped", "tail" : "(r: => R)(arg0: AsResult[R]): Skipped", "member" : "org.specs2.execute.StandardResults.skipped", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#skipped[R](r:=>R)(implicitevidence$2:org.specs2.execute.AsResult[R]):org.specs2.execute.Skipped", "kind" : "def"}, {"label" : "pending", "tail" : "(r: => R)(arg0: AsResult[R]): Pending", "member" : "org.specs2.execute.StandardResults.pending", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#pending[R](r:=>R)(implicitevidence$1:org.specs2.execute.AsResult[R]):org.specs2.execute.Pending", "kind" : "def"}, {"label" : "wontdo", "tail" : "(): Success", "member" : "org.specs2.execute.StandardResults.wontdo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#wontdo:org.specs2.execute.Success", "kind" : "def"}, {"label" : "done", "tail" : "(): Success", "member" : "org.specs2.execute.StandardResults.done", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#done:org.specs2.execute.Success", "kind" : "def"}, {"label" : "thisBlock", "tail" : "(t: => Nothing): ShouldExpectable[Nothing]", "member" : "org.specs2.matcher.ShouldExpectations.thisBlock", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#thisBlock(t:=>Nothing):org.specs2.matcher.ShouldExpectable[Nothing]", "kind" : "implicit def"}, {"label" : "thisValue", "tail" : "(t: => T): ShouldExpectable[T]", "member" : "org.specs2.matcher.ShouldExpectations.thisValue", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#thisValue[T](t:=>T):org.specs2.matcher.ShouldExpectable[T]", "kind" : "implicit def"}, {"label" : "theBlock", "tail" : "(t: => Nothing): MustExpectable[Nothing]", "member" : "org.specs2.matcher.MustExpectations.theBlock", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#theBlock(t:=>Nothing):org.specs2.matcher.MustExpectable[Nothing]", "kind" : "implicit def"}, {"label" : "theValue", "tail" : "(t: => T): MustExpectable[T]", "member" : "org.specs2.matcher.MustExpectations1.theValue", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#theValue[T](t:=>T):org.specs2.matcher.MustExpectable[T]", "kind" : "implicit def"}, {"label" : "postfixOpsAreAllowed", "tail" : ": postfixOps", "member" : "org.specs2.control.LanguageFeatures.postfixOpsAreAllowed", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#postfixOpsAreAllowed:languageFeature.postfixOps", "kind" : "implicit lazy val"}, {"label" : "implicitsAreAllowed", "tail" : ": implicitConversions", "member" : "org.specs2.control.LanguageFeatures.implicitsAreAllowed", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitsAreAllowed:languageFeature.implicitConversions", "kind" : "implicit lazy val"}, {"label" : "atMostOnceWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, R])(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atMostOnceWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#atMostOnceWhen[T,R](values:collection.Traversable[T])(f:PartialFunction[T,R])(implicitevidence$8:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "atLeastOnceWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, R])(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atLeastOnceWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#atLeastOnceWhen[T,R](values:collection.Traversable[T])(f:PartialFunction[T,R])(implicitevidence$7:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "atMostOnce", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atMostOnce", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#atMostOnce[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "atLeastOnce", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atLeastOnce", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#atLeastOnce[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "atMostOnce", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atMostOnce", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#atMostOnce[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$6:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "atLeastOnce", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atLeastOnce", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#atLeastOnce[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$5:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "foreachWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, R])(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.foreachWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#foreachWhen[T,R](values:collection.Traversable[T])(f:PartialFunction[T,R])(implicitevidence$4:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.foreach", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#foreach[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.foreach", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#foreach[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$3:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "forallWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, MatchResult[U]]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.forallWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#forallWhen[T,U](values:collection.Traversable[T])(f:PartialFunction[T,org.specs2.matcher.MatchResult[U]]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "forall", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.forall", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#forall[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "forall", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.forall", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#forall[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$2:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "stringMatcherFunctionToBynameMatcherFunction", "tail" : "(f: (T) => Matcher[R]): (=> T) => Matcher[R]", "member" : "org.specs2.matcher.MatchersCreation.stringMatcherFunctionToBynameMatcherFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stringMatcherFunctionToBynameMatcherFunction[T,R](f:T=>org.specs2.matcher.Matcher[R]):(=>T)=>org.specs2.matcher.Matcher[R]", "kind" : "implicit def"}, {"label" : "matchResultFunctionToMatcher", "tail" : "(f: (T) => R)(arg0: AsResult[R]): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.matchResultFunctionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#matchResultFunctionToMatcher[T,R](f:T=>R)(implicitevidence$9:org.specs2.execute.AsResult[R]):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "tripletFunctionToMatcher", "tail" : "(f: (T) => (Boolean, String, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.tripletFunctionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#tripletFunctionToMatcher[T](f:T=>(Boolean,String,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "pairFunctionToMatcher", "tail" : "(f: (T) => (Boolean, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.pairFunctionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#pairFunctionToMatcher[T](f:T=>(Boolean,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionAndMessagesToMatcher", "tail" : "(f: ((T) => Boolean, (T) => String, (T) => String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionAndMessagesToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#functionAndMessagesToMatcher[T](f:(T=>Boolean,T=>String,T=>String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionAndKoMessageToMatcher", "tail" : "(f: ((T) => Boolean, (T) => String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionAndKoMessageToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#functionAndKoMessageToMatcher[T](f:(T=>Boolean,T=>String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionToMatcher2", "tail" : "(f: ((T) => Boolean, String, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionToMatcher2", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#functionToMatcher2[T](f:(T=>Boolean,String,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionToMatcher", "tail" : "(f: ((T) => Boolean, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#functionToMatcher[T](f:(T=>Boolean,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "fromMatchResult", "tail" : "(r: => MatchResult[_]): Boolean", "member" : "org.specs2.matcher.MatchResultImplicits.fromMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fromMatchResult(r:=>org.specs2.matcher.MatchResult[_]):Boolean", "kind" : "implicit def"}, {"label" : "asResult", "tail" : "(r: MatchResult[T]): Result", "member" : "org.specs2.matcher.MatchResultImplicits.asResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#asResult[T](r:org.specs2.matcher.MatchResult[T]):org.specs2.execute.Result", "kind" : "implicit def"}, {"label" : "seqToResult", "tail" : "(r: Seq[MatchResult[T]]): Result", "member" : "org.specs2.matcher.MatchResultImplicits.seqToResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#seqToResult[T](r:Seq[org.specs2.matcher.MatchResult[T]]):org.specs2.execute.Result", "kind" : "implicit def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19], m20: (=> T20) => Matcher[S20], m21: (=> T21) => Matcher[S21], m22: (=> T22) => Matcher[S22]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, S21, S22)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21,S22](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19],m20:(=>T20)=>org.specs2.matcher.Matcher[S20],m21:(=>T21)=>org.specs2.matcher.Matcher[S21],m22:(=>T22)=>org.specs2.matcher.Matcher[S22]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21,S22)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19], m20: (=> T20) => Matcher[S20], m21: (=> T21) => Matcher[S21]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, S21)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19],m20:(=>T20)=>org.specs2.matcher.Matcher[S20],m21:(=>T21)=>org.specs2.matcher.Matcher[S21]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19], m20: (=> T20) => Matcher[S20]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19],m20:(=>T20)=>org.specs2.matcher.Matcher[S20]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,S1,S2,S3,S4,S5,S6,S7,S8,S9](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8]): (=> (T1, T2, T3, T4, T5, T6, T7, T8)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,S1,S2,S3,S4,S5,S6,S7,S8](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8]):(=>(T1,T2,T3,T4,T5,T6,T7,T8))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7]): (=> (T1, T2, T3, T4, T5, T6, T7)) => Matcher[(S1, S2, S3, S4, S5, S6, S7)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,T7,S1,S2,S3,S4,S5,S6,S7](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7]):(=>(T1,T2,T3,T4,T5,T6,T7))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6]): (=> (T1, T2, T3, T4, T5, T6)) => Matcher[(S1, S2, S3, S4, S5, S6)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,T6,S1,S2,S3,S4,S5,S6](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6]):(=>(T1,T2,T3,T4,T5,T6))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5]): (=> (T1, T2, T3, T4, T5)) => Matcher[(S1, S2, S3, S4, S5)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,T5,S1,S2,S3,S4,S5](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5]):(=>(T1,T2,T3,T4,T5))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4]): (=> (T1, T2, T3, T4)) => Matcher[(S1, S2, S3, S4)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,T4,S1,S2,S3,S4](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4]):(=>(T1,T2,T3,T4))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3]): (=> (T1, T2, T3)) => Matcher[(S1, S2, S3)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,T3,S1,S2,S3](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3]):(=>(T1,T2,T3))=>org.specs2.matcher.Matcher[(S1,S2,S3)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2]): (=> (T1, T2)) => Matcher[(S1, S2)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#zip[T1,T2,S1,S2](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2]):(=>(T1,T2))=>org.specs2.matcher.Matcher[(S1,S2)]", "kind" : "def"}, {"label" : "contain", "tail" : "(f: (=> T) => Matcher[S])(expected: => Seq[T]): (Seq[S]) => MatchResult[Seq[S]]", "member" : "org.specs2.matcher.MatcherZipOperators.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T,S](f:(=>T)=>org.specs2.matcher.Matcher[S])(expected:=>Seq[T]):Seq[S]=>org.specs2.matcher.MatchResult[Seq[S]]", "kind" : "def"}, {"label" : "combineResult", "tail" : "(r: => Result): ResultLogicalCombinator", "member" : "org.specs2.execute.ResultLogicalCombinators.combineResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#combineResult(r:=>org.specs2.execute.Result):ResultLogicalCombinators.this.ResultLogicalCombinator", "kind" : "implicit def"}, {"label" : "combineBoolean", "tail" : "(b: => Boolean): ResultLogicalCombinator", "member" : "org.specs2.execute.ResultLogicalCombinators.combineBoolean", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#combineBoolean(b:=>Boolean):ResultLogicalCombinators.this.ResultLogicalCombinator", "kind" : "implicit def"}, {"label" : "negateWhen", "tail" : "(condition: Boolean)(r: Result): Result", "member" : "org.specs2.execute.Results.negateWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#negateWhen(condition:Boolean)(r:org.specs2.execute.Result):org.specs2.execute.Result", "kind" : "def"}, {"label" : "negate", "tail" : "(r: Result): Result", "member" : "org.specs2.execute.Results.negate", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#negate(r:org.specs2.execute.Result):org.specs2.execute.Result", "kind" : "def"}, {"label" : "booleanToSimpleResult", "tail" : "(b: Boolean): Result", "member" : "org.specs2.execute.Results.booleanToSimpleResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#booleanToSimpleResult(b:Boolean):org.specs2.execute.Result", "kind" : "def"}, {"label" : "toResult", "tail" : "(b: Boolean): Result", "member" : "org.specs2.execute.Results.toResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toResult(b:Boolean):org.specs2.execute.Result", "kind" : "implicit def"}, {"label" : "combineMatchResult", "tail" : "(m: => MatchResult[T]): MatchResultCombinator[T]", "member" : "org.specs2.matcher.MatchResultLogicalCombinators.combineMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#combineMatchResult[T](m:=>org.specs2.matcher.MatchResult[T]):MatchResultLogicalCombinators.this.MatchResultCombinator[T]", "kind" : "implicit def"}, {"label" : "describe", "tail" : "(t: => T): Descriptible[T]", "member" : "org.specs2.matcher.ExpectationsDescription.describe", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#describe[T](t:=>T):ExpectationsDescription.this.Descriptible[T]", "kind" : "implicit def"}, {"label" : "describeExpectation", "tail" : "(description: String): ExpectationDescription", "member" : "org.specs2.matcher.ExpectationsDescription.describeExpectation", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#describeExpectation(description:String):ExpectationsDescription.this.ExpectationDescription", "kind" : "implicit def"}, {"label" : "typedEqualExpectation", "tail" : "(t: => T): TypedEqualExpectation[T]", "member" : "org.specs2.matcher.TypedEqual.typedEqualExpectation", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#typedEqualExpectation[T](t:=>T):TypedEqual.this.TypedEqualExpectation[T]", "kind" : "implicit def"}, {"label" : "retry", "tail" : "(m: Matcher[T])(retries: Int)(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.retry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#retry[T](m:org.specs2.matcher.Matcher[T])(retries:Int)(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "awaitFor", "tail" : "(m: Matcher[T])(timeout: FiniteDuration)(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.awaitFor", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#awaitFor[T](m:org.specs2.matcher.Matcher[T])(timeout:scala.concurrent.duration.FiniteDuration)(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "await", "tail" : "(m: Matcher[T])(retries: Int, timeout: FiniteDuration)(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.await", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#await[T](m:org.specs2.matcher.Matcher[T])(retries:Int,timeout:scala.concurrent.duration.FiniteDuration)(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "await", "tail" : "(m: Matcher[T])(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.await", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#await[T](m:org.specs2.matcher.Matcher[T])(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "eventually", "tail" : "(nested: => Matcher[T]): Matcher[T]", "member" : "org.specs2.matcher.EventuallyMatchers.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#eventually[T](nested:=>org.specs2.matcher.Matcher[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "eventually", "tail" : "(nested: => Matcher[T], retries: Int, sleep: Duration): Matcher[T]", "member" : "org.specs2.matcher.EventuallyMatchers.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#eventually[T](nested:=>org.specs2.matcher.Matcher[T],retries:Int,sleep:scala.concurrent.duration.Duration):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "eventually", "tail" : "(nested: => Matcher[T], retries: Int, sleep: (Int) => Duration): Matcher[T]", "member" : "org.specs2.matcher.EventuallyMatchers.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#eventually[T](nested:=>org.specs2.matcher.Matcher[T],retries:Int,sleep:Int=>scala.concurrent.duration.Duration):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "eventually", "tail" : "(result: => T)(arg0: AsResult[T]): T", "member" : "org.specs2.execute.EventuallyResults.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#eventually[T](result:=>T)(implicitevidence$3:org.specs2.execute.AsResult[T]):T", "kind" : "def"}, {"label" : "eventually", "tail" : "(retries: Int, sleep: Duration)(result: => T)(arg0: AsResult[T]): T", "member" : "org.specs2.execute.EventuallyResults.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#eventually[T](retries:Int,sleep:scala.concurrent.duration.Duration)(result:=>T)(implicitevidence$2:org.specs2.execute.AsResult[T]):T", "kind" : "def"}, {"label" : "eventually", "tail" : "(retries: Int, sleep: (Int) => Duration)(result: => T)(arg0: AsResult[T]): T", "member" : "org.specs2.execute.EventuallyResults.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#eventually[T](retries:Int,sleep:Int=>scala.concurrent.duration.Duration)(result:=>T)(implicitevidence$1:org.specs2.execute.AsResult[T]):T", "kind" : "def"}, {"label" : "toTryResultMatcher", "tail" : "(result: MatchResult[Try[T]]): TryResultMatcher[T]", "member" : "org.specs2.matcher.TryBeHaveMatchers.toTryResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toTryResultMatcher[T](result:org.specs2.matcher.MatchResult[scala.util.Try[T]]):TryBeHaveMatchers.this.TryResultMatcher[T]", "kind" : "implicit def"}, {"label" : "aFailedTry", "tail" : "(t: Throwable): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#aFailedTry[T](t:Throwable):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "failedTry", "tail" : "(t: Throwable): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.failedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#failedTry[T](t:Throwable):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "aFailedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#aFailedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "failedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.failedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#failedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "beAFailedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beAFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beAFailedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "beFailedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beFailedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "aFailedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#aFailedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "failedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.failedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#failedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "beAFailedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beAFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beAFailedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "beFailedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beFailedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "aSuccessfulTry", "tail" : "(t: T)(arg0: Diffable[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#aSuccessfulTry[T](t:T)(implicitevidence$2:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "successfulTry", "tail" : "(t: T)(arg0: Diffable[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.successfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#successfulTry[T](t:T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "aSuccessfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#aSuccessfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "successfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.successfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#successfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "beASuccessfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beASuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beASuccessfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "beSuccessfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beSuccessfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "aSuccessfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#aSuccessfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "successfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.successfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#successfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "beASuccessfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beASuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beASuccessfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "beSuccessfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beSuccessfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "left", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): LeftMatcher[Nothing]", "member" : "org.specs2.matcher.EitherBaseMatchers.left", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#left[T<:<?>](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.LeftMatcher[Nothing]", "kind" : "def"}, {"label" : "left", "tail" : "(t: ValueCheck[T]): LeftCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.left", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#left[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.LeftCheckedMatcher[T]", "kind" : "def"}, {"label" : "left", "tail" : "(t: T)(arg0: Diffable[T]): LeftCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.left", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#left[T](t:T)(implicitevidence$2:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.LeftCheckedMatcher[T]", "kind" : "def"}, {"label" : "beLeft", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): LeftMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beLeft", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beLeft[T](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.LeftMatcher[T]", "kind" : "def"}, {"label" : "beLeft", "tail" : "(t: ValueCheck[T]): LeftCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beLeft", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beLeft[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.LeftCheckedMatcher[T]", "kind" : "def"}, {"label" : "right", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): RightMatcher[Nothing]", "member" : "org.specs2.matcher.EitherBaseMatchers.right", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#right[T<:<?>](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.RightMatcher[Nothing]", "kind" : "def"}, {"label" : "right", "tail" : "(t: ValueCheck[T]): RightCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.right", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#right[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.RightCheckedMatcher[T]", "kind" : "def"}, {"label" : "right", "tail" : "(t: T)(arg0: Diffable[T]): RightCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.right", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#right[T](t:T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.RightCheckedMatcher[T]", "kind" : "def"}, {"label" : "beRight", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): RightMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beRight", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beRight[T](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.RightMatcher[T]", "kind" : "def"}, {"label" : "beRight", "tail" : "(t: ValueCheck[T]): RightCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beRight", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beRight[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.RightCheckedMatcher[T]", "kind" : "def"}, {"label" : "downcastBeEqualTypedValueCheck", "tail" : "(check: BeEqualTypedValueCheck[T]): ValueCheck[S]", "member" : "org.specs2.matcher.ValueChecks.downcastBeEqualTypedValueCheck", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#downcastBeEqualTypedValueCheck[T,S>:T](check:org.specs2.matcher.BeEqualTypedValueCheck[T]):org.specs2.matcher.ValueCheck[S]", "kind" : "implicit def"}, {"label" : "partialfunctionIsValueCheck", "tail" : "(f: PartialFunction[T, R])(arg0: AsResult[R]): ValueCheck[T]", "member" : "org.specs2.matcher.ValueChecks.partialfunctionIsValueCheck", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#partialfunctionIsValueCheck[T,R](f:PartialFunction[T,R])(implicitevidence$2:org.specs2.execute.AsResult[R]):org.specs2.matcher.ValueCheck[T]", "kind" : "implicit def"}, {"label" : "valueIsTypedValueCheck", "tail" : "(expected: T)(di: Diffable[T]): BeEqualTypedValueCheck[T]", "member" : "org.specs2.matcher.ValueChecksBase.valueIsTypedValueCheck", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#valueIsTypedValueCheck[T](expected:T)(implicitdi:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.BeEqualTypedValueCheck[T]", "kind" : "def"}, {"label" : "matcherIsValueCheck", "tail" : "(m: Matcher[T]): ValueCheck[T]", "member" : "org.specs2.matcher.ValueChecksBase.matcherIsValueCheck", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#matcherIsValueCheck[T](m:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ValueCheck[T]", "kind" : "implicit def"}, {"label" : "toOptionResultMatcher", "tail" : "(result: MatchResult[Option[T]]): OptionResultMatcher[T]", "member" : "org.specs2.matcher.OptionBeHaveMatchers.toOptionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toOptionResultMatcher[T](result:org.specs2.matcher.MatchResult[Option[T]]):OptionBeHaveMatchers.this.OptionResultMatcher[T]", "kind" : "implicit def"}, {"label" : "asNoneAs", "tail" : "(other: => Option[T]): Matcher[Option[T]]", "member" : "org.specs2.matcher.OptionBaseMatchers.asNoneAs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#asNoneAs[T](other:=>Option[T]):org.specs2.matcher.Matcher[Option[T]]", "kind" : "def"}, {"label" : "beAsNoneAs", "tail" : "(other: => Option[T]): Matcher[Option[T]]", "member" : "org.specs2.matcher.OptionBaseMatchers.beAsNoneAs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beAsNoneAs[T](other:=>Option[T]):org.specs2.matcher.Matcher[Option[T]]", "kind" : "def"}, {"label" : "none", "tail" : "(): Matcher[Option[Any]]", "member" : "org.specs2.matcher.OptionBaseMatchers.none", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#none:org.specs2.matcher.Matcher[Option[Any]]", "kind" : "def"}, {"label" : "beNone", "tail" : "(): Matcher[Option[Any]]", "member" : "org.specs2.matcher.OptionBaseMatchers.beNone", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beNone:org.specs2.matcher.Matcher[Option[Any]]", "kind" : "def"}, {"label" : "some", "tail" : "(): SomeMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.some", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#some[T]:org.specs2.matcher.SomeMatcher[T]", "kind" : "def"}, {"label" : "beSome", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): SomeMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.beSome", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beSome[T](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.SomeMatcher[T]", "kind" : "def"}, {"label" : "some", "tail" : "(check: ValueCheck[T]): SomeCheckedMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.some", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#some[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.SomeCheckedMatcher[T]", "kind" : "def"}, {"label" : "some", "tail" : "(t: T)(arg0: Diffable[T]): SomeCheckedMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.some", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#some[T](t:T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.SomeCheckedMatcher[T]", "kind" : "def"}, {"label" : "beSome", "tail" : "(check: ValueCheck[T]): SomeCheckedMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.beSome", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beSome[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.SomeCheckedMatcher[T]", "kind" : "def"}, {"label" : "ToDelta", "tail" : "(n: S)(arg0: Numeric[S]): CanHaveDelta[S]", "member" : "org.specs2.matcher.NumericMatchers.ToDelta", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ToDelta[S](n:S)(implicitevidence$1:Numeric[S]):org.specs2.matcher.CanHaveDelta[S]", "kind" : "implicit def"}, {"label" : "toNeutralMatcherNumeric", "tail" : "(result: NeutralMatcher[Any]): NeutralMatcherNumeric", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toNeutralMatcherNumeric", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toNeutralMatcherNumeric(result:org.specs2.matcher.NeutralMatcher[Any]):NumericBeHaveMatchers.this.NeutralMatcherNumeric", "kind" : "implicit def"}, {"label" : "toNeutralMatcherOrdered", "tail" : "(result: NeutralMatcher[Any]): NeutralMatcherOrdered", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toNeutralMatcherOrdered", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toNeutralMatcherOrdered(result:org.specs2.matcher.NeutralMatcher[Any]):NumericBeHaveMatchers.this.NeutralMatcherOrdered", "kind" : "implicit def"}, {"label" : "toNumericResultMatcher", "tail" : "(result: MatchResult[S])(arg0: Numeric[S]): NumericResultMatcher[S]", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toNumericResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toNumericResultMatcher[S](result:org.specs2.matcher.MatchResult[S])(implicitevidence$36:Numeric[S]):NumericBeHaveMatchers.this.NumericResultMatcher[S]", "kind" : "implicit def"}, {"label" : "toOrderedResultMatcher", "tail" : "(result: MatchResult[S])(arg0: (S) => Ordered[S]): OrderedResultMatcher[S]", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toOrderedResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toOrderedResultMatcher[S](result:org.specs2.matcher.MatchResult[S])(implicitevidence$34:S=>Ordered[S]):NumericBeHaveMatchers.this.OrderedResultMatcher[S]", "kind" : "implicit def"}, {"label" : "be]", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.be]", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be][T](t1:T,t2:T)(implicitevidence$32:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "be[", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.be[", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be[[T](t1:T,t2:T)(implicitevidence$31:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "between", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.between", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#between[T](t1:T,t2:T)(implicitevidence$30:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "beBetween", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.beBetween", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beBetween[T](t1:T,t2:T)(implicitevidence$29:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(target: SignificantTarget[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#closeTo[S](target:org.specs2.matcher.SignificantTarget[S])(implicitevidence$28:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(target: S, figures: SignificantFigures)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#closeTo[S](target:S,figures:org.specs2.matcher.SignificantFigures)(implicitevidence$27:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(target: SignificantTarget[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beCloseTo[S](target:org.specs2.matcher.SignificantTarget[S])(implicitevidence$26:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(target: S, figures: SignificantFigures)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beCloseTo[S](target:S,figures:org.specs2.matcher.SignificantFigures)(implicitevidence$25:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "~", "tail" : "(delta: PlusOrMinus[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.~", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#~[S](delta:org.specs2.matcher.PlusOrMinus[S])(implicitevidence$24:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "~", "tail" : "(n: S)(delta: S)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.~", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#~[S](n:S)(delta:S)(implicitevidence$23:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(delta: PlusOrMinus[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#closeTo[S](delta:org.specs2.matcher.PlusOrMinus[S])(implicitevidence$22:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(delta: PlusOrMinus[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beCloseTo[S](delta:org.specs2.matcher.PlusOrMinus[S])(implicitevidence$21:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(n: S, delta: S)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#closeTo[S](n:S,delta:S)(implicitevidence$20:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(n: S, delta: S)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beCloseTo[S](n:S,delta:S)(implicitevidence$19:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : ">", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.>", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#>[S](n:S)(implicitevidence$18:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "be_>", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_>", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be_>[S](n:S)(implicitevidence$17:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "greaterThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.greaterThan", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#greaterThan[S](n:S)(implicitevidence$16:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beGreaterThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beGreaterThan", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beGreaterThan[S](n:S)(implicitevidence$15:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : ">=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.>=", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#>=[S](n:S)(implicitevidence$14:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "be_>=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_>=", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be_>=[S](n:S)(implicitevidence$13:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "greaterThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.greaterThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#greaterThanOrEqualTo[S](n:S)(implicitevidence$12:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beGreaterThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beGreaterThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beGreaterThanOrEqualTo[S](n:S)(implicitevidence$11:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "<", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.<", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#<[S](n:S)(implicitevidence$10:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "be_<", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_<", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be_<[S](n:S)(implicitevidence$9:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "lessThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.lessThan", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#lessThan[S](n:S)(implicitevidence$8:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "beLessThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beLessThan", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beLessThan[S](n:S)(implicitevidence$7:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "<=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.<=", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#<=[S](n:S)(implicitevidence$6:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "be_<=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_<=", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be_<=[S](n:S)(implicitevidence$5:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "lessThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.lessThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#lessThanOrEqualTo[S](n:S)(implicitevidence$4:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "beLessThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beLessThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beLessThanOrEqualTo[S](n:S)(implicitevidence$3:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "throwAn", "tail" : "(e: E): ExceptionMatcher[E]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwAn", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#throwAn[E<:Throwable](e:E):ExceptionBaseMatchers.this.ExceptionMatcher[E]", "kind" : "def"}, {"label" : "throwAn", "tail" : "(message: String)(m: ClassTag[E]): Matcher[Any]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwAn", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#throwAn[E<:Throwable](message:String)(implicitm:scala.reflect.ClassTag[E]):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "throwAn", "tail" : "(m: ClassTag[E]): ExceptionClassMatcher", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwAn", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#throwAn[E<:Throwable](implicitm:scala.reflect.ClassTag[E]):ExceptionBaseMatchers.this.ExceptionClassMatcher", "kind" : "def"}, {"label" : "throwA", "tail" : "(e: E): ExceptionMatcher[E]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwA", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#throwA[E<:Throwable](e:E):ExceptionBaseMatchers.this.ExceptionMatcher[E]", "kind" : "def"}, {"label" : "throwA", "tail" : "(message: String)(m: ClassTag[E]): Matcher[Any]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwA", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#throwA[E<:Throwable](message:String)(implicitm:scala.reflect.ClassTag[E]):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "throwA", "tail" : "(m: ClassTag[E]): ExceptionClassMatcher", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwA", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#throwA[E<:Throwable](implicitm:scala.reflect.ClassTag[E]):ExceptionBaseMatchers.this.ExceptionClassMatcher", "kind" : "def"}, {"label" : "mapMatchResult", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.mapMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#mapMatchResult[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "checkFailure", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.checkFailure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#checkFailure[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: (String) => String): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#createExpectable[T](t:=>T,alias:String=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: => String): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#createExpectable[T](t:=>T,alias:=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#createExpectable[T](t:=>T):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "setStacktrace", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.MatchResultStackTrace.setStacktrace", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#setStacktrace[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "stringMatcher", "tail" : "(m: AdaptableMatcher[Any]): StringMatcher", "member" : "org.specs2.matcher.StringMatchers.stringMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stringMatcher(m:org.specs2.matcher.AdaptableMatcher[Any]):org.specs2.matcher.StringMatcher", "kind" : "implicit def"}, {"label" : "endingWith", "tail" : "(s: => String): Matcher[String]", "member" : "org.specs2.matcher.StringBeHaveMatchers.endingWith", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#endingWith(s:=>String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "startingWith", "tail" : "(s: => String): Matcher[String]", "member" : "org.specs2.matcher.StringBeHaveMatchers.startingWith", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#startingWith(s:=>String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "containing", "tail" : "(s: String): Matcher[String]", "member" : "org.specs2.matcher.StringBeHaveMatchers.containing", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#containing(s:String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "matching", "tail" : "(r: Regex): BeMatchingRegex", "member" : "org.specs2.matcher.StringBeHaveMatchers.matching", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#matching(r:scala.util.matching.Regex):org.specs2.matcher.BeMatchingRegex", "kind" : "def"}, {"label" : "matching", "tail" : "(t: Pattern): BeMatchingPattern", "member" : "org.specs2.matcher.StringBeHaveMatchers.matching", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#matching(t:java.util.regex.Pattern):org.specs2.matcher.BeMatchingPattern", "kind" : "def"}, {"label" : "matching", "tail" : "(t: => String): BeMatching", "member" : "org.specs2.matcher.StringBeHaveMatchers.matching", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#matching(t:=>String):org.specs2.matcher.BeMatching", "kind" : "def"}, {"label" : "toNotStringMatcher", "tail" : "(result: NotMatcher[Any]): NotStringMatcher", "member" : "org.specs2.matcher.StringBeHaveMatchers.toNotStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toNotStringMatcher(result:org.specs2.matcher.NotMatcher[Any]):StringBeHaveMatchers.this.NotStringMatcher", "kind" : "implicit def"}, {"label" : "toNeutralStringMatcher", "tail" : "(result: NeutralMatcher[Any]): NeutralStringMatcher", "member" : "org.specs2.matcher.StringBeHaveMatchers.toNeutralStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toNeutralStringMatcher(result:org.specs2.matcher.NeutralMatcher[Any]):StringBeHaveMatchers.this.NeutralStringMatcher", "kind" : "implicit def"}, {"label" : "toStringResultMatcher", "tail" : "(result: MatchResult[String]): StringResultMatcher", "member" : "org.specs2.matcher.StringBeHaveMatchers.toStringResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toStringResultMatcher(result:org.specs2.matcher.MatchResult[String]):StringBeHaveMatchers.this.StringResultMatcher", "kind" : "implicit def"}, {"label" : "find", "tail" : "(r: Regex): FindMatcherRegex", "member" : "org.specs2.matcher.StringBaseMatchers.find", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#find(r:scala.util.matching.Regex):StringBaseMatchers.this.FindMatcherRegex", "kind" : "def"}, {"label" : "find", "tail" : "(p: Pattern): FindMatcherPattern", "member" : "org.specs2.matcher.StringBaseMatchers.find", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#find(p:java.util.regex.Pattern):StringBaseMatchers.this.FindMatcherPattern", "kind" : "def"}, {"label" : "find", "tail" : "(a: => String): FindMatcher", "member" : "org.specs2.matcher.StringBaseMatchers.find", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#find(a:=>String):StringBaseMatchers.this.FindMatcher", "kind" : "def"}, {"label" : "endWith", "tail" : "(t: => String): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.endWith", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#endWith(t:=>String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "startWith", "tail" : "(a: String): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.startWith", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#startWith(a:String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "=~", "tail" : "(r: Regex): BeMatchingRegex", "member" : "org.specs2.matcher.StringBaseMatchers.=~", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#=~(r:scala.util.matching.Regex):org.specs2.matcher.BeMatchingRegex", "kind" : "def"}, {"label" : "=~", "tail" : "(p: Pattern): BeMatchingPattern", "member" : "org.specs2.matcher.StringBaseMatchers.=~", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#=~(p:java.util.regex.Pattern):org.specs2.matcher.BeMatchingPattern", "kind" : "def"}, {"label" : "=~", "tail" : "(t: => String): BeMatching", "member" : "org.specs2.matcher.StringBaseMatchers.=~", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#=~(t:=>String):org.specs2.matcher.BeMatching", "kind" : "def"}, {"label" : "beMatching", "tail" : "(a: Regex): BeMatchingRegex", "member" : "org.specs2.matcher.StringBaseMatchers.beMatching", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beMatching(a:scala.util.matching.Regex):org.specs2.matcher.BeMatchingRegex", "kind" : "def"}, {"label" : "beMatching", "tail" : "(a: Pattern): BeMatchingPattern", "member" : "org.specs2.matcher.StringBaseMatchers.beMatching", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beMatching(a:java.util.regex.Pattern):org.specs2.matcher.BeMatchingPattern", "kind" : "def"}, {"label" : "beMatching", "tail" : "(a: => String): BeMatching", "member" : "org.specs2.matcher.StringBaseMatchers.beMatching", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beMatching(a:=>String):org.specs2.matcher.BeMatching", "kind" : "def"}, {"label" : "contain", "tail" : "(t: Char): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain(t:Char):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "contain", "tail" : "(t: String): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain(t:String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "!=\/", "tail" : "(s: String): Matcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.!=\/", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#!=\/(s:String):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "be_!=\/", "tail" : "(a: String): Matcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.be_!=\/", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be_!=\/(a:String):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "be_==\/", "tail" : "(a: String): AdaptableMatcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.be_==\/", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be_==\/(a:String):org.specs2.matcher.AdaptableMatcher[Any]", "kind" : "def"}, {"label" : "==\/", "tail" : "(s: String): AdaptableMatcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.==\/", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#==\/(s:String):org.specs2.matcher.AdaptableMatcher[Any]", "kind" : "def"}, {"label" : "definedBy", "tail" : "(values: (K, V)*): Matcher[PartialFunction[K, V]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.definedBy", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#definedBy[K,V](values:(K,V)*):org.specs2.matcher.Matcher[PartialFunction[K,V]]", "kind" : "def"}, {"label" : "definedAt", "tail" : "(values: K*): Matcher[PartialFunction[K, Any]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.definedAt", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#definedAt[K](values:K*):org.specs2.matcher.Matcher[PartialFunction[K,Any]]", "kind" : "def"}, {"label" : "pairs", "tail" : "(pairs: (K, V)*): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.pairs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#pairs[K,V](pairs:(K,V)*):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "pair", "tail" : "(p: (K, V)): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.pair", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#pair[K,V](p:(K,V)):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "values", "tail" : "(vs: V*): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.values", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#values[V](vs:V*):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "value", "tail" : "(v: V): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.value", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#value[V](v:V):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "keys", "tail" : "(ks: K*): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.keys", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#keys[K](ks:K*):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "key", "tail" : "(k: K): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.key", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#key[K](k:K):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "toPartialFunctionResultMatcher", "tail" : "(result: MatchResult[PartialFunction[K, V]]): PartialFunctionResultMatcher[K, V]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toPartialFunctionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toPartialFunctionResultMatcher[K,V](result:org.specs2.matcher.MatchResult[PartialFunction[K,V]]):MapBeHaveMatchers.this.PartialFunctionResultMatcher[K,V]", "kind" : "implicit def"}, {"label" : "toMapResultMatcher", "tail" : "(result: MatchResult[Iterable[(K, V)]]): MapResultMatcher[K, V]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toMapResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toMapResultMatcher[K,V](result:org.specs2.matcher.MatchResult[Iterable[(K,V)]]):MapBeHaveMatchers.this.MapResultMatcher[K,V]", "kind" : "implicit def"}, {"label" : "toMapValueResultMatcher", "tail" : "(result: MatchResult[Iterable[(Any, V)]]): MapValueResultMatcher[V]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toMapValueResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toMapValueResultMatcher[V](result:org.specs2.matcher.MatchResult[Iterable[(Any,V)]]):MapBeHaveMatchers.this.MapValueResultMatcher[V]", "kind" : "implicit def"}, {"label" : "toMapKeyResultMatcher", "tail" : "(result: MatchResult[Iterable[(K, Any)]]): MapKeyResultMatcher[K]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toMapKeyResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toMapKeyResultMatcher[K](result:org.specs2.matcher.MatchResult[Iterable[(K,Any)]]):MapBeHaveMatchers.this.MapKeyResultMatcher[K]", "kind" : "implicit def"}, {"label" : "beDefinedBy", "tail" : "(values: (K, V)*): Matcher[PartialFunction[K, V]]", "member" : "org.specs2.matcher.MapBaseMatchers.beDefinedBy", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beDefinedBy[K,V](values:(K,V)*):org.specs2.matcher.Matcher[PartialFunction[K,V]]", "kind" : "def"}, {"label" : "beDefinedAt", "tail" : "(values: K*): Matcher[PartialFunction[K, Any]]", "member" : "org.specs2.matcher.MapBaseMatchers.beDefinedAt", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beDefinedAt[K](values:K*):org.specs2.matcher.Matcher[PartialFunction[K,Any]]", "kind" : "def"}, {"label" : "havePairs", "tail" : "(pairs: (K, V)*): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.havePairs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#havePairs[K,V](pairs:(K,V)*):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "havePair", "tail" : "(p: (K, V)): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.havePair", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#havePair[K,V](p:(K,V)):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "haveValues", "tail" : "(values: V*): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveValues", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#haveValues[V](values:V*):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "haveValue", "tail" : "(v: V): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveValue", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#haveValue[V](v:V):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "haveKeys", "tail" : "(keys: K*): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveKeys", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#haveKeys[K](keys:K*):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "haveKey", "tail" : "(k: K): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveKey", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#haveKey[K](k:K):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "timesFor", "tail" : "(n: Int): Times", "member" : "org.specs2.control.NumberOfTimes.timesFor", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#timesFor(n:Int):org.specs2.control.Times", "kind" : "implicit def"}, {"label" : "implicitParameter10", "tail" : ": ImplicitParam10", "member" : "org.specs2.control.ImplicitParameters.implicitParameter10", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitParameter10:ImplicitParameters.this.ImplicitParam10", "kind" : "implicit lazy val"}, {"label" : "implicitParameter9", "tail" : ": ImplicitParam9", "member" : "org.specs2.control.ImplicitParameters.implicitParameter9", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitParameter9:ImplicitParameters.this.ImplicitParam9", "kind" : "implicit lazy val"}, {"label" : "implicitParameter8", "tail" : ": ImplicitParam8", "member" : "org.specs2.control.ImplicitParameters.implicitParameter8", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitParameter8:ImplicitParameters.this.ImplicitParam8", "kind" : "implicit lazy val"}, {"label" : "implicitParameter7", "tail" : ": ImplicitParam7", "member" : "org.specs2.control.ImplicitParameters.implicitParameter7", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitParameter7:ImplicitParameters.this.ImplicitParam7", "kind" : "implicit lazy val"}, {"label" : "implicitParameter6", "tail" : ": ImplicitParam6", "member" : "org.specs2.control.ImplicitParameters.implicitParameter6", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitParameter6:ImplicitParameters.this.ImplicitParam6", "kind" : "implicit lazy val"}, {"label" : "implicitParameter5", "tail" : ": ImplicitParam5", "member" : "org.specs2.control.ImplicitParameters.implicitParameter5", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitParameter5:ImplicitParameters.this.ImplicitParam5", "kind" : "implicit lazy val"}, {"label" : "implicitParameter4", "tail" : ": ImplicitParam4", "member" : "org.specs2.control.ImplicitParameters.implicitParameter4", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitParameter4:ImplicitParameters.this.ImplicitParam4", "kind" : "implicit lazy val"}, {"label" : "implicitParameter3", "tail" : ": ImplicitParam3", "member" : "org.specs2.control.ImplicitParameters.implicitParameter3", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitParameter3:ImplicitParameters.this.ImplicitParam3", "kind" : "implicit lazy val"}, {"label" : "implicitParameter2", "tail" : ": ImplicitParam2", "member" : "org.specs2.control.ImplicitParameters.implicitParameter2", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitParameter2:ImplicitParameters.this.ImplicitParam2", "kind" : "implicit lazy val"}, {"label" : "implicitParameter1", "tail" : ": ImplicitParam1", "member" : "org.specs2.control.ImplicitParameters.implicitParameter1", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitParameter1:ImplicitParameters.this.ImplicitParam1", "kind" : "implicit lazy val"}, {"label" : "implicitParameter", "tail" : ": ImplicitParam", "member" : "org.specs2.control.ImplicitParameters.implicitParameter", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#implicitParameter:ImplicitParameters.this.ImplicitParam", "kind" : "implicit lazy val"}, {"label" : "matcherSeqIsContainCheckSeq", "tail" : "(seq: Seq[Matcher[T]]): Seq[ValueCheck[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchersLowImplicits.matcherSeqIsContainCheckSeq", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#matcherSeqIsContainCheckSeq[T](seq:Seq[org.specs2.matcher.Matcher[T]]):Seq[org.specs2.matcher.ValueCheck[T]]", "kind" : "implicit def"}, {"label" : "checkableSeqIsContainCheckSeq", "tail" : "(seq: Seq[T])(to: (T) => ValueCheck[T]): Seq[ValueCheck[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchersLowImplicits.checkableSeqIsContainCheckSeq", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#checkableSeqIsContainCheckSeq[T](seq:Seq[T])(implicitto:T=>org.specs2.matcher.ValueCheck[T]):Seq[org.specs2.matcher.ValueCheck[T]]", "kind" : "implicit def"}, {"label" : "functionIsValueCheck", "tail" : "(f: (T) => R)(arg0: AsResult[R]): ValueCheck[T]", "member" : "org.specs2.matcher.ValueChecksLowImplicits.functionIsValueCheck", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#functionIsValueCheck[T,R](f:T=>R)(implicitevidence$3:org.specs2.execute.AsResult[R]):org.specs2.matcher.ValueCheck[T]", "kind" : "implicit def"}, {"label" : "orderedSeqMatchResult", "tail" : "(result: MatchResult[Seq[T]])(arg0: Ordering[T]): OrderedSeqMatchResult[T]", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.orderedSeqMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#orderedSeqMatchResult[T](result:org.specs2.matcher.MatchResult[Seq[T]])(implicitevidence$14:Ordering[T]):TraversableBeHaveMatchers.this.OrderedSeqMatchResult[T]", "kind" : "implicit def"}, {"label" : "sized", "tail" : "(s: MatchResult[T])(arg0: Sized[T]): HasSize[T]", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.sized", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#sized[T](s:org.specs2.matcher.MatchResult[T])(implicitevidence$12:org.specs2.data.Sized[T]):TraversableBeHaveMatchers.this.HasSize[T]", "kind" : "implicit def"}, {"label" : "traversable", "tail" : "(s: MatchResult[Traversable[T]]): TraversableBeHaveMatchers[T]", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.traversable", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#traversable[T](s:org.specs2.matcher.MatchResult[collection.Traversable[T]]):TraversableBeHaveMatchers.this.TraversableBeHaveMatchers[T]", "kind" : "implicit def"}, {"label" : "lazyParameter", "tail" : "(value: => T): LazyParameter[T]", "member" : "org.specs2.control.LazyParameters.lazyParameter", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#lazyParameter[T](value:=>T):org.specs2.control.LazyParameter[T]", "kind" : "implicit def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T], t20: ValueCheck[T], t21: ValueCheck[T], t22: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T],t20:org.specs2.matcher.ValueCheck[T],t21:org.specs2.matcher.ValueCheck[T],t22:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T], t20: ValueCheck[T], t21: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T],t20:org.specs2.matcher.ValueCheck[T],t21:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T], t20: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T],t20:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "sorted", "tail" : "(arg0: Ordering[T]): OrderingMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.sorted", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#sorted[T](implicitevidence$11:Ordering[T]):org.specs2.matcher.OrderingMatcher[T]", "kind" : "def"}, {"label" : "beSorted", "tail" : "(arg0: Ordering[T]): OrderingMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.beSorted", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beSorted[T](implicitevidence$10:Ordering[T]):org.specs2.matcher.OrderingMatcher[T]", "kind" : "def"}, {"label" : "length", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.length", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#length[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$9:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "haveLength", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveLength", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#haveLength[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$8:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "size", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.size", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#size[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$7:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "haveSize", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveSize", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#haveSize[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$6:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "length", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.length", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#length[T](n:Int)(implicitevidence$5:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "haveLength", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveLength", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#haveLength[T](n:Int)(implicitevidence$4:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "size", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.size", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#size[T](n:Int)(implicitevidence$3:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "haveSize", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveSize", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#haveSize[T](n:Int)(implicitevidence$2:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "containTheSameElementsAs", "tail" : "(seq: Seq[T], equality: (T, T) => Boolean): Matcher[Traversable[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containTheSameElementsAs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#containTheSameElementsAs[T](seq:Seq[T],equality:(T,T)=>Boolean):org.specs2.matcher.Matcher[collection.Traversable[T]]", "kind" : "def"}, {"label" : "containPattern", "tail" : "(t: => String): Matcher[Traversable[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containPattern", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#containPattern[T](t:=>String):org.specs2.matcher.Matcher[collection.Traversable[T]]", "kind" : "def"}, {"label" : "containMatch", "tail" : "(t: => String): Matcher[Traversable[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containMatch", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#containMatch[T](t:=>String):org.specs2.matcher.Matcher[collection.Traversable[T]]", "kind" : "def"}, {"label" : "containAnyOf", "tail" : "(seq: Seq[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containAnyOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#containAnyOf[T](seq:Seq[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "containAllOf", "tail" : "(seq: Seq[T])(arg0: Diffable[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containAllOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#containAllOf[T](seq:Seq[T])(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.atMost", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#atMost[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.atLeast", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#atLeast[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "exactly", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.exactly", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#exactly[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "eachOf", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.eachOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#eachOf[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "allOf", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.allOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#allOf[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(cm: ContainWithResultSeq[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](cm:org.specs2.matcher.ContainWithResultSeq[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(check: ValueCheck[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#contain[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "anInstanceOf", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#anInstanceOf[T](implicitevidence$22:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "assignableFrom", "tail" : "(arg0: ClassTag[T]): Matcher[Class[_]]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.assignableFrom", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#assignableFrom[T](implicitevidence$21:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[Class[_]]", "kind" : "def"}, {"label" : "interface", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.interface", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#interface[T](implicitevidence$20:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "superClass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.superClass", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#superClass[T](implicitevidence$19:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "klass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.klass", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#klass[T](implicitevidence$18:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "anyOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anyOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#anyOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.oneOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#oneOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.empty", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#empty[T<:Any{defisEmpty:Boolean}]:org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "likeA", "tail" : "(pattern: => PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.likeA", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#likeA[T](pattern:=>PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beLikeA", "tail" : "(pattern: => PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.beLikeA", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beLikeA[T](pattern:=>PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "like", "tail" : "(pattern: => PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.like", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#like[T](pattern:=>PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "asNullAs", "tail" : "(a: => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.asNullAs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#asNullAs[T](a:=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "toBeLikeResultMatcher", "tail" : "(result: MatchResult[T]): BeLikeResultMatcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toBeLikeResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toBeLikeResultMatcher[T](result:org.specs2.matcher.MatchResult[T]):AnyBeHaveMatchers.this.BeLikeResultMatcher[T]", "kind" : "implicit def"}, {"label" : "anyWithEmpty", "tail" : "(result: MatchResult[T])(arg0: (T) => Any { def isEmpty: Boolean }): AnyWithEmptyMatchers[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anyWithEmpty", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#anyWithEmpty[T](result:org.specs2.matcher.MatchResult[T])(implicitevidence$16:T=>Any{defisEmpty:Boolean}):AnyBeHaveMatchers.this.AnyWithEmptyMatchers[T]", "kind" : "implicit def"}, {"label" : "toClassMatcherResult", "tail" : "(result: MatchResult[Class[_]]): ClassMatcherResult", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toClassMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toClassMatcherResult(result:org.specs2.matcher.MatchResult[Class[_]]):AnyBeHaveMatchers.this.ClassMatcherResult", "kind" : "implicit def"}, {"label" : "toAnyMatcherResult", "tail" : "(result: MatchResult[AnyRef]): AnyMatcherResult", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toAnyMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toAnyMatcherResult(result:org.specs2.matcher.MatchResult[AnyRef]):AnyBeHaveMatchers.this.AnyMatcherResult", "kind" : "implicit def"}, {"label" : "toAnyRefMatcherResult", "tail" : "(result: MatchResult[T]): AnyRefMatcherResult[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toAnyRefMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toAnyRefMatcherResult[T<:AnyRef](result:org.specs2.matcher.MatchResult[T]):AnyBeHaveMatchers.this.AnyRefMatcherResult[T]", "kind" : "implicit def"}, {"label" : "anyBeHaveMatcher", "tail" : "(result: MatchResult[T]): AnyBeHaveMatchers[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anyBeHaveMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#anyBeHaveMatcher[T](result:org.specs2.matcher.MatchResult[T]):AnyBeHaveMatchers.this.AnyBeHaveMatchers[T]", "kind" : "implicit def"}, {"label" : "not", "tail" : "(): NotMatcher[Any]", "member" : "org.specs2.matcher.BeHaveMatchers.not", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#not:org.specs2.matcher.NotMatcher[Any]", "kind" : "def"}, {"label" : "have", "tail" : "(): NeutralMatcher[Any]", "member" : "org.specs2.matcher.BeHaveMatchers.have", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#have:org.specs2.matcher.NeutralMatcher[Any]", "kind" : "def"}, {"label" : "be", "tail" : "(): NeutralMatcher[Any]", "member" : "org.specs2.matcher.BeHaveMatchers.be", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be:org.specs2.matcher.NeutralMatcher[Any]", "kind" : "def"}, {"label" : "beAnInstanceOf", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAnInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beAnInstanceOf[T](implicitevidence$13:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "beAssignableFrom", "tail" : "(arg0: ClassTag[T]): Matcher[Class[_]]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAssignableFrom", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beAssignableFrom[T](implicitevidence$12:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[Class[_]]", "kind" : "def"}, {"label" : "haveInterface", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.haveInterface", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#haveInterface[T](implicitevidence$11:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "haveSuperclass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.haveSuperclass", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#haveSuperclass[T](implicitevidence$10:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "haveClass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.haveClass", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#haveClass[T](implicitevidence$9:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "beLike", "tail" : "(pattern: PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beLike", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beLike[T](pattern:PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beAnyOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAnyOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beAnyOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beOneOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beOneOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beOneOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beAsNullAs", "tail" : "(a: => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAsNullAs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beAsNullAs[T](a:=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beNull", "tail" : "(): BeNull[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beNull", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beNull[T]:org.specs2.matcher.BeNull[T]", "kind" : "def"}, {"label" : "beEmpty", "tail" : "(arg0: (T) => Any { def isEmpty: Boolean }): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beEmpty", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beEmpty[T](implicitevidence$8:T=>Any{defisEmpty:Boolean}):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "not", "tail" : "(m: Matcher[T]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.not", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#not[T](m:org.specs2.matcher.Matcher[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "==~", "tail" : "(s: => S)(arg0: Diffable[T], convert: (S) => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.==~", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#==~[T,S](s:=>S)(implicitevidence$7:org.specs2.matcher.describe.Diffable[T],implicitconvert:S=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "be_==~", "tail" : "(s: => S)(arg0: Diffable[T], convert: (S) => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_==~", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be_==~[T,S](s:=>S)(implicitevidence$6:org.specs2.matcher.describe.Diffable[T],implicitconvert:S=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "typedEqualTo", "tail" : "(t: => T): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.typedEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#typedEqualTo[T](t:=>T):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "beTypedEqualTo", "tail" : "(t: => T)(arg0: Diffable[T]): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beTypedEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beTypedEqualTo[T](t:=>T)(implicitevidence$5:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "equalTo", "tail" : "(t: => T): BeEqualTo", "member" : "org.specs2.matcher.AnyBaseMatchers.equalTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#equalTo[T](t:=>T):org.specs2.matcher.BeEqualTo", "kind" : "def"}, {"label" : "beEqualTo", "tail" : "(t: => T): BeEqualTo", "member" : "org.specs2.matcher.AnyBaseMatchers.beEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beEqualTo[T](t:=>T):org.specs2.matcher.BeEqualTo", "kind" : "def"}, {"label" : "!==", "tail" : "(t: => T)(arg0: Diffable[T]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.!==", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#!==[T](t:=>T)(implicitevidence$4:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "be_!==", "tail" : "(t: => T)(arg0: Diffable[T]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_!==", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be_!==[T](t:=>T)(implicitevidence$3:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "===", "tail" : "(t: => T)(arg0: Diffable[T]): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.===", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#===[T](t:=>T)(implicitevidence$2:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "be_===", "tail" : "(t: => T)(arg0: Diffable[T]): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_===", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be_===[T](t:=>T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "be_!=", "tail" : "(t: => T): Matcher[Any]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_!=", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be_!=[T](t:=>T):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "be_==", "tail" : "(t: => T): BeEqualTo", "member" : "org.specs2.matcher.AnyBaseMatchers.be_==", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be_==[T](t:=>T):org.specs2.matcher.BeEqualTo", "kind" : "def"}, {"label" : "be", "tail" : "(t: => T): BeTheSameAs[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#be[T<:AnyRef](t:=>T):org.specs2.matcher.BeTheSameAs[T]", "kind" : "def"}, {"label" : "beTheSameAs", "tail" : "(t: => T): BeTheSameAs[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beTheSameAs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beTheSameAs[T<:AnyRef](t:=>T):org.specs2.matcher.BeTheSameAs[T]", "kind" : "def"}, {"label" : "beFalse", "tail" : "(): Matcher[Boolean]", "member" : "org.specs2.matcher.AnyBaseMatchers.beFalse", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beFalse:org.specs2.matcher.Matcher[Boolean]", "kind" : "def"}, {"label" : "beTrue", "tail" : "(): BeTrueMatcher", "member" : "org.specs2.matcher.AnyBaseMatchers.beTrue", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#beTrue:org.specs2.matcher.BeTrueMatcher", "kind" : "def"}, {"label" : "s2", "tail" : "(content: String, Yrangepos: Boolean, texts: Seq[String], textsStartPositions: Seq[String], textsEndPositions: Seq[String], variables: Seq[InterpolatedFragment], rangeExpressions: Seq[String]): Fragments", "member" : "org.specs2.specification.dsl.mutable.SpecificationCreation.s2", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#s2(content:String,Yrangepos:Boolean,texts:Seq[String],textsStartPositions:Seq[String],textsEndPositions:Seq[String],variables:Seq[org.specs2.specification.create.InterpolatedFragment],rangeExpressions:Seq[String]):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "section", "tail" : "(tag: NamedTag): Fragment", "member" : "org.specs2.specification.dsl.mutable.TagDsl.section", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#section(tag:org.specs2.data.NamedTag):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "tag", "tail" : "(tag: NamedTag): Fragment", "member" : "org.specs2.specification.dsl.mutable.TagDsl.tag", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#tag(tag:org.specs2.data.NamedTag):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "section", "tail" : "(names: String*): Fragment", "member" : "org.specs2.specification.dsl.mutable.TagDsl.section", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#section(names:String*):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "tag", "tail" : "(names: String*): Fragment", "member" : "org.specs2.specification.dsl.mutable.TagDsl.tag", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#tag(names:String*):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "see", "tail" : "(s: => SpecificationStructure): Fragment", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.see", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#see(s:=>org.specs2.specification.core.SpecificationStructure):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "see", "tail" : "(s: SpecStructure): Fragment", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.see", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#see(s:org.specs2.specification.core.SpecStructure):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "link", "tail" : "(s: => SpecificationStructure): Fragment", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.link", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#link(s:=>org.specs2.specification.core.SpecificationStructure):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "link", "tail" : "(s: SpecStructure): Fragment", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.link", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#link(s:org.specs2.specification.core.SpecStructure):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "args", "tail" : "(ex: ArgProperty[String], include: ArgProperty[String], exclude: ArgProperty[String], was: ArgProperty[String], plan: ArgProperty[Boolean], skipAll: ArgProperty[Boolean], stopOnFail: ArgProperty[Boolean], stopOnError: ArgProperty[Boolean], stopOnIssue: ArgProperty[Boolean], stopOnSkip: ArgProperty[Boolean], sequential: ArgProperty[Boolean], batchSize: ArgProperty[Int], asap: ArgProperty[Boolean], isolated: ArgProperty[Boolean], xonly: ArgProperty[Boolean], showOnly: ArgProperty[String], color: ArgProperty[Boolean]): Arguments", "member" : "org.specs2.specification.dsl.mutable.ArgumentsCreation.args", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#args(ex:org.specs2.main.ArgProperty[String],include:org.specs2.main.ArgProperty[String],exclude:org.specs2.main.ArgProperty[String],was:org.specs2.main.ArgProperty[String],plan:org.specs2.main.ArgProperty[Boolean],skipAll:org.specs2.main.ArgProperty[Boolean],stopOnFail:org.specs2.main.ArgProperty[Boolean],stopOnError:org.specs2.main.ArgProperty[Boolean],stopOnIssue:org.specs2.main.ArgProperty[Boolean],stopOnSkip:org.specs2.main.ArgProperty[Boolean],sequential:org.specs2.main.ArgProperty[Boolean],batchSize:org.specs2.main.ArgProperty[Int],asap:org.specs2.main.ArgProperty[Boolean],isolated:org.specs2.main.ArgProperty[Boolean],xonly:org.specs2.main.ArgProperty[Boolean],showOnly:org.specs2.main.ArgProperty[String],color:org.specs2.main.ArgProperty[Boolean]):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "args", "tail" : ": ArgumentsNamespaceMutable", "member" : "org.specs2.specification.dsl.mutable.ArgumentsCreation.args", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#args:ArgumentsCreation.this.ArgumentsNamespaceMutable", "kind" : "lazy val"}, {"label" : "title", "tail" : "(s: String): MutableTitleOps", "member" : "org.specs2.specification.dsl.mutable.TitleDsl.title", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#title(s:String):TitleDsl.this.MutableTitleOps", "kind" : "implicit def"}, {"label" : "stopWhenFail", "tail" : "(when: => Boolean): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhenFail", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stopWhenFail(when:=>Boolean):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "stopWhenFail", "tail" : "(): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhenFail", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stopWhenFail:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "stopWhenSkipped", "tail" : "(when: => Boolean): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhenSkipped", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stopWhenSkipped(when:=>Boolean):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "stopWhenSkipped", "tail" : "(): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhenSkipped", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stopWhenSkipped:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "stopWhen", "tail" : "(f: (Result) => Boolean): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stopWhen(f:org.specs2.execute.Result=>Boolean):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "stopWhen", "tail" : "(r: Result): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stopWhen(r:org.specs2.execute.Result):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "step", "tail" : "(a: => Any, global: Boolean): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.step", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#step(a:=>Any,global:Boolean):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "step", "tail" : "(a: => Any): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.step", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#step(a:=>Any):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "action", "tail" : "(a: => Any): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.action", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#action(a:=>Any):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addBacktab", "tail" : "(n: Int): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addBacktab", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addBacktab(n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addBacktab", "tail" : "(): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addBacktab", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addBacktab:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addTab", "tail" : "(n: Int): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addTab", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addTab(n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addTab", "tail" : "(): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addTab", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addTab:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addBreak", "tail" : "(n: Int): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addBreak", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addBreak(n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addBreak", "tail" : "(): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addBreak", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addBreak:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addParagraph", "tail" : "(s: String, n: Int): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addParagraph", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addParagraph(s:String,n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addText", "tail" : "(s: String): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addText", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addText(s:String):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "bangExample", "tail" : "(d: String): BangExample", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl.bangExample", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#bangExample(d:String):ExampleDsl.this.BangExample", "kind" : "implicit def"}, {"label" : "blockExample", "tail" : "(d: String): BlockExample", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl1.blockExample", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#blockExample(d:String):ExampleDsl1.this.BlockExample", "kind" : "implicit def"}, {"label" : "blockExample0", "tail" : "(d: String): BlockExample0", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl1.blockExample0", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#blockExample0(d:String):ExampleDsl1.this.BlockExample0", "kind" : "def"}, {"label" : "***If you see this message this means that you've forgotten an operator after the description string: you should write \"example\" >> result ***", "tail" : "(s: String): WarningForgottenOperator", "member" : "org.specs2.specification.dsl.mutable.BlockDsl.***If you see this message this means that you've forgotten an operator after the description string: you should write \"example\" >> result ***", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#***Ifyouseethismessagethismeansthatyou'veforgottenanoperatorafterthedescriptionstring:youshouldwrite\"example\">>result***(s:String):BlockDsl.this.WarningForgottenOperator", "kind" : "implicit def"}, {"label" : "addFragmentsBlockWithText", "tail" : "(text: String, fs: => Fragments)(p1: org.specs2.control.ImplicitParameters.ImplicitParam1): Fragments", "member" : "org.specs2.specification.dsl.mutable.BlockDsl.addFragmentsBlockWithText", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addFragmentsBlockWithText(text:String,fs:=>org.specs2.specification.core.Fragments)(implicitp1:org.specs2.control.ImplicitParameters.ImplicitParam1):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "addFragmentBlockWithText", "tail" : "(text: String, f: => Fragment): Fragment", "member" : "org.specs2.specification.dsl.mutable.BlockDsl.addFragmentBlockWithText", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addFragmentBlockWithText(text:String,f:=>org.specs2.specification.core.Fragment):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "createExample", "tail" : "(expression: String, code: => T, asResult: AsResult[T]): Fragments", "member" : "org.specs2.specification.dsl.mutable.AutoExamples.createExample", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#createExample[T](expression:String,code:=>T,asResult:org.specs2.execute.AsResult[T]):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "end", "tail" : "(): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.end", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#end:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "bt", "tail" : "(n: Int): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.bt", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#bt(n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "bt", "tail" : "(): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.bt", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#bt:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "t", "tail" : "(n: Int): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.t", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#t(n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "t", "tail" : "(): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.t", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#t:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "br", "tail" : "(): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.br", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#br:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "p", "tail" : "(): Fragments", "member" : "org.specs2.specification.create.mutable.FormattingFragments.p", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#p:org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "fragmentsIsInterpolatedFragment", "tail" : "(fragments: Fragments): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.fragmentsIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fragmentsIsInterpolatedFragment(fragments:org.specs2.specification.core.Fragments):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "stringIsInterpolatedFragment", "tail" : "(s: => String): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.stringIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stringIsInterpolatedFragment(s:=>String):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "specStructureIsInterpolatedFragment", "tail" : "(s: SpecStructure): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.specStructureIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#specStructureIsInterpolatedFragment(s:org.specs2.specification.core.SpecStructure):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "specificationStructureIsInterpolatedFragment", "tail" : "(s: SpecificationStructure): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.specificationStructureIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#specificationStructureIsInterpolatedFragment(s:org.specs2.specification.core.SpecificationStructure):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "anyAsResultIsInterpolatedFragment", "tail" : "(r: => Function0Result): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.anyAsResultIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#anyAsResultIsInterpolatedFragment(r:=>org.specs2.execute.Function0Result):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "executionIsInterpolatedFragment", "tail" : "(execution: Execution): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.executionIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#executionIsInterpolatedFragment(execution:org.specs2.specification.core.Execution):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "stepParserIsInterpolatedFragment", "tail" : "(f: StepParser[R])(arg0: AsResult[R]): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.stepParserIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stepParserIsInterpolatedFragment[R](f:org.specs2.specification.script.StepParser[R])(implicitevidence$3:org.specs2.execute.AsResult[R]):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "stringFunctionIsInterpolatedFragment", "tail" : "(f: (String) => R)(arg0: AsResult[R]): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.stringFunctionIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stringFunctionIsInterpolatedFragment[R](f:String=>R)(implicitevidence$2:org.specs2.execute.AsResult[R]):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "asExecutionIsInterpolatedFragment", "tail" : "(e: => R)(arg0: AsExecution[R]): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.asExecutionIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#asExecutionIsInterpolatedFragment[R](e:=>R)(implicitevidence$1:org.specs2.specification.core.AsExecution[R]):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "specificationRefIsInterpolatedFragment", "tail" : "(ref: SpecificationRef): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.specificationRefIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#specificationRefIsInterpolatedFragment(ref:org.specs2.specification.core.SpecificationRef):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "descriptionToFragmentsIsInterpolatedFragment", "tail" : "(fragments: (String) => Fragments): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.descriptionToFragmentsIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#descriptionToFragmentsIsInterpolatedFragment(fragments:String=>org.specs2.specification.core.Fragments):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "asResultIsInterpolatedFragment", "tail" : "(r: => R)(arg0: AsResult[R]): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext1.asResultIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#asResultIsInterpolatedFragment[R](r:=>R)(implicitevidence$4:org.specs2.execute.AsResult[R]):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "fragmentIsInterpolatedFragment", "tail" : "(f: => Fragment): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext1.fragmentIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fragmentIsInterpolatedFragment(f:=>org.specs2.specification.core.Fragment):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "createExecutionInterpolatedFragment", "tail" : "(execution: R)(arg0: AsExecution[R]): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContextCreation.createExecutionInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#createExecutionInterpolatedFragment[R](execution:R)(implicitevidence$5:org.specs2.specification.core.AsExecution[R]):org.specs2.specification.create.InterpolatedFragment", "kind" : "def"}, {"label" : "fullStackTrace", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.fullStackTrace", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fullStackTrace:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "excludeAlsoTrace", "tail" : "(patterns: String*): IncludeExcludeStackTraceFilter", "member" : "org.specs2.main.ArgumentsShortcuts.excludeAlsoTrace", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#excludeAlsoTrace(patterns:String*):org.specs2.control.IncludeExcludeStackTraceFilter", "kind" : "def"}, {"label" : "excludeTrace", "tail" : "(patterns: String*): IncludeExcludeStackTraceFilter", "member" : "org.specs2.main.ArgumentsShortcuts.excludeTrace", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#excludeTrace(patterns:String*):org.specs2.control.IncludeExcludeStackTraceFilter", "kind" : "def"}, {"label" : "includeAlsoTrace", "tail" : "(patterns: String*): IncludeExcludeStackTraceFilter", "member" : "org.specs2.main.ArgumentsShortcuts.includeAlsoTrace", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#includeAlsoTrace(patterns:String*):org.specs2.control.IncludeExcludeStackTraceFilter", "kind" : "def"}, {"label" : "includeTrace", "tail" : "(patterns: String*): IncludeExcludeStackTraceFilter", "member" : "org.specs2.main.ArgumentsShortcuts.includeTrace", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#includeTrace(patterns:String*):org.specs2.control.IncludeExcludeStackTraceFilter", "kind" : "def"}, {"label" : "diffs", "tail" : "(show: Boolean, separators: String, triggerSize: Int, diffRatio: Int, shortenSize: Int, full: Boolean, seqTriggerSize: Int, seqMaxSize: Int): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.diffs", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#diffs(show:Boolean,separators:String,triggerSize:Int,diffRatio:Int,shortenSize:Int,full:Boolean,seqTriggerSize:Int,seqMaxSize:Int):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "was", "tail" : "(s: String): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.was", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#was(s:String):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "exclude", "tail" : "(tags: String): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.exclude", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#exclude(tags:String):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "include", "tail" : "(tags: String): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.include", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#include(tags:String):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "only", "tail" : "(examples: String): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.only", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#only(examples:String):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "showOnly", "tail" : "(s: String): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.showOnly", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#showOnly(s:String):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "xonly", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.xonly", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#xonly:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "colors", "tail" : "(c: Colors): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.colors", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#colors(c:org.specs2.text.Colors):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "nocolor", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.nocolor", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#nocolor:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "stopOnSkip", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.stopOnSkip", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stopOnSkip:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "stopOnFail", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.stopOnFail", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stopOnFail:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "skipAllUnless", "tail" : "(condition: => Boolean): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.skipAllUnless", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#skipAllUnless(condition:=>Boolean):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "skipAllIf", "tail" : "(condition: => Boolean): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.skipAllIf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#skipAllIf(condition:=>Boolean):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "skipAll", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.skipAll", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#skipAll:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "plan", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.plan", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#plan:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "isolated", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.isolated", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#isolated:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "unbatched", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.unbatched", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#unbatched:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "batchSize", "tail" : "(n: Int): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.batchSize", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#batchSize(n:Int):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "sequential", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.sequential", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#sequential:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "anyToArgProperty", "tail" : "(t: => T): ArgProperty[T]", "member" : "org.specs2.main.ArgProperties.anyToArgProperty", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#anyToArgProperty[T](t:=>T):org.specs2.main.ArgProperty[T]", "kind" : "implicit def"}, {"label" : "makeExample", "tail" : "(expression: String, code: => T, asResult: AsResult[T]): Fragment", "member" : "org.specs2.specification.create.AutoExamples.makeExample", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#makeExample[T](expression:String,code:=>T,asResult:org.specs2.execute.AsResult[T]):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "eg", "tail" : "(code: => T)(arg0: AsResult[T]): Fragments", "member" : "org.specs2.specification.create.AutoExamples.eg", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#eg[T](code:=>T)(implicitevidence$1:org.specs2.execute.AsResult[T]):org.specs2.specification.core.Fragments", "kind" : "implicit macro def"}, {"label" : "specStructureAsFragments", "tail" : "(spec: SpecStructure): Fragments", "member" : "org.specs2.specification.dsl.SpecStructureDsl.specStructureAsFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#specStructureAsFragments(spec:org.specs2.specification.core.SpecStructure):org.specs2.specification.core.Fragments", "kind" : "implicit def"}, {"label" : "fragmentAsSpecStructure", "tail" : "(f: Fragment): SpecStructure", "member" : "org.specs2.specification.dsl.SpecStructureDsl.fragmentAsSpecStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fragmentAsSpecStructure(f:org.specs2.specification.core.Fragment):org.specs2.specification.core.SpecStructure", "kind" : "implicit def"}, {"label" : "stringAsSpecStructure", "tail" : "(s: String): SpecStructure", "member" : "org.specs2.specification.dsl.SpecStructureDsl.stringAsSpecStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#stringAsSpecStructure(s:String):org.specs2.specification.core.SpecStructure", "kind" : "implicit def"}, {"label" : "specHeaderAsStructure", "tail" : "(header: SpecHeader): SpecStructure", "member" : "org.specs2.specification.dsl.SpecStructureDsl.specHeaderAsStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#specHeaderAsStructure(header:org.specs2.specification.core.SpecHeader):org.specs2.specification.core.SpecStructure", "kind" : "implicit def"}, {"label" : "resultAsSpecStructure", "tail" : "(r: => R)(arg0: AsResult[R]): SpecStructure", "member" : "org.specs2.specification.dsl.SpecStructureDslLowImplicits.resultAsSpecStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#resultAsSpecStructure[R](r:=>R)(implicitevidence$1:org.specs2.execute.AsResult[R]):org.specs2.specification.core.SpecStructure", "kind" : "implicit def"}, {"label" : "fragmentsBlock", "tail" : "(fragments: Seq[Fragment], offset: Int): Fragments", "member" : "org.specs2.specification.dsl.FragmentsDsl.fragmentsBlock", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fragmentsBlock(fragments:Seq[org.specs2.specification.core.Fragment],offset:Int):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "fragmentToFragments", "tail" : "(f: Fragment): Fragments", "member" : "org.specs2.specification.dsl.FragmentsDsl.fragmentToFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fragmentToFragments(f:org.specs2.specification.core.Fragment):org.specs2.specification.core.Fragments", "kind" : "implicit def"}, {"label" : "fragmentsAsSpecStructure", "tail" : "(fs: => Fragments): SpecStructure", "member" : "org.specs2.specification.dsl.SpecStructureDsl1.fragmentsAsSpecStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fragmentsAsSpecStructure(fs:=>org.specs2.specification.core.Fragments):org.specs2.specification.core.SpecStructure", "kind" : "implicit def"}, {"label" : "hasSectionsForBlocks", "tail" : "(): Boolean", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.hasSectionsForBlocks", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#hasSectionsForBlocks:Boolean", "kind" : "def"}, {"label" : "addSections", "tail" : "(): Unit", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.addSections", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addSections():Unit", "kind" : "def"}, {"label" : "addFragments", "tail" : "(fragments: Fragments): Fragments", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.addFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addFragments(fragments:org.specs2.specification.core.Fragments):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "addFragment", "tail" : "(fragment: Fragment): Fragment", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.addFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addFragment(fragment:org.specs2.specification.core.Fragment):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addFragmentsBlock", "tail" : "(fs: => Fragments): Fragments", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.addFragmentsBlock", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addFragmentsBlock(fs:=>org.specs2.specification.core.Fragments):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "addFragmentBlock", "tail" : "(f: => Fragment): Fragment", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.addFragmentBlock", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#addFragmentBlock(f:=>org.specs2.specification.core.Fragment):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "is", "tail" : "(): SpecStructure", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.is", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#is:org.specs2.specification.core.SpecStructure", "kind" : "def"}, {"label" : "specificationFragments", "tail" : "(): Fragments", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.specificationFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#specificationFragments:org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "setTitle", "tail" : "(t: String): SpecHeader", "member" : "org.specs2.specification.dsl.mutable.MutableHeaderBuilder.setTitle", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#setTitle(t:String):org.specs2.specification.core.SpecHeader", "kind" : "def"}, {"label" : "setArguments", "tail" : "(a: Arguments): Arguments", "member" : "org.specs2.specification.dsl.mutable.MutableArgumentsBuilder.setArguments", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#setArguments(a:org.specs2.main.Arguments):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "updateArguments", "tail" : "(a: Arguments): Arguments", "member" : "org.specs2.specification.dsl.mutable.MutableArgumentsBuilder.updateArguments", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#updateArguments(a:org.specs2.main.Arguments):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "fragmentFactory", "tail" : "(): FragmentFactory", "member" : "org.specs2.specification.create.FragmentsFactory.fragmentFactory", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fragmentFactory:org.specs2.specification.create.FragmentFactory", "kind" : "def"}, {"label" : "map", "tail" : "(fs: => Fragments, env: Env): Fragments", "member" : "org.specs2.specification.core.SpecificationStructure.map", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#map(fs:=>org.specs2.specification.core.Fragments,env:org.specs2.specification.core.Env):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "map", "tail" : "(fs: => Fragments): Fragments", "member" : "org.specs2.specification.core.SpecificationStructure.map", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#map(fs:=>org.specs2.specification.core.Fragments):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "map", "tail" : "(structure: SpecStructure): SpecStructure", "member" : "org.specs2.specification.core.SpecificationStructure.map", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#map(structure:org.specs2.specification.core.SpecStructure):org.specs2.specification.core.SpecStructure", "kind" : "def"}, {"label" : "decorate", "tail" : "(is: SpecStructure, env: Env): SpecStructure", "member" : "org.specs2.specification.core.SpecificationStructure.decorate", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#decorate(is:org.specs2.specification.core.SpecStructure,env:org.specs2.specification.core.Env):org.specs2.specification.core.SpecStructure", "kind" : "def"}, {"label" : "structure", "tail" : "(): (Env) => SpecStructure", "member" : "org.specs2.specification.core.SpecificationStructure.structure", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#structure:org.specs2.specification.core.Env=>org.specs2.specification.core.SpecStructure", "kind" : "def"}, {"label" : "fragments", "tail" : "(): (Env) => Fragments", "member" : "org.specs2.specification.core.ContextualSpecificationStructure.fragments", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#fragments:org.specs2.specification.core.Env=>org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/XmlMatchers.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "com.lucidchart.open.xtract.XmlReaderSpecification", "trait" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html", "kind" : "trait", "members_trait" : [{"label" : "Debuggable", "tail" : "", "member" : "org.specs2.control.Debug.Debuggable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#Debuggable[T<:<?>]extendsConsoleOutput", "kind" : "class"}, {"label" : "PendingUntilFixed", "tail" : "", "member" : "org.specs2.execute.PendingUntilFixed.PendingUntilFixed", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#PendingUntilFixed[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "InvariantMatcherFunction", "tail" : "", "member" : "org.specs2.matcher.SequenceMatchersCreation.InvariantMatcherFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#InvariantMatcherFunction[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AdaptFunction", "tail" : "", "member" : "org.specs2.matcher.MatchersCreation.AdaptFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#AdaptFunction[T<:<?>,S<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "resultFunction", "tail" : "", "member" : "org.specs2.matcher.ResultImplicits.resultFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#resultFunction[T<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher22", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher22", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher22[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>,T20<:<?>,T21<:<?>,T22<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher21", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher21", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher21[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>,T20<:<?>,T21<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher20", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher20", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher20[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>,T20<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher19", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher19", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher19[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>,T19<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher18", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher18", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher18[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>,T18<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher17", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher17", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher17[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>,T17<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher16", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher16", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher16[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>,T16<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher15", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher15", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher15[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>,T15<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher14", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher14", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher14[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>,T14<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher13", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher13", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher13[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>,T13<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher12", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher12", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher12[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>,T12<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher11", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher11", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher11[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>,T11<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher10", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher10[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>,T10<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher9", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher9[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>,T9<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher8", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher8[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>,T8<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher7", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher7[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>,T7<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher6", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher6[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>,T6<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher5", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher5[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>,T5<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher4", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher4[T1<:<?>,T2<:<?>,T3<:<?>,T4<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher3", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher3[T1<:<?>,T2<:<?>,T3<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TupleMatcher2", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.TupleMatcher2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TupleMatcher2[T1<:<?>,T2<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ContainSeqMatcherFunction", "tail" : "", "member" : "org.specs2.matcher.MatcherZipOperators.ContainSeqMatcherFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ContainSeqMatcherFunction[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ResultLogicalCombinator", "tail" : "", "member" : "org.specs2.execute.ResultLogicalCombinators.ResultLogicalCombinator", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ResultLogicalCombinatorextendsAnyRef", "kind" : "class"}, {"label" : "MatchResultCombinator", "tail" : "", "member" : "org.specs2.matcher.MatchResultLogicalCombinators.MatchResultCombinator", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MatchResultCombinator[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "futureAsResult", "tail" : "", "member" : "org.specs2.matcher.FutureMatchers.futureAsResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#futureAsResult[T]extendsFutureMatchers.this.FutureAsResult[T]", "kind" : "implicit class"}, {"label" : "FutureMatchable", "tail" : "", "member" : "org.specs2.matcher.FutureMatchers.FutureMatchable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#FutureMatchable[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TryResultMatcher", "tail" : "", "member" : "org.specs2.matcher.TryBeHaveMatchers.TryResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TryResultMatcher[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "EitherResultMatcher", "tail" : "", "member" : "org.specs2.matcher.EitherBeHaveMatchers.EitherResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#EitherResultMatcher[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "OptionResultMatcher", "tail" : "", "member" : "org.specs2.matcher.OptionBeHaveMatchers.OptionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#OptionResultMatcher[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "SignificantSyntax", "tail" : "", "member" : "org.specs2.matcher.NumericMatchers.SignificantSyntax", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#SignificantSyntax[N<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SignificantFiguresSyntax", "tail" : "", "member" : "org.specs2.matcher.NumericMatchers.SignificantFiguresSyntax", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#SignificantFiguresSyntaxextendsAnyRef", "kind" : "implicit class"}, {"label" : "NeutralMatcherNumeric", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.NeutralMatcherNumeric", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#NeutralMatcherNumericextendsAnyRef", "kind" : "class"}, {"label" : "NeutralMatcherOrdered", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.NeutralMatcherOrdered", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#NeutralMatcherOrderedextendsAnyRef", "kind" : "class"}, {"label" : "NumericResultMatcher", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.NumericResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#NumericResultMatcher[S<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "OrderedResultMatcher", "tail" : "", "member" : "org.specs2.matcher.NumericBeHaveMatchers.OrderedResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#OrderedResultMatcher[S<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ExceptionMatcherResult", "tail" : "", "member" : "org.specs2.matcher.ExceptionBeHaveMatchers.ExceptionMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ExceptionMatcherResult[T<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ExceptionMatcher", "tail" : "", "member" : "org.specs2.matcher.ExceptionBaseMatchers.ExceptionMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ExceptionMatcher[E<:<?>]extendsMatcher[Any]", "kind" : "class"}, {"label" : "ExceptionClassMatcher", "tail" : "", "member" : "org.specs2.matcher.ExceptionBaseMatchers.ExceptionClassMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ExceptionClassMatcherextendsMatcher[Any]", "kind" : "class"}, {"label" : "NotStringMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBeHaveMatchers.NotStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#NotStringMatcherextendsAnyRef", "kind" : "class"}, {"label" : "NeutralStringMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBeHaveMatchers.NeutralStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#NeutralStringMatcherextendsAnyRef", "kind" : "class"}, {"label" : "StringResultMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBeHaveMatchers.StringResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#StringResultMatcherextendsAnyRef", "kind" : "class"}, {"label" : "FindMatcherPatternWithGroups", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherPatternWithGroups", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#FindMatcherPatternWithGroupsextendsStringBaseMatchers.this.FindMatcherWithGroups", "kind" : "class"}, {"label" : "FindMatcherWithGroups", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherWithGroups", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#FindMatcherWithGroupsextendsMatcher[String]", "kind" : "class"}, {"label" : "FindMatcherRegex", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherRegex", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#FindMatcherRegexextendsStringBaseMatchers.this.FindMatcherPattern", "kind" : "class"}, {"label" : "FindMatcherPattern", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcherPattern", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#FindMatcherPatternextendsStringBaseMatchers.this.FindMatcher", "kind" : "class"}, {"label" : "FindMatcher", "tail" : "", "member" : "org.specs2.matcher.StringBaseMatchers.FindMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#FindMatcherextendsMatcher[String]", "kind" : "class"}, {"label" : "PartialFunctionResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.PartialFunctionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#PartialFunctionResultMatcher[K<:<?>,V<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MapResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.MapResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MapResultMatcher[K<:<?>,V<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MapValueResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.MapValueResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MapValueResultMatcher[V<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MapKeyResultMatcher", "tail" : "", "member" : "org.specs2.matcher.MapBeHaveMatchers.MapKeyResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MapKeyResultMatcher[K<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ImplicitParam10", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ImplicitParam10extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam9", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ImplicitParam9extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam8", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ImplicitParam8extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam7", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ImplicitParam7extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam6", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ImplicitParam6extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam5", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ImplicitParam5extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam4", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ImplicitParam4extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam3", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ImplicitParam3extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam2", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ImplicitParam2extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam1", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam1", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ImplicitParam1extendsAnyRef", "kind" : "trait"}, {"label" : "ImplicitParam", "tail" : "", "member" : "org.specs2.control.ImplicitParameters.ImplicitParam", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ImplicitParamextendsAnyRef", "kind" : "trait"}, {"label" : "OrderedSeqMatchResult", "tail" : "", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.OrderedSeqMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#OrderedSeqMatchResult[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HasSize", "tail" : "", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.HasSize", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#HasSize[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "TraversableBeHaveMatchers", "tail" : "", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.TraversableBeHaveMatchers", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TraversableBeHaveMatchers[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "BeLikeResultMatcher", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.BeLikeResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#BeLikeResultMatcher[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AnyWithEmptyMatchers", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyWithEmptyMatchers", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#AnyWithEmptyMatchers[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ClassMatcherResult", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.ClassMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ClassMatcherResultextendsAnyRef", "kind" : "class"}, {"label" : "AnyMatcherResult", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#AnyMatcherResultextendsAnyRef", "kind" : "class"}, {"label" : "AnyRefMatcherResult", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyRefMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#AnyRefMatcherResult[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AnyBeHaveMatchers", "tail" : "", "member" : "org.specs2.matcher.AnyBeHaveMatchers.AnyBeHaveMatchers", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#AnyBeHaveMatchers[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "FragmentsTaggedAs", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TagDsl.FragmentsTaggedAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#FragmentsTaggedAsextendsAnyRef", "kind" : "implicit class"}, {"label" : "FragmentTaggedAs", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TagDsl.FragmentTaggedAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#FragmentTaggedAsextendsAnyRef", "kind" : "implicit class"}, {"label" : "mutableSeeFragment", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.mutableSeeFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#mutableSeeFragmentextendsReferenceDsl.this.seeFragment", "kind" : "implicit class"}, {"label" : "mutableLinkFragment", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.mutableLinkFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#mutableLinkFragmentextendsReferenceDsl.this.linkFragment", "kind" : "implicit class"}, {"label" : "MutableTitleOps", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TitleDsl.MutableTitleOps", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MutableTitleOpsextendsTitleDsl.this.TitleOps", "kind" : "class"}, {"label" : "fragmentsFormatting", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TextDsl.fragmentsFormatting", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fragmentsFormattingextendsAnyRef", "kind" : "implicit class"}, {"label" : "fragmentFormatting", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TextDsl.fragmentFormatting", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fragmentFormattingextendsAnyRef", "kind" : "implicit class"}, {"label" : "textFragment", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.TextDsl.textFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#textFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "MutableBangExample", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl.MutableBangExample", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MutableBangExampleextendsExampleDsl.this.BangExample", "kind" : "class"}, {"label" : "BlockExample", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl1.BlockExample", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#BlockExampleextendsExampleDsl1.this.BlockExample0", "kind" : "class"}, {"label" : "BlockExample0", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl0.BlockExample0", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#BlockExample0extendsAnyRef", "kind" : "class"}, {"label" : "WarningForgottenOperator", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.BlockDsl.WarningForgottenOperator", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#WarningForgottenOperatorextendsAnyRef", "kind" : "class"}, {"label" : "describe", "tail" : "", "member" : "org.specs2.specification.dsl.mutable.BlockDsl.describe", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#describeextendsAnyRef", "kind" : "implicit class"}, {"label" : "specificationInStringContext", "tail" : "", "member" : "org.specs2.specification.create.S2StringContextCreation.specificationInStringContext", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#specificationInStringContextextendsAnyRef", "kind" : "implicit class"}, {"label" : "seeFragment", "tail" : "", "member" : "org.specs2.specification.dsl.ReferenceDsl.seeFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#seeFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "linkFragment", "tail" : "", "member" : "org.specs2.specification.dsl.ReferenceDsl.linkFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#linkFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "BangExample", "tail" : "", "member" : "org.specs2.specification.dsl.ExampleDsl.BangExample", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#BangExampleextendsAnyRef", "kind" : "class"}, {"label" : "TitleOps", "tail" : "", "member" : "org.specs2.specification.dsl.TitleDsl.TitleOps", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TitleOpsextendsAnyRef", "kind" : "class"}, {"label" : "appendSpecStructureToSpecStructure", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDsl.appendSpecStructureToSpecStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#appendSpecStructureToSpecStructureextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendSpecStructureToSpecHeader", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDsl.appendSpecStructureToSpecHeader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#appendSpecStructureToSpecHeaderextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendSpecStructureToFragment", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDsl.appendSpecStructureToFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#appendSpecStructureToFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendSpecStructureToString", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDsl.appendSpecStructureToString", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#appendSpecStructureToStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendSpecStructureToFragments", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDslLowImplicits.appendSpecStructureToFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#appendSpecStructureToFragmentsextendsAnyRef", "kind" : "implicit class"}, {"label" : "MutedFragment", "tail" : "", "member" : "org.specs2.specification.dsl.FragmentsDsl.MutedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MutedFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "HiddenFragment", "tail" : "", "member" : "org.specs2.specification.dsl.FragmentsDsl.HiddenFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#HiddenFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendToFragments", "tail" : "", "member" : "org.specs2.specification.dsl.FragmentsDsl.appendToFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#appendToFragmentsextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendToFragment", "tail" : "", "member" : "org.specs2.specification.dsl.FragmentsDsl.appendToFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#appendToFragmentextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendToString", "tail" : "", "member" : "org.specs2.specification.dsl.FragmentsDsl.appendToString", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#appendToStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "appendToArguments", "tail" : "", "member" : "org.specs2.specification.dsl.SpecStructureDsl1.appendToArguments", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#appendToArgumentsextendsAnyRef", "kind" : "implicit class"}, {"label" : "MockAnswer3", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.MockAnswer3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MockAnswer3[T<:<?>]extendsAnswer[T]", "kind" : "class"}, {"label" : "MockAnswer2", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.MockAnswer2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MockAnswer2[T<:<?>]extendsAnswer[T]", "kind" : "class"}, {"label" : "MockAnswer", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.MockAnswer", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MockAnswer[T<:<?>]extendsAnswer[T]", "kind" : "class"}, {"label" : "AnOngoingStubbing", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.AnOngoingStubbing", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#AnOngoingStubbing[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AStubber", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.AStubber", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#AStubber[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Stubbed", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.Stubbed", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#Stubbed[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ToInOrderMode", "tail" : "", "member" : "org.specs2.mock.mockito.CalledMatchers.ToInOrderMode", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ToInOrderMode[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MockitoVerificationWithTimeout", "tail" : "", "member" : "org.specs2.mock.mockito.CalledMatchers.MockitoVerificationWithTimeout", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MockitoVerificationWithTimeoutextendsProductwithSerializable", "kind" : "case class"}, {"label" : "TimesCall", "tail" : "", "member" : "org.specs2.mock.mockito.CalledMatchers.TimesCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TimesCallextendsAnyRef", "kind" : "implicit class"}, {"label" : "Calls", "tail" : "", "member" : "org.specs2.mock.mockito.CalledMatchers.Calls", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#CallsextendsAnyRef", "kind" : "class"}, {"label" : "Descriptible", "tail" : "", "member" : "org.specs2.matcher.ExpectationsDescription.Descriptible", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#Descriptible[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ExpectationDescription", "tail" : "", "member" : "org.specs2.matcher.ExpectationsDescription.ExpectationDescription", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ExpectationDescriptionextendsAnyRef", "kind" : "class"}, {"label" : "TypedEqualExpectation", "tail" : "", "member" : "org.specs2.matcher.TypedEqual.TypedEqualExpectation", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#TypedEqualExpectation[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MockProperty", "tail" : "", "member" : "org.specs2.mock.mockito.MocksCreation.MockProperty", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#MockProperty[T<:<?>]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "bePartialSuccess", "tail" : "(check: (PartialParseSuccess[T]) => MatchResult[Any]): Matcher[ParseResult[T]]", "member" : "com.lucidchart.open.xtract.ParseResultMatchers.bePartialSuccess", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#bePartialSuccess[T](check:com.lucidchart.open.xtract.PartialParseSuccess[T]=>org.specs2.matcher.MatchResult[Any]):org.specs2.matcher.Matcher[com.lucidchart.open.xtract.ParseResult[T]]", "kind" : "def"}, {"label" : "beParseFailure", "tail" : "(check: ValueCheck[Seq[ParseError]]): Matcher[ParseResult[T]]", "member" : "com.lucidchart.open.xtract.ParseResultMatchers.beParseFailure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beParseFailure[T](check:org.specs2.matcher.ValueCheck[Seq[com.lucidchart.open.xtract.ParseError]]):org.specs2.matcher.Matcher[com.lucidchart.open.xtract.ParseResult[T]]", "kind" : "def"}, {"label" : "beParseFailure", "tail" : "(): Matcher[ParseResult[T]]", "member" : "com.lucidchart.open.xtract.ParseResultMatchers.beParseFailure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beParseFailure[T]:org.specs2.matcher.Matcher[com.lucidchart.open.xtract.ParseResult[T]]", "kind" : "def"}, {"label" : "beParseSuccess", "tail" : "(check: ValueCheck[T]): Matcher[ParseResult[T]]", "member" : "com.lucidchart.open.xtract.ParseResultMatchers.beParseSuccess", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beParseSuccess[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.Matcher[com.lucidchart.open.xtract.ParseResult[T]]", "kind" : "def"}, {"label" : "beParseSuccess", "tail" : "(): Matcher[ParseResult[T]]", "member" : "com.lucidchart.open.xtract.ParseResultMatchers.beParseSuccess", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beParseSuccess[T]:org.specs2.matcher.Matcher[com.lucidchart.open.xtract.ParseResult[T]]", "kind" : "def"}, {"label" : "isNodeSeqWithLength", "tail" : "(n: Int): Matcher[NodeSeq]", "member" : "com.lucidchart.open.xtract.XmlMatchers.isNodeSeqWithLength", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#isNodeSeqWithLength(n:Int):org.specs2.matcher.Matcher[scala.xml.NodeSeq]", "kind" : "def"}, {"label" : "isNodeWithLabel", "tail" : "(label: String): Matcher[NodeSeq]", "member" : "com.lucidchart.open.xtract.XmlMatchers.isNodeWithLabel", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#isNodeWithLabel(label:String):org.specs2.matcher.Matcher[scala.xml.NodeSeq]", "kind" : "def"}, {"label" : "isNodeWithAttribute", "tail" : "(attribute: String, expected: String): Matcher[NodeSeq]", "member" : "com.lucidchart.open.xtract.XmlMatchers.isNodeWithAttribute", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#isNodeWithAttribute(attribute:String,expected:String):org.specs2.matcher.Matcher[scala.xml.NodeSeq]", "kind" : "def"}, {"label" : "createShouldExpectable", "tail" : "(t: => T): ShouldExpectable[T]", "member" : "org.specs2.matcher.ShouldThrownExpectables.createShouldExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#createShouldExpectable[T](t:=>T):org.specs2.matcher.ShouldExpectable[T]", "kind" : "def"}, {"label" : "akaShould", "tail" : "(tm: Expectable[T]): ShouldExpectable[T]", "member" : "org.specs2.matcher.ShouldThrownExpectables.akaShould", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#akaShould[T](tm:org.specs2.matcher.Expectable[T]):org.specs2.matcher.ShouldExpectable[T]", "kind" : "implicit def"}, {"label" : "sandboxMatchResult", "tail" : "(mr: => MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ThrownStandardMatchResults.sandboxMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#sandboxMatchResult[T](mr:=>org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "ko", "tail" : ": MatchResult[Any]", "member" : "org.specs2.matcher.ThrownStandardMatchResults.ko", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ko:org.specs2.matcher.MatchResult[Any]", "kind" : "lazy val"}, {"label" : "skipped", "tail" : "(s: Skipped): Skipped", "member" : "org.specs2.matcher.ThrownStandardResults.skipped", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#skipped(s:org.specs2.execute.Skipped):org.specs2.execute.Skipped", "kind" : "def"}, {"label" : "skipped", "tail" : "(m: String): Skipped", "member" : "org.specs2.matcher.ThrownStandardResults.skipped", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#skipped(m:String):org.specs2.execute.Skipped", "kind" : "def"}, {"label" : "skipped", "tail" : "(): Skipped", "member" : "org.specs2.matcher.ThrownStandardResults.skipped", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#skipped:org.specs2.execute.Skipped", "kind" : "def"}, {"label" : "pending", "tail" : "(p: Pending): Pending", "member" : "org.specs2.matcher.ThrownStandardResults.pending", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#pending(p:org.specs2.execute.Pending):org.specs2.execute.Pending", "kind" : "def"}, {"label" : "pending", "tail" : "(m: String): Pending", "member" : "org.specs2.matcher.ThrownStandardResults.pending", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#pending(m:String):org.specs2.execute.Pending", "kind" : "def"}, {"label" : "pending", "tail" : "(): Pending", "member" : "org.specs2.matcher.ThrownStandardResults.pending", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#pending:org.specs2.execute.Pending", "kind" : "def"}, {"label" : "failure", "tail" : "(f: Failure): Failure", "member" : "org.specs2.matcher.ThrownStandardResults.failure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#failure(f:org.specs2.execute.Failure):org.specs2.execute.Failure", "kind" : "def"}, {"label" : "failure", "tail" : "(m: String): Failure", "member" : "org.specs2.matcher.ThrownStandardResults.failure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#failure(m:String):org.specs2.execute.Failure", "kind" : "def"}, {"label" : "success", "tail" : "(m: String): Success", "member" : "org.specs2.matcher.ThrownStandardResults.success", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#success(m:String):org.specs2.execute.Success", "kind" : "def"}, {"label" : "success", "tail" : ": Success", "member" : "org.specs2.matcher.ThrownStandardResults.success", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#success:org.specs2.execute.Success", "kind" : "lazy val"}, {"label" : "anError", "tail" : "(): Error", "member" : "org.specs2.matcher.ThrownStandardResults.anError", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anError:org.specs2.execute.Error", "kind" : "def"}, {"label" : "todo", "tail" : "(): Pending", "member" : "org.specs2.matcher.ThrownStandardResults.todo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#todo:org.specs2.execute.Pending", "kind" : "def"}, {"label" : "failure", "tail" : "(): Failure", "member" : "org.specs2.matcher.ThrownStandardResults.failure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#failure:org.specs2.execute.Failure", "kind" : "def"}, {"label" : "akaMust", "tail" : "(tm: Expectable[T]): MustExpectable[T]", "member" : "org.specs2.matcher.MustThrownExpectables.akaMust", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#akaMust[T](tm:org.specs2.matcher.Expectable[T]):org.specs2.matcher.MustExpectable[T]", "kind" : "implicit def"}, {"label" : "createMustExpectable", "tail" : "(t: => T): MustExpectable[T]", "member" : "org.specs2.matcher.MustThrownExpectationsCreation.createMustExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#createMustExpectable[T](t:=>T):org.specs2.matcher.MustExpectable[T]", "kind" : "def"}, {"label" : "checkMatchResultFailure", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ThrownExpectables.checkMatchResultFailure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#checkMatchResultFailure[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "checkResultFailure", "tail" : "(result: => Result): Result", "member" : "org.specs2.matcher.ThrownExpectables.checkResultFailure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#checkResultFailure(result:=>org.specs2.execute.Result):org.specs2.execute.Result", "kind" : "def"}, {"label" : "createExpectableWithShowAs", "tail" : "(t: => T, show: => String): Expectable[T]", "member" : "org.specs2.matcher.ThrownExpectables.createExpectableWithShowAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#createExpectableWithShowAs[T](t:=>T,show:=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: Option[(String) => String]): Expectable[T]", "member" : "org.specs2.matcher.ThrownExpectables.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#createExpectable[T](t:=>T,alias:Option[String=>String]):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "executionEnvToExecutorService", "tail" : "(ee: ExecutionEnv): ExecutorService", "member" : "org.specs2.concurrent.ImplicitExecutorServiceFromExecutionEnv.executionEnvToExecutorService", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#executionEnvToExecutorService(implicitee:org.specs2.concurrent.ExecutionEnv):java.util.concurrent.ExecutorService", "kind" : "implicit def"}, {"label" : "executionEnvToExecutionContext", "tail" : "(ee: ExecutionEnv): ExecutionContext", "member" : "org.specs2.concurrent.ImplicitExecutionContextFromExecutionEnv.executionEnvToExecutionContext", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#executionEnvToExecutionContext(implicitee:org.specs2.concurrent.ExecutionEnv):scala.concurrent.ExecutionContext", "kind" : "implicit def"}, {"label" : "debug", "tail" : "(t: => T): Debuggable[T]", "member" : "org.specs2.control.Debug.debug", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#debug[T](t:=>T):Debug.this.Debuggable[T]", "kind" : "implicit def"}, {"label" : "toPendingUntilFixed", "tail" : "(t: => T)(arg0: AsResult[T]): PendingUntilFixed[T]", "member" : "org.specs2.execute.PendingUntilFixed.toPendingUntilFixed", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toPendingUntilFixed[T](t:=>T)(implicitevidence$3:org.specs2.execute.AsResult[T]):PendingUntilFixed.this.PendingUntilFixed[T]", "kind" : "implicit def"}, {"label" : "pendingUntilFixed", "tail" : "(m: String)(t: => T)(arg0: AsResult[T]): Result", "member" : "org.specs2.execute.PendingUntilFixed.pendingUntilFixed", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#pendingUntilFixed[T](m:String)(t:=>T)(implicitevidence$2:org.specs2.execute.AsResult[T]):org.specs2.execute.Result", "kind" : "def"}, {"label" : "pendingUntilFixed", "tail" : "(t: => T)(arg0: AsResult[T]): Result", "member" : "org.specs2.execute.PendingUntilFixed.pendingUntilFixed", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#pendingUntilFixed[T](t:=>T)(implicitevidence$1:org.specs2.execute.AsResult[T]):org.specs2.execute.Result", "kind" : "def"}, {"label" : "ok", "tail" : ": MatchResult[Any]", "member" : "org.specs2.matcher.StandardMatchResults.ok", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ok:org.specs2.matcher.MatchResult[Any]", "kind" : "lazy val"}, {"label" : "ko", "tail" : "(m: String): MatchResult[Any]", "member" : "org.specs2.matcher.StandardMatchResults.ko", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ko(m:String):org.specs2.matcher.MatchResult[Any]", "kind" : "def"}, {"label" : "ok", "tail" : "(m: String): MatchResult[Any]", "member" : "org.specs2.matcher.StandardMatchResults.ok", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ok(m:String):org.specs2.matcher.MatchResult[Any]", "kind" : "def"}, {"label" : "skipped", "tail" : "(r: => R)(arg0: AsResult[R]): Skipped", "member" : "org.specs2.execute.StandardResults.skipped", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#skipped[R](r:=>R)(implicitevidence$2:org.specs2.execute.AsResult[R]):org.specs2.execute.Skipped", "kind" : "def"}, {"label" : "pending", "tail" : "(r: => R)(arg0: AsResult[R]): Pending", "member" : "org.specs2.execute.StandardResults.pending", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#pending[R](r:=>R)(implicitevidence$1:org.specs2.execute.AsResult[R]):org.specs2.execute.Pending", "kind" : "def"}, {"label" : "wontdo", "tail" : "(): Success", "member" : "org.specs2.execute.StandardResults.wontdo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#wontdo:org.specs2.execute.Success", "kind" : "def"}, {"label" : "done", "tail" : "(): Success", "member" : "org.specs2.execute.StandardResults.done", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#done:org.specs2.execute.Success", "kind" : "def"}, {"label" : "thisBlock", "tail" : "(t: => Nothing): ShouldExpectable[Nothing]", "member" : "org.specs2.matcher.ShouldExpectations.thisBlock", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#thisBlock(t:=>Nothing):org.specs2.matcher.ShouldExpectable[Nothing]", "kind" : "implicit def"}, {"label" : "thisValue", "tail" : "(t: => T): ShouldExpectable[T]", "member" : "org.specs2.matcher.ShouldExpectations.thisValue", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#thisValue[T](t:=>T):org.specs2.matcher.ShouldExpectable[T]", "kind" : "implicit def"}, {"label" : "theBlock", "tail" : "(t: => Nothing): MustExpectable[Nothing]", "member" : "org.specs2.matcher.MustExpectations.theBlock", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#theBlock(t:=>Nothing):org.specs2.matcher.MustExpectable[Nothing]", "kind" : "implicit def"}, {"label" : "theValue", "tail" : "(t: => T): MustExpectable[T]", "member" : "org.specs2.matcher.MustExpectations1.theValue", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#theValue[T](t:=>T):org.specs2.matcher.MustExpectable[T]", "kind" : "implicit def"}, {"label" : "postfixOpsAreAllowed", "tail" : ": postfixOps", "member" : "org.specs2.control.LanguageFeatures.postfixOpsAreAllowed", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#postfixOpsAreAllowed:languageFeature.postfixOps", "kind" : "implicit lazy val"}, {"label" : "implicitsAreAllowed", "tail" : ": implicitConversions", "member" : "org.specs2.control.LanguageFeatures.implicitsAreAllowed", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitsAreAllowed:languageFeature.implicitConversions", "kind" : "implicit lazy val"}, {"label" : "atMostOnceWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, R])(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atMostOnceWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atMostOnceWhen[T,R](values:collection.Traversable[T])(f:PartialFunction[T,R])(implicitevidence$8:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "atLeastOnceWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, R])(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atLeastOnceWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atLeastOnceWhen[T,R](values:collection.Traversable[T])(f:PartialFunction[T,R])(implicitevidence$7:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "atMostOnce", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atMostOnce", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atMostOnce[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "atLeastOnce", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atLeastOnce", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atLeastOnce[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "atMostOnce", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atMostOnce", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atMostOnce[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$6:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "atLeastOnce", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.atLeastOnce", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atLeastOnce[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$5:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "foreachWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, R])(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.foreachWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#foreachWhen[T,R](values:collection.Traversable[T])(f:PartialFunction[T,R])(implicitevidence$4:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.foreach", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#foreach[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.foreach", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#foreach[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$3:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "forallWhen", "tail" : "(values: Traversable[T])(f: PartialFunction[T, MatchResult[U]]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.forallWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#forallWhen[T,U](values:collection.Traversable[T])(f:PartialFunction[T,org.specs2.matcher.MatchResult[U]]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "forall", "tail" : "(matcher: Matcher[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.SequenceMatchersCreation.forall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#forall[T](matcher:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "forall", "tail" : "(values: Traversable[T])(f: (T) => R)(arg0: AsResult[R]): MatchResult[Traversable[T]]", "member" : "org.specs2.matcher.SequenceMatchersCreation.forall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#forall[T,R](values:collection.Traversable[T])(f:T=>R)(implicitevidence$2:org.specs2.execute.AsResult[R]):org.specs2.matcher.MatchResult[collection.Traversable[T]]", "kind" : "def"}, {"label" : "stringMatcherFunctionToBynameMatcherFunction", "tail" : "(f: (T) => Matcher[R]): (=> T) => Matcher[R]", "member" : "org.specs2.matcher.MatchersCreation.stringMatcherFunctionToBynameMatcherFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stringMatcherFunctionToBynameMatcherFunction[T,R](f:T=>org.specs2.matcher.Matcher[R]):(=>T)=>org.specs2.matcher.Matcher[R]", "kind" : "implicit def"}, {"label" : "matchResultFunctionToMatcher", "tail" : "(f: (T) => R)(arg0: AsResult[R]): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.matchResultFunctionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matchResultFunctionToMatcher[T,R](f:T=>R)(implicitevidence$9:org.specs2.execute.AsResult[R]):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "tripletFunctionToMatcher", "tail" : "(f: (T) => (Boolean, String, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.tripletFunctionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#tripletFunctionToMatcher[T](f:T=>(Boolean,String,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "pairFunctionToMatcher", "tail" : "(f: (T) => (Boolean, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.pairFunctionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#pairFunctionToMatcher[T](f:T=>(Boolean,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionAndMessagesToMatcher", "tail" : "(f: ((T) => Boolean, (T) => String, (T) => String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionAndMessagesToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionAndMessagesToMatcher[T](f:(T=>Boolean,T=>String,T=>String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionAndKoMessageToMatcher", "tail" : "(f: ((T) => Boolean, (T) => String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionAndKoMessageToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionAndKoMessageToMatcher[T](f:(T=>Boolean,T=>String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionToMatcher2", "tail" : "(f: ((T) => Boolean, String, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionToMatcher2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionToMatcher2[T](f:(T=>Boolean,String,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "functionToMatcher", "tail" : "(f: ((T) => Boolean, String)): Matcher[T]", "member" : "org.specs2.matcher.MatchersCreation.functionToMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionToMatcher[T](f:(T=>Boolean,String)):org.specs2.matcher.Matcher[T]", "kind" : "implicit def"}, {"label" : "fromMatchResult", "tail" : "(r: => MatchResult[_]): Boolean", "member" : "org.specs2.matcher.MatchResultImplicits.fromMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fromMatchResult(r:=>org.specs2.matcher.MatchResult[_]):Boolean", "kind" : "implicit def"}, {"label" : "asResult", "tail" : "(r: MatchResult[T]): Result", "member" : "org.specs2.matcher.MatchResultImplicits.asResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#asResult[T](r:org.specs2.matcher.MatchResult[T]):org.specs2.execute.Result", "kind" : "implicit def"}, {"label" : "seqToResult", "tail" : "(r: Seq[MatchResult[T]]): Result", "member" : "org.specs2.matcher.MatchResultImplicits.seqToResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#seqToResult[T](r:Seq[org.specs2.matcher.MatchResult[T]]):org.specs2.execute.Result", "kind" : "implicit def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19], m20: (=> T20) => Matcher[S20], m21: (=> T21) => Matcher[S21], m22: (=> T22) => Matcher[S22]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, S21, S22)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21,S22](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19],m20:(=>T20)=>org.specs2.matcher.Matcher[S20],m21:(=>T21)=>org.specs2.matcher.Matcher[S21],m22:(=>T22)=>org.specs2.matcher.Matcher[S22]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21,S22)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19], m20: (=> T20) => Matcher[S20], m21: (=> T21) => Matcher[S21]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, S21)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19],m20:(=>T20)=>org.specs2.matcher.Matcher[S20],m21:(=>T21)=>org.specs2.matcher.Matcher[S21]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19], m20: (=> T20) => Matcher[S20]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19],m20:(=>T20)=>org.specs2.matcher.Matcher[S20]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18], m19: (=> T19) => Matcher[S19]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18],m19:(=>T19)=>org.specs2.matcher.Matcher[S19]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17], m18: (=> T18) => Matcher[S18]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17],m18:(=>T18)=>org.specs2.matcher.Matcher[S18]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16], m17: (=> T17) => Matcher[S17]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16],m17:(=>T17)=>org.specs2.matcher.Matcher[S17]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15], m16: (=> T16) => Matcher[S16]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15],m16:(=>T16)=>org.specs2.matcher.Matcher[S16]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14], m15: (=> T15) => Matcher[S15]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14],m15:(=>T15)=>org.specs2.matcher.Matcher[S15]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13], m14: (=> T14) => Matcher[S14]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13],m14:(=>T14)=>org.specs2.matcher.Matcher[S14]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12], m13: (=> T13) => Matcher[S13]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12],m13:(=>T13)=>org.specs2.matcher.Matcher[S13]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11], m12: (=> T12) => Matcher[S12]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11],m12:(=>T12)=>org.specs2.matcher.Matcher[S12]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10], m11: (=> T11) => Matcher[S11]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10],m11:(=>T11)=>org.specs2.matcher.Matcher[S11]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9], m10: (=> T10) => Matcher[S10]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9],m10:(=>T10)=>org.specs2.matcher.Matcher[S10]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8], m9: (=> T9) => Matcher[S9]): (=> (T1, T2, T3, T4, T5, T6, T7, T8, T9)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8, S9)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,T9,S1,S2,S3,S4,S5,S6,S7,S8,S9](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8],m9:(=>T9)=>org.specs2.matcher.Matcher[S9]):(=>(T1,T2,T3,T4,T5,T6,T7,T8,T9))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8,S9)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7], m8: (=> T8) => Matcher[S8]): (=> (T1, T2, T3, T4, T5, T6, T7, T8)) => Matcher[(S1, S2, S3, S4, S5, S6, S7, S8)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,T8,S1,S2,S3,S4,S5,S6,S7,S8](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7],m8:(=>T8)=>org.specs2.matcher.Matcher[S8]):(=>(T1,T2,T3,T4,T5,T6,T7,T8))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7,S8)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6], m7: (=> T7) => Matcher[S7]): (=> (T1, T2, T3, T4, T5, T6, T7)) => Matcher[(S1, S2, S3, S4, S5, S6, S7)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,T7,S1,S2,S3,S4,S5,S6,S7](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6],m7:(=>T7)=>org.specs2.matcher.Matcher[S7]):(=>(T1,T2,T3,T4,T5,T6,T7))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6,S7)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5], m6: (=> T6) => Matcher[S6]): (=> (T1, T2, T3, T4, T5, T6)) => Matcher[(S1, S2, S3, S4, S5, S6)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,T6,S1,S2,S3,S4,S5,S6](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5],m6:(=>T6)=>org.specs2.matcher.Matcher[S6]):(=>(T1,T2,T3,T4,T5,T6))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5,S6)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4], m5: (=> T5) => Matcher[S5]): (=> (T1, T2, T3, T4, T5)) => Matcher[(S1, S2, S3, S4, S5)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,T5,S1,S2,S3,S4,S5](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4],m5:(=>T5)=>org.specs2.matcher.Matcher[S5]):(=>(T1,T2,T3,T4,T5))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4,S5)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3], m4: (=> T4) => Matcher[S4]): (=> (T1, T2, T3, T4)) => Matcher[(S1, S2, S3, S4)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,T4,S1,S2,S3,S4](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3],m4:(=>T4)=>org.specs2.matcher.Matcher[S4]):(=>(T1,T2,T3,T4))=>org.specs2.matcher.Matcher[(S1,S2,S3,S4)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2], m3: (=> T3) => Matcher[S3]): (=> (T1, T2, T3)) => Matcher[(S1, S2, S3)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,T3,S1,S2,S3](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2],m3:(=>T3)=>org.specs2.matcher.Matcher[S3]):(=>(T1,T2,T3))=>org.specs2.matcher.Matcher[(S1,S2,S3)]", "kind" : "def"}, {"label" : "zip", "tail" : "(m1: (=> T1) => Matcher[S1], m2: (=> T2) => Matcher[S2]): (=> (T1, T2)) => Matcher[(S1, S2)]", "member" : "org.specs2.matcher.MatcherZipOperators.zip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#zip[T1,T2,S1,S2](m1:(=>T1)=>org.specs2.matcher.Matcher[S1],m2:(=>T2)=>org.specs2.matcher.Matcher[S2]):(=>(T1,T2))=>org.specs2.matcher.Matcher[(S1,S2)]", "kind" : "def"}, {"label" : "contain", "tail" : "(f: (=> T) => Matcher[S])(expected: => Seq[T]): (Seq[S]) => MatchResult[Seq[S]]", "member" : "org.specs2.matcher.MatcherZipOperators.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T,S](f:(=>T)=>org.specs2.matcher.Matcher[S])(expected:=>Seq[T]):Seq[S]=>org.specs2.matcher.MatchResult[Seq[S]]", "kind" : "def"}, {"label" : "combineResult", "tail" : "(r: => Result): ResultLogicalCombinator", "member" : "org.specs2.execute.ResultLogicalCombinators.combineResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#combineResult(r:=>org.specs2.execute.Result):ResultLogicalCombinators.this.ResultLogicalCombinator", "kind" : "implicit def"}, {"label" : "combineBoolean", "tail" : "(b: => Boolean): ResultLogicalCombinator", "member" : "org.specs2.execute.ResultLogicalCombinators.combineBoolean", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#combineBoolean(b:=>Boolean):ResultLogicalCombinators.this.ResultLogicalCombinator", "kind" : "implicit def"}, {"label" : "negateWhen", "tail" : "(condition: Boolean)(r: Result): Result", "member" : "org.specs2.execute.Results.negateWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#negateWhen(condition:Boolean)(r:org.specs2.execute.Result):org.specs2.execute.Result", "kind" : "def"}, {"label" : "negate", "tail" : "(r: Result): Result", "member" : "org.specs2.execute.Results.negate", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#negate(r:org.specs2.execute.Result):org.specs2.execute.Result", "kind" : "def"}, {"label" : "booleanToSimpleResult", "tail" : "(b: Boolean): Result", "member" : "org.specs2.execute.Results.booleanToSimpleResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#booleanToSimpleResult(b:Boolean):org.specs2.execute.Result", "kind" : "def"}, {"label" : "toResult", "tail" : "(b: Boolean): Result", "member" : "org.specs2.execute.Results.toResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toResult(b:Boolean):org.specs2.execute.Result", "kind" : "implicit def"}, {"label" : "combineMatchResult", "tail" : "(m: => MatchResult[T]): MatchResultCombinator[T]", "member" : "org.specs2.matcher.MatchResultLogicalCombinators.combineMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#combineMatchResult[T](m:=>org.specs2.matcher.MatchResult[T]):MatchResultLogicalCombinators.this.MatchResultCombinator[T]", "kind" : "implicit def"}, {"label" : "retry", "tail" : "(m: Matcher[T])(retries: Int)(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.retry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#retry[T](m:org.specs2.matcher.Matcher[T])(retries:Int)(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "awaitFor", "tail" : "(m: Matcher[T])(timeout: FiniteDuration)(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.awaitFor", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#awaitFor[T](m:org.specs2.matcher.Matcher[T])(timeout:scala.concurrent.duration.FiniteDuration)(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "await", "tail" : "(m: Matcher[T])(retries: Int, timeout: FiniteDuration)(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.await", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#await[T](m:org.specs2.matcher.Matcher[T])(retries:Int,timeout:scala.concurrent.duration.FiniteDuration)(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "await", "tail" : "(m: Matcher[T])(ee: ExecutionEnv): Matcher[Future[T]]", "member" : "org.specs2.matcher.FutureBaseMatchers.await", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#await[T](m:org.specs2.matcher.Matcher[T])(implicitee:org.specs2.concurrent.ExecutionEnv):org.specs2.matcher.Matcher[scala.concurrent.Future[T]]", "kind" : "def"}, {"label" : "eventually", "tail" : "(nested: => Matcher[T]): Matcher[T]", "member" : "org.specs2.matcher.EventuallyMatchers.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#eventually[T](nested:=>org.specs2.matcher.Matcher[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "eventually", "tail" : "(nested: => Matcher[T], retries: Int, sleep: Duration): Matcher[T]", "member" : "org.specs2.matcher.EventuallyMatchers.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#eventually[T](nested:=>org.specs2.matcher.Matcher[T],retries:Int,sleep:scala.concurrent.duration.Duration):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "eventually", "tail" : "(nested: => Matcher[T], retries: Int, sleep: (Int) => Duration): Matcher[T]", "member" : "org.specs2.matcher.EventuallyMatchers.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#eventually[T](nested:=>org.specs2.matcher.Matcher[T],retries:Int,sleep:Int=>scala.concurrent.duration.Duration):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "eventually", "tail" : "(result: => T)(arg0: AsResult[T]): T", "member" : "org.specs2.execute.EventuallyResults.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#eventually[T](result:=>T)(implicitevidence$3:org.specs2.execute.AsResult[T]):T", "kind" : "def"}, {"label" : "eventually", "tail" : "(retries: Int, sleep: Duration)(result: => T)(arg0: AsResult[T]): T", "member" : "org.specs2.execute.EventuallyResults.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#eventually[T](retries:Int,sleep:scala.concurrent.duration.Duration)(result:=>T)(implicitevidence$2:org.specs2.execute.AsResult[T]):T", "kind" : "def"}, {"label" : "eventually", "tail" : "(retries: Int, sleep: (Int) => Duration)(result: => T)(arg0: AsResult[T]): T", "member" : "org.specs2.execute.EventuallyResults.eventually", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#eventually[T](retries:Int,sleep:Int=>scala.concurrent.duration.Duration)(result:=>T)(implicitevidence$1:org.specs2.execute.AsResult[T]):T", "kind" : "def"}, {"label" : "toTryResultMatcher", "tail" : "(result: MatchResult[Try[T]]): TryResultMatcher[T]", "member" : "org.specs2.matcher.TryBeHaveMatchers.toTryResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toTryResultMatcher[T](result:org.specs2.matcher.MatchResult[scala.util.Try[T]]):TryBeHaveMatchers.this.TryResultMatcher[T]", "kind" : "implicit def"}, {"label" : "aFailedTry", "tail" : "(t: Throwable): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#aFailedTry[T](t:Throwable):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "failedTry", "tail" : "(t: Throwable): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.failedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#failedTry[T](t:Throwable):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "aFailedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#aFailedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "failedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.failedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#failedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "beAFailedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beAFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beAFailedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "beFailedTry", "tail" : "(check: ValueCheck[Throwable]): TryFailureCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beFailedTry[T](check:org.specs2.matcher.ValueCheck[Throwable]):org.specs2.matcher.TryFailureCheckedMatcher[T]", "kind" : "def"}, {"label" : "aFailedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#aFailedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "failedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.failedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#failedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "beAFailedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beAFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beAFailedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "beFailedTry", "tail" : "(): TryFailureMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beFailedTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beFailedTry[T]:org.specs2.matcher.TryFailureMatcher[T]", "kind" : "def"}, {"label" : "aSuccessfulTry", "tail" : "(t: T)(arg0: Diffable[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#aSuccessfulTry[T](t:T)(implicitevidence$2:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "successfulTry", "tail" : "(t: T)(arg0: Diffable[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.successfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#successfulTry[T](t:T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "aSuccessfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#aSuccessfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "successfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.successfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#successfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "beASuccessfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beASuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beASuccessfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "beSuccessfulTry", "tail" : "(check: ValueCheck[T]): TrySuccessCheckedMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beSuccessfulTry[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.TrySuccessCheckedMatcher[T]", "kind" : "def"}, {"label" : "aSuccessfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.aSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#aSuccessfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "successfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.successfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#successfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "beASuccessfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beASuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beASuccessfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "beSuccessfulTry", "tail" : "(): TrySuccessMatcher[T]", "member" : "org.specs2.matcher.TryBaseMatchers.beSuccessfulTry", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beSuccessfulTry[T]:org.specs2.matcher.TrySuccessMatcher[T]", "kind" : "def"}, {"label" : "left", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): LeftMatcher[Nothing]", "member" : "org.specs2.matcher.EitherBaseMatchers.left", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#left[T<:<?>](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.LeftMatcher[Nothing]", "kind" : "def"}, {"label" : "left", "tail" : "(t: ValueCheck[T]): LeftCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.left", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#left[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.LeftCheckedMatcher[T]", "kind" : "def"}, {"label" : "left", "tail" : "(t: T)(arg0: Diffable[T]): LeftCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.left", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#left[T](t:T)(implicitevidence$2:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.LeftCheckedMatcher[T]", "kind" : "def"}, {"label" : "beLeft", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): LeftMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beLeft", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beLeft[T](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.LeftMatcher[T]", "kind" : "def"}, {"label" : "beLeft", "tail" : "(t: ValueCheck[T]): LeftCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beLeft", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beLeft[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.LeftCheckedMatcher[T]", "kind" : "def"}, {"label" : "right", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): RightMatcher[Nothing]", "member" : "org.specs2.matcher.EitherBaseMatchers.right", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#right[T<:<?>](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.RightMatcher[Nothing]", "kind" : "def"}, {"label" : "right", "tail" : "(t: ValueCheck[T]): RightCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.right", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#right[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.RightCheckedMatcher[T]", "kind" : "def"}, {"label" : "right", "tail" : "(t: T)(arg0: Diffable[T]): RightCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.right", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#right[T](t:T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.RightCheckedMatcher[T]", "kind" : "def"}, {"label" : "beRight", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): RightMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beRight", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beRight[T](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.RightMatcher[T]", "kind" : "def"}, {"label" : "beRight", "tail" : "(t: ValueCheck[T]): RightCheckedMatcher[T]", "member" : "org.specs2.matcher.EitherBaseMatchers.beRight", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beRight[T](t:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.RightCheckedMatcher[T]", "kind" : "def"}, {"label" : "downcastBeEqualTypedValueCheck", "tail" : "(check: BeEqualTypedValueCheck[T]): ValueCheck[S]", "member" : "org.specs2.matcher.ValueChecks.downcastBeEqualTypedValueCheck", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#downcastBeEqualTypedValueCheck[T,S>:T](check:org.specs2.matcher.BeEqualTypedValueCheck[T]):org.specs2.matcher.ValueCheck[S]", "kind" : "implicit def"}, {"label" : "partialfunctionIsValueCheck", "tail" : "(f: PartialFunction[T, R])(arg0: AsResult[R]): ValueCheck[T]", "member" : "org.specs2.matcher.ValueChecks.partialfunctionIsValueCheck", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#partialfunctionIsValueCheck[T,R](f:PartialFunction[T,R])(implicitevidence$2:org.specs2.execute.AsResult[R]):org.specs2.matcher.ValueCheck[T]", "kind" : "implicit def"}, {"label" : "valueIsTypedValueCheck", "tail" : "(expected: T)(di: Diffable[T]): BeEqualTypedValueCheck[T]", "member" : "org.specs2.matcher.ValueChecksBase.valueIsTypedValueCheck", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#valueIsTypedValueCheck[T](expected:T)(implicitdi:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.BeEqualTypedValueCheck[T]", "kind" : "def"}, {"label" : "matcherIsValueCheck", "tail" : "(m: Matcher[T]): ValueCheck[T]", "member" : "org.specs2.matcher.ValueChecksBase.matcherIsValueCheck", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherIsValueCheck[T](m:org.specs2.matcher.Matcher[T]):org.specs2.matcher.ValueCheck[T]", "kind" : "implicit def"}, {"label" : "toOptionResultMatcher", "tail" : "(result: MatchResult[Option[T]]): OptionResultMatcher[T]", "member" : "org.specs2.matcher.OptionBeHaveMatchers.toOptionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toOptionResultMatcher[T](result:org.specs2.matcher.MatchResult[Option[T]]):OptionBeHaveMatchers.this.OptionResultMatcher[T]", "kind" : "implicit def"}, {"label" : "asNoneAs", "tail" : "(other: => Option[T]): Matcher[Option[T]]", "member" : "org.specs2.matcher.OptionBaseMatchers.asNoneAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#asNoneAs[T](other:=>Option[T]):org.specs2.matcher.Matcher[Option[T]]", "kind" : "def"}, {"label" : "beAsNoneAs", "tail" : "(other: => Option[T]): Matcher[Option[T]]", "member" : "org.specs2.matcher.OptionBaseMatchers.beAsNoneAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beAsNoneAs[T](other:=>Option[T]):org.specs2.matcher.Matcher[Option[T]]", "kind" : "def"}, {"label" : "none", "tail" : "(): Matcher[Option[Any]]", "member" : "org.specs2.matcher.OptionBaseMatchers.none", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#none:org.specs2.matcher.Matcher[Option[Any]]", "kind" : "def"}, {"label" : "beNone", "tail" : "(): Matcher[Option[Any]]", "member" : "org.specs2.matcher.OptionBaseMatchers.beNone", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beNone:org.specs2.matcher.Matcher[Option[Any]]", "kind" : "def"}, {"label" : "some", "tail" : "(): SomeMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.some", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#some[T]:org.specs2.matcher.SomeMatcher[T]", "kind" : "def"}, {"label" : "beSome", "tail" : "(p: org.specs2.control.ImplicitParameters.ImplicitParam): SomeMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.beSome", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beSome[T](implicitp:org.specs2.control.ImplicitParameters.ImplicitParam):org.specs2.matcher.SomeMatcher[T]", "kind" : "def"}, {"label" : "some", "tail" : "(check: ValueCheck[T]): SomeCheckedMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.some", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#some[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.SomeCheckedMatcher[T]", "kind" : "def"}, {"label" : "some", "tail" : "(t: T)(arg0: Diffable[T]): SomeCheckedMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.some", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#some[T](t:T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.SomeCheckedMatcher[T]", "kind" : "def"}, {"label" : "beSome", "tail" : "(check: ValueCheck[T]): SomeCheckedMatcher[T]", "member" : "org.specs2.matcher.OptionBaseMatchers.beSome", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beSome[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.SomeCheckedMatcher[T]", "kind" : "def"}, {"label" : "ToDelta", "tail" : "(n: S)(arg0: Numeric[S]): CanHaveDelta[S]", "member" : "org.specs2.matcher.NumericMatchers.ToDelta", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ToDelta[S](n:S)(implicitevidence$1:Numeric[S]):org.specs2.matcher.CanHaveDelta[S]", "kind" : "implicit def"}, {"label" : "toNeutralMatcherNumeric", "tail" : "(result: NeutralMatcher[Any]): NeutralMatcherNumeric", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toNeutralMatcherNumeric", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toNeutralMatcherNumeric(result:org.specs2.matcher.NeutralMatcher[Any]):NumericBeHaveMatchers.this.NeutralMatcherNumeric", "kind" : "implicit def"}, {"label" : "toNeutralMatcherOrdered", "tail" : "(result: NeutralMatcher[Any]): NeutralMatcherOrdered", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toNeutralMatcherOrdered", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toNeutralMatcherOrdered(result:org.specs2.matcher.NeutralMatcher[Any]):NumericBeHaveMatchers.this.NeutralMatcherOrdered", "kind" : "implicit def"}, {"label" : "toNumericResultMatcher", "tail" : "(result: MatchResult[S])(arg0: Numeric[S]): NumericResultMatcher[S]", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toNumericResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toNumericResultMatcher[S](result:org.specs2.matcher.MatchResult[S])(implicitevidence$36:Numeric[S]):NumericBeHaveMatchers.this.NumericResultMatcher[S]", "kind" : "implicit def"}, {"label" : "toOrderedResultMatcher", "tail" : "(result: MatchResult[S])(arg0: (S) => Ordered[S]): OrderedResultMatcher[S]", "member" : "org.specs2.matcher.NumericBeHaveMatchers.toOrderedResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toOrderedResultMatcher[S](result:org.specs2.matcher.MatchResult[S])(implicitevidence$34:S=>Ordered[S]):NumericBeHaveMatchers.this.OrderedResultMatcher[S]", "kind" : "implicit def"}, {"label" : "be]", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.be]", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be][T](t1:T,t2:T)(implicitevidence$32:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "be[", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.be[", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be[[T](t1:T,t2:T)(implicitevidence$31:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "between", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.between", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#between[T](t1:T,t2:T)(implicitevidence$30:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "beBetween", "tail" : "(t1: T, t2: T)(arg0: (T) => Ordered[T]): BetweenMatcher[T]", "member" : "org.specs2.matcher.NumericBaseMatchers.beBetween", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beBetween[T](t1:T,t2:T)(implicitevidence$29:T=>Ordered[T]):org.specs2.matcher.BetweenMatcher[T]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(target: SignificantTarget[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#closeTo[S](target:org.specs2.matcher.SignificantTarget[S])(implicitevidence$28:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(target: S, figures: SignificantFigures)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#closeTo[S](target:S,figures:org.specs2.matcher.SignificantFigures)(implicitevidence$27:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(target: SignificantTarget[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beCloseTo[S](target:org.specs2.matcher.SignificantTarget[S])(implicitevidence$26:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(target: S, figures: SignificantFigures)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beCloseTo[S](target:S,figures:org.specs2.matcher.SignificantFigures)(implicitevidence$25:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "~", "tail" : "(delta: PlusOrMinus[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.~", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#~[S](delta:org.specs2.matcher.PlusOrMinus[S])(implicitevidence$24:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "~", "tail" : "(n: S)(delta: S)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.~", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#~[S](n:S)(delta:S)(implicitevidence$23:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(delta: PlusOrMinus[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#closeTo[S](delta:org.specs2.matcher.PlusOrMinus[S])(implicitevidence$22:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(delta: PlusOrMinus[S])(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beCloseTo[S](delta:org.specs2.matcher.PlusOrMinus[S])(implicitevidence$21:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "closeTo", "tail" : "(n: S, delta: S)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.closeTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#closeTo[S](n:S,delta:S)(implicitevidence$20:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beCloseTo", "tail" : "(n: S, delta: S)(arg0: Numeric[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beCloseTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beCloseTo[S](n:S,delta:S)(implicitevidence$19:Numeric[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : ">", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.>", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#>[S](n:S)(implicitevidence$18:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "be_>", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_>", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be_>[S](n:S)(implicitevidence$17:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "greaterThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.greaterThan", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#greaterThan[S](n:S)(implicitevidence$16:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beGreaterThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beGreaterThan", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beGreaterThan[S](n:S)(implicitevidence$15:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : ">=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.>=", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#>=[S](n:S)(implicitevidence$14:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "be_>=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_>=", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be_>=[S](n:S)(implicitevidence$13:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "greaterThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.greaterThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#greaterThanOrEqualTo[S](n:S)(implicitevidence$12:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "beGreaterThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): Matcher[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beGreaterThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beGreaterThanOrEqualTo[S](n:S)(implicitevidence$11:S=>Ordered[S]):org.specs2.matcher.Matcher[S]", "kind" : "def"}, {"label" : "<", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.<", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#<[S](n:S)(implicitevidence$10:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "be_<", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_<", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be_<[S](n:S)(implicitevidence$9:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "lessThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.lessThan", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#lessThan[S](n:S)(implicitevidence$8:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "beLessThan", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThan[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beLessThan", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beLessThan[S](n:S)(implicitevidence$7:S=>Ordered[S]):org.specs2.matcher.BeLessThan[S]", "kind" : "def"}, {"label" : "<=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.<=", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#<=[S](n:S)(implicitevidence$6:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "be_<=", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.be_<=", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be_<=[S](n:S)(implicitevidence$5:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "lessThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.lessThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#lessThanOrEqualTo[S](n:S)(implicitevidence$4:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "beLessThanOrEqualTo", "tail" : "(n: S)(arg0: (S) => Ordered[S]): BeLessThanOrEqualTo[S]", "member" : "org.specs2.matcher.NumericBaseMatchers.beLessThanOrEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beLessThanOrEqualTo[S](n:S)(implicitevidence$3:S=>Ordered[S]):org.specs2.matcher.BeLessThanOrEqualTo[S]", "kind" : "def"}, {"label" : "throwAn", "tail" : "(e: E): ExceptionMatcher[E]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwAn", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#throwAn[E<:Throwable](e:E):ExceptionBaseMatchers.this.ExceptionMatcher[E]", "kind" : "def"}, {"label" : "throwAn", "tail" : "(message: String)(m: ClassTag[E]): Matcher[Any]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwAn", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#throwAn[E<:Throwable](message:String)(implicitm:scala.reflect.ClassTag[E]):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "throwAn", "tail" : "(m: ClassTag[E]): ExceptionClassMatcher", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwAn", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#throwAn[E<:Throwable](implicitm:scala.reflect.ClassTag[E]):ExceptionBaseMatchers.this.ExceptionClassMatcher", "kind" : "def"}, {"label" : "throwA", "tail" : "(e: E): ExceptionMatcher[E]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwA", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#throwA[E<:Throwable](e:E):ExceptionBaseMatchers.this.ExceptionMatcher[E]", "kind" : "def"}, {"label" : "throwA", "tail" : "(message: String)(m: ClassTag[E]): Matcher[Any]", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwA", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#throwA[E<:Throwable](message:String)(implicitm:scala.reflect.ClassTag[E]):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "throwA", "tail" : "(m: ClassTag[E]): ExceptionClassMatcher", "member" : "org.specs2.matcher.ExceptionBaseMatchers.throwA", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#throwA[E<:Throwable](implicitm:scala.reflect.ClassTag[E]):ExceptionBaseMatchers.this.ExceptionClassMatcher", "kind" : "def"}, {"label" : "stringMatcher", "tail" : "(m: AdaptableMatcher[Any]): StringMatcher", "member" : "org.specs2.matcher.StringMatchers.stringMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stringMatcher(m:org.specs2.matcher.AdaptableMatcher[Any]):org.specs2.matcher.StringMatcher", "kind" : "implicit def"}, {"label" : "endingWith", "tail" : "(s: => String): Matcher[String]", "member" : "org.specs2.matcher.StringBeHaveMatchers.endingWith", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#endingWith(s:=>String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "startingWith", "tail" : "(s: => String): Matcher[String]", "member" : "org.specs2.matcher.StringBeHaveMatchers.startingWith", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#startingWith(s:=>String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "containing", "tail" : "(s: String): Matcher[String]", "member" : "org.specs2.matcher.StringBeHaveMatchers.containing", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#containing(s:String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "matching", "tail" : "(r: Regex): BeMatchingRegex", "member" : "org.specs2.matcher.StringBeHaveMatchers.matching", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matching(r:scala.util.matching.Regex):org.specs2.matcher.BeMatchingRegex", "kind" : "def"}, {"label" : "matching", "tail" : "(t: Pattern): BeMatchingPattern", "member" : "org.specs2.matcher.StringBeHaveMatchers.matching", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matching(t:java.util.regex.Pattern):org.specs2.matcher.BeMatchingPattern", "kind" : "def"}, {"label" : "matching", "tail" : "(t: => String): BeMatching", "member" : "org.specs2.matcher.StringBeHaveMatchers.matching", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matching(t:=>String):org.specs2.matcher.BeMatching", "kind" : "def"}, {"label" : "toNotStringMatcher", "tail" : "(result: NotMatcher[Any]): NotStringMatcher", "member" : "org.specs2.matcher.StringBeHaveMatchers.toNotStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toNotStringMatcher(result:org.specs2.matcher.NotMatcher[Any]):StringBeHaveMatchers.this.NotStringMatcher", "kind" : "implicit def"}, {"label" : "toNeutralStringMatcher", "tail" : "(result: NeutralMatcher[Any]): NeutralStringMatcher", "member" : "org.specs2.matcher.StringBeHaveMatchers.toNeutralStringMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toNeutralStringMatcher(result:org.specs2.matcher.NeutralMatcher[Any]):StringBeHaveMatchers.this.NeutralStringMatcher", "kind" : "implicit def"}, {"label" : "toStringResultMatcher", "tail" : "(result: MatchResult[String]): StringResultMatcher", "member" : "org.specs2.matcher.StringBeHaveMatchers.toStringResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toStringResultMatcher(result:org.specs2.matcher.MatchResult[String]):StringBeHaveMatchers.this.StringResultMatcher", "kind" : "implicit def"}, {"label" : "find", "tail" : "(r: Regex): FindMatcherRegex", "member" : "org.specs2.matcher.StringBaseMatchers.find", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#find(r:scala.util.matching.Regex):StringBaseMatchers.this.FindMatcherRegex", "kind" : "def"}, {"label" : "find", "tail" : "(p: Pattern): FindMatcherPattern", "member" : "org.specs2.matcher.StringBaseMatchers.find", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#find(p:java.util.regex.Pattern):StringBaseMatchers.this.FindMatcherPattern", "kind" : "def"}, {"label" : "find", "tail" : "(a: => String): FindMatcher", "member" : "org.specs2.matcher.StringBaseMatchers.find", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#find(a:=>String):StringBaseMatchers.this.FindMatcher", "kind" : "def"}, {"label" : "endWith", "tail" : "(t: => String): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.endWith", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#endWith(t:=>String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "startWith", "tail" : "(a: String): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.startWith", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#startWith(a:String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "=~", "tail" : "(r: Regex): BeMatchingRegex", "member" : "org.specs2.matcher.StringBaseMatchers.=~", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#=~(r:scala.util.matching.Regex):org.specs2.matcher.BeMatchingRegex", "kind" : "def"}, {"label" : "=~", "tail" : "(p: Pattern): BeMatchingPattern", "member" : "org.specs2.matcher.StringBaseMatchers.=~", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#=~(p:java.util.regex.Pattern):org.specs2.matcher.BeMatchingPattern", "kind" : "def"}, {"label" : "=~", "tail" : "(t: => String): BeMatching", "member" : "org.specs2.matcher.StringBaseMatchers.=~", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#=~(t:=>String):org.specs2.matcher.BeMatching", "kind" : "def"}, {"label" : "beMatching", "tail" : "(a: Regex): BeMatchingRegex", "member" : "org.specs2.matcher.StringBaseMatchers.beMatching", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beMatching(a:scala.util.matching.Regex):org.specs2.matcher.BeMatchingRegex", "kind" : "def"}, {"label" : "beMatching", "tail" : "(a: Pattern): BeMatchingPattern", "member" : "org.specs2.matcher.StringBaseMatchers.beMatching", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beMatching(a:java.util.regex.Pattern):org.specs2.matcher.BeMatchingPattern", "kind" : "def"}, {"label" : "beMatching", "tail" : "(a: => String): BeMatching", "member" : "org.specs2.matcher.StringBaseMatchers.beMatching", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beMatching(a:=>String):org.specs2.matcher.BeMatching", "kind" : "def"}, {"label" : "contain", "tail" : "(t: Char): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain(t:Char):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "contain", "tail" : "(t: String): Matcher[String]", "member" : "org.specs2.matcher.StringBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain(t:String):org.specs2.matcher.Matcher[String]", "kind" : "def"}, {"label" : "!=\/", "tail" : "(s: String): Matcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.!=\/", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#!=\/(s:String):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "be_!=\/", "tail" : "(a: String): Matcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.be_!=\/", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be_!=\/(a:String):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "be_==\/", "tail" : "(a: String): AdaptableMatcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.be_==\/", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be_==\/(a:String):org.specs2.matcher.AdaptableMatcher[Any]", "kind" : "def"}, {"label" : "==\/", "tail" : "(s: String): AdaptableMatcher[Any]", "member" : "org.specs2.matcher.StringBaseMatchers.==\/", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#==\/(s:String):org.specs2.matcher.AdaptableMatcher[Any]", "kind" : "def"}, {"label" : "definedBy", "tail" : "(values: (K, V)*): Matcher[PartialFunction[K, V]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.definedBy", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#definedBy[K,V](values:(K,V)*):org.specs2.matcher.Matcher[PartialFunction[K,V]]", "kind" : "def"}, {"label" : "definedAt", "tail" : "(values: K*): Matcher[PartialFunction[K, Any]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.definedAt", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#definedAt[K](values:K*):org.specs2.matcher.Matcher[PartialFunction[K,Any]]", "kind" : "def"}, {"label" : "pairs", "tail" : "(pairs: (K, V)*): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.pairs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#pairs[K,V](pairs:(K,V)*):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "pair", "tail" : "(p: (K, V)): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.pair", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#pair[K,V](p:(K,V)):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "values", "tail" : "(vs: V*): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.values", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#values[V](vs:V*):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "value", "tail" : "(v: V): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.value", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#value[V](v:V):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "keys", "tail" : "(ks: K*): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.keys", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#keys[K](ks:K*):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "key", "tail" : "(k: K): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBeHaveMatchers.key", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#key[K](k:K):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "toPartialFunctionResultMatcher", "tail" : "(result: MatchResult[PartialFunction[K, V]]): PartialFunctionResultMatcher[K, V]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toPartialFunctionResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toPartialFunctionResultMatcher[K,V](result:org.specs2.matcher.MatchResult[PartialFunction[K,V]]):MapBeHaveMatchers.this.PartialFunctionResultMatcher[K,V]", "kind" : "implicit def"}, {"label" : "toMapResultMatcher", "tail" : "(result: MatchResult[Iterable[(K, V)]]): MapResultMatcher[K, V]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toMapResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toMapResultMatcher[K,V](result:org.specs2.matcher.MatchResult[Iterable[(K,V)]]):MapBeHaveMatchers.this.MapResultMatcher[K,V]", "kind" : "implicit def"}, {"label" : "toMapValueResultMatcher", "tail" : "(result: MatchResult[Iterable[(Any, V)]]): MapValueResultMatcher[V]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toMapValueResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toMapValueResultMatcher[V](result:org.specs2.matcher.MatchResult[Iterable[(Any,V)]]):MapBeHaveMatchers.this.MapValueResultMatcher[V]", "kind" : "implicit def"}, {"label" : "toMapKeyResultMatcher", "tail" : "(result: MatchResult[Iterable[(K, Any)]]): MapKeyResultMatcher[K]", "member" : "org.specs2.matcher.MapBeHaveMatchers.toMapKeyResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toMapKeyResultMatcher[K](result:org.specs2.matcher.MatchResult[Iterable[(K,Any)]]):MapBeHaveMatchers.this.MapKeyResultMatcher[K]", "kind" : "implicit def"}, {"label" : "beDefinedBy", "tail" : "(values: (K, V)*): Matcher[PartialFunction[K, V]]", "member" : "org.specs2.matcher.MapBaseMatchers.beDefinedBy", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beDefinedBy[K,V](values:(K,V)*):org.specs2.matcher.Matcher[PartialFunction[K,V]]", "kind" : "def"}, {"label" : "beDefinedAt", "tail" : "(values: K*): Matcher[PartialFunction[K, Any]]", "member" : "org.specs2.matcher.MapBaseMatchers.beDefinedAt", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beDefinedAt[K](values:K*):org.specs2.matcher.Matcher[PartialFunction[K,Any]]", "kind" : "def"}, {"label" : "havePairs", "tail" : "(pairs: (K, V)*): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.havePairs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#havePairs[K,V](pairs:(K,V)*):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "havePair", "tail" : "(p: (K, V)): Matcher[Iterable[(K, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.havePair", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#havePair[K,V](p:(K,V)):org.specs2.matcher.Matcher[Iterable[(K,V)]]", "kind" : "def"}, {"label" : "haveValues", "tail" : "(values: V*): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveValues", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#haveValues[V](values:V*):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "haveValue", "tail" : "(v: V): Matcher[Iterable[(Any, V)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveValue", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#haveValue[V](v:V):org.specs2.matcher.Matcher[Iterable[(Any,V)]]", "kind" : "def"}, {"label" : "haveKeys", "tail" : "(keys: K*): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveKeys", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#haveKeys[K](keys:K*):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "haveKey", "tail" : "(k: K): Matcher[Iterable[(K, Any)]]", "member" : "org.specs2.matcher.MapBaseMatchers.haveKey", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#haveKey[K](k:K):org.specs2.matcher.Matcher[Iterable[(K,Any)]]", "kind" : "def"}, {"label" : "implicitParameter10", "tail" : ": ImplicitParam10", "member" : "org.specs2.control.ImplicitParameters.implicitParameter10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitParameter10:ImplicitParameters.this.ImplicitParam10", "kind" : "implicit lazy val"}, {"label" : "implicitParameter9", "tail" : ": ImplicitParam9", "member" : "org.specs2.control.ImplicitParameters.implicitParameter9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitParameter9:ImplicitParameters.this.ImplicitParam9", "kind" : "implicit lazy val"}, {"label" : "implicitParameter8", "tail" : ": ImplicitParam8", "member" : "org.specs2.control.ImplicitParameters.implicitParameter8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitParameter8:ImplicitParameters.this.ImplicitParam8", "kind" : "implicit lazy val"}, {"label" : "implicitParameter7", "tail" : ": ImplicitParam7", "member" : "org.specs2.control.ImplicitParameters.implicitParameter7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitParameter7:ImplicitParameters.this.ImplicitParam7", "kind" : "implicit lazy val"}, {"label" : "implicitParameter6", "tail" : ": ImplicitParam6", "member" : "org.specs2.control.ImplicitParameters.implicitParameter6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitParameter6:ImplicitParameters.this.ImplicitParam6", "kind" : "implicit lazy val"}, {"label" : "implicitParameter5", "tail" : ": ImplicitParam5", "member" : "org.specs2.control.ImplicitParameters.implicitParameter5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitParameter5:ImplicitParameters.this.ImplicitParam5", "kind" : "implicit lazy val"}, {"label" : "implicitParameter4", "tail" : ": ImplicitParam4", "member" : "org.specs2.control.ImplicitParameters.implicitParameter4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitParameter4:ImplicitParameters.this.ImplicitParam4", "kind" : "implicit lazy val"}, {"label" : "implicitParameter3", "tail" : ": ImplicitParam3", "member" : "org.specs2.control.ImplicitParameters.implicitParameter3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitParameter3:ImplicitParameters.this.ImplicitParam3", "kind" : "implicit lazy val"}, {"label" : "implicitParameter2", "tail" : ": ImplicitParam2", "member" : "org.specs2.control.ImplicitParameters.implicitParameter2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitParameter2:ImplicitParameters.this.ImplicitParam2", "kind" : "implicit lazy val"}, {"label" : "implicitParameter1", "tail" : ": ImplicitParam1", "member" : "org.specs2.control.ImplicitParameters.implicitParameter1", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitParameter1:ImplicitParameters.this.ImplicitParam1", "kind" : "implicit lazy val"}, {"label" : "implicitParameter", "tail" : ": ImplicitParam", "member" : "org.specs2.control.ImplicitParameters.implicitParameter", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#implicitParameter:ImplicitParameters.this.ImplicitParam", "kind" : "implicit lazy val"}, {"label" : "matcherSeqIsContainCheckSeq", "tail" : "(seq: Seq[Matcher[T]]): Seq[ValueCheck[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchersLowImplicits.matcherSeqIsContainCheckSeq", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherSeqIsContainCheckSeq[T](seq:Seq[org.specs2.matcher.Matcher[T]]):Seq[org.specs2.matcher.ValueCheck[T]]", "kind" : "implicit def"}, {"label" : "checkableSeqIsContainCheckSeq", "tail" : "(seq: Seq[T])(to: (T) => ValueCheck[T]): Seq[ValueCheck[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchersLowImplicits.checkableSeqIsContainCheckSeq", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#checkableSeqIsContainCheckSeq[T](seq:Seq[T])(implicitto:T=>org.specs2.matcher.ValueCheck[T]):Seq[org.specs2.matcher.ValueCheck[T]]", "kind" : "implicit def"}, {"label" : "functionIsValueCheck", "tail" : "(f: (T) => R)(arg0: AsResult[R]): ValueCheck[T]", "member" : "org.specs2.matcher.ValueChecksLowImplicits.functionIsValueCheck", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionIsValueCheck[T,R](f:T=>R)(implicitevidence$3:org.specs2.execute.AsResult[R]):org.specs2.matcher.ValueCheck[T]", "kind" : "implicit def"}, {"label" : "orderedSeqMatchResult", "tail" : "(result: MatchResult[Seq[T]])(arg0: Ordering[T]): OrderedSeqMatchResult[T]", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.orderedSeqMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#orderedSeqMatchResult[T](result:org.specs2.matcher.MatchResult[Seq[T]])(implicitevidence$14:Ordering[T]):TraversableBeHaveMatchers.this.OrderedSeqMatchResult[T]", "kind" : "implicit def"}, {"label" : "sized", "tail" : "(s: MatchResult[T])(arg0: Sized[T]): HasSize[T]", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.sized", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#sized[T](s:org.specs2.matcher.MatchResult[T])(implicitevidence$12:org.specs2.data.Sized[T]):TraversableBeHaveMatchers.this.HasSize[T]", "kind" : "implicit def"}, {"label" : "traversable", "tail" : "(s: MatchResult[Traversable[T]]): TraversableBeHaveMatchers[T]", "member" : "org.specs2.matcher.TraversableBeHaveMatchers.traversable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#traversable[T](s:org.specs2.matcher.MatchResult[collection.Traversable[T]]):TraversableBeHaveMatchers.this.TraversableBeHaveMatchers[T]", "kind" : "implicit def"}, {"label" : "lazyParameter", "tail" : "(value: => T): LazyParameter[T]", "member" : "org.specs2.control.LazyParameters.lazyParameter", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#lazyParameter[T](value:=>T):org.specs2.control.LazyParameter[T]", "kind" : "implicit def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T], t20: ValueCheck[T], t21: ValueCheck[T], t22: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T],t20:org.specs2.matcher.ValueCheck[T],t21:org.specs2.matcher.ValueCheck[T],t22:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T], t20: ValueCheck[T], t21: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T],t20:org.specs2.matcher.ValueCheck[T],t21:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T], t20: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T],t20:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T], t19: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T],t19:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T], t18: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T],t18:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T], t17: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T],t17:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T], t16: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T],t16:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T], t15: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T],t15:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T], t14: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T],t14:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T], t13: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T],t13:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T], t12: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T],t12:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T], t11: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T],t11:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T], t10: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T],t10:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T], t9: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T],t9:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T], t8: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T],t8:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T], t7: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T],t7:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T], t6: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T],t6:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T], t5: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T],t5:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T], t4: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T],t4:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T], t3: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T],t3:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(t1: ValueCheck[T], t2: ValueCheck[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](t1:org.specs2.matcher.ValueCheck[T],t2:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "sorted", "tail" : "(arg0: Ordering[T]): OrderingMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.sorted", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#sorted[T](implicitevidence$11:Ordering[T]):org.specs2.matcher.OrderingMatcher[T]", "kind" : "def"}, {"label" : "beSorted", "tail" : "(arg0: Ordering[T]): OrderingMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.beSorted", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beSorted[T](implicitevidence$10:Ordering[T]):org.specs2.matcher.OrderingMatcher[T]", "kind" : "def"}, {"label" : "length", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.length", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#length[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$9:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "haveLength", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveLength", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#haveLength[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$8:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "size", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.size", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#size[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$7:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "haveSize", "tail" : "(check: ValueCheck[Int])(arg0: Sized[T]): SizedCheckedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveSize", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#haveSize[T](check:org.specs2.matcher.ValueCheck[Int])(implicitevidence$6:org.specs2.data.Sized[T]):org.specs2.matcher.SizedCheckedMatcher[T]", "kind" : "def"}, {"label" : "length", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.length", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#length[T](n:Int)(implicitevidence$5:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "haveLength", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveLength", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#haveLength[T](n:Int)(implicitevidence$4:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "size", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.size", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#size[T](n:Int)(implicitevidence$3:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "haveSize", "tail" : "(n: Int)(arg0: Sized[T]): SizedMatcher[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.haveSize", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#haveSize[T](n:Int)(implicitevidence$2:org.specs2.data.Sized[T]):org.specs2.matcher.SizedMatcher[T]", "kind" : "def"}, {"label" : "containTheSameElementsAs", "tail" : "(seq: Seq[T], equality: (T, T) => Boolean): Matcher[Traversable[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containTheSameElementsAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#containTheSameElementsAs[T](seq:Seq[T],equality:(T,T)=>Boolean):org.specs2.matcher.Matcher[collection.Traversable[T]]", "kind" : "def"}, {"label" : "containPattern", "tail" : "(t: => String): Matcher[Traversable[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containPattern", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#containPattern[T](t:=>String):org.specs2.matcher.Matcher[collection.Traversable[T]]", "kind" : "def"}, {"label" : "containMatch", "tail" : "(t: => String): Matcher[Traversable[T]]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containMatch", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#containMatch[T](t:=>String):org.specs2.matcher.Matcher[collection.Traversable[T]]", "kind" : "def"}, {"label" : "containAnyOf", "tail" : "(seq: Seq[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containAnyOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#containAnyOf[T](seq:Seq[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "containAllOf", "tail" : "(seq: Seq[T])(arg0: Diffable[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.containAllOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#containAllOf[T](seq:Seq[T])(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.atMost", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atMost[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.atLeast", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atLeast[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "exactly", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.exactly", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#exactly[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "eachOf", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.eachOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#eachOf[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "allOf", "tail" : "(checks: ValueCheck[T]*): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.allOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#allOf[T](checks:org.specs2.matcher.ValueCheck[T]*):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(cm: ContainWithResultSeq[T]): ContainWithResultSeq[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](cm:org.specs2.matcher.ContainWithResultSeq[T]):org.specs2.matcher.ContainWithResultSeq[T]", "kind" : "def"}, {"label" : "contain", "tail" : "(check: ValueCheck[T]): ContainWithResult[T]", "member" : "org.specs2.matcher.TraversableBaseMatchers.contain", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#contain[T](check:org.specs2.matcher.ValueCheck[T]):org.specs2.matcher.ContainWithResult[T]", "kind" : "def"}, {"label" : "anInstanceOf", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anInstanceOf[T](implicitevidence$22:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "assignableFrom", "tail" : "(arg0: ClassTag[T]): Matcher[Class[_]]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.assignableFrom", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#assignableFrom[T](implicitevidence$21:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[Class[_]]", "kind" : "def"}, {"label" : "interface", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.interface", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#interface[T](implicitevidence$20:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "superClass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.superClass", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#superClass[T](implicitevidence$19:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "klass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.klass", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#klass[T](implicitevidence$18:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "anyOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anyOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.oneOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#oneOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.empty", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#empty[T<:Any{defisEmpty:Boolean}]:org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "likeA", "tail" : "(pattern: => PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.likeA", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#likeA[T](pattern:=>PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beLikeA", "tail" : "(pattern: => PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.beLikeA", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beLikeA[T](pattern:=>PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "like", "tail" : "(pattern: => PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.like", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#like[T](pattern:=>PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "asNullAs", "tail" : "(a: => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.asNullAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#asNullAs[T](a:=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "toBeLikeResultMatcher", "tail" : "(result: MatchResult[T]): BeLikeResultMatcher[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toBeLikeResultMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toBeLikeResultMatcher[T](result:org.specs2.matcher.MatchResult[T]):AnyBeHaveMatchers.this.BeLikeResultMatcher[T]", "kind" : "implicit def"}, {"label" : "anyWithEmpty", "tail" : "(result: MatchResult[T])(arg0: (T) => Any { def isEmpty: Boolean }): AnyWithEmptyMatchers[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anyWithEmpty", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyWithEmpty[T](result:org.specs2.matcher.MatchResult[T])(implicitevidence$16:T=>Any{defisEmpty:Boolean}):AnyBeHaveMatchers.this.AnyWithEmptyMatchers[T]", "kind" : "implicit def"}, {"label" : "toClassMatcherResult", "tail" : "(result: MatchResult[Class[_]]): ClassMatcherResult", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toClassMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toClassMatcherResult(result:org.specs2.matcher.MatchResult[Class[_]]):AnyBeHaveMatchers.this.ClassMatcherResult", "kind" : "implicit def"}, {"label" : "toAnyMatcherResult", "tail" : "(result: MatchResult[AnyRef]): AnyMatcherResult", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toAnyMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toAnyMatcherResult(result:org.specs2.matcher.MatchResult[AnyRef]):AnyBeHaveMatchers.this.AnyMatcherResult", "kind" : "implicit def"}, {"label" : "toAnyRefMatcherResult", "tail" : "(result: MatchResult[T]): AnyRefMatcherResult[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.toAnyRefMatcherResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toAnyRefMatcherResult[T<:AnyRef](result:org.specs2.matcher.MatchResult[T]):AnyBeHaveMatchers.this.AnyRefMatcherResult[T]", "kind" : "implicit def"}, {"label" : "anyBeHaveMatcher", "tail" : "(result: MatchResult[T]): AnyBeHaveMatchers[T]", "member" : "org.specs2.matcher.AnyBeHaveMatchers.anyBeHaveMatcher", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyBeHaveMatcher[T](result:org.specs2.matcher.MatchResult[T]):AnyBeHaveMatchers.this.AnyBeHaveMatchers[T]", "kind" : "implicit def"}, {"label" : "not", "tail" : "(): NotMatcher[Any]", "member" : "org.specs2.matcher.BeHaveMatchers.not", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#not:org.specs2.matcher.NotMatcher[Any]", "kind" : "def"}, {"label" : "have", "tail" : "(): NeutralMatcher[Any]", "member" : "org.specs2.matcher.BeHaveMatchers.have", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#have:org.specs2.matcher.NeutralMatcher[Any]", "kind" : "def"}, {"label" : "be", "tail" : "(): NeutralMatcher[Any]", "member" : "org.specs2.matcher.BeHaveMatchers.be", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be:org.specs2.matcher.NeutralMatcher[Any]", "kind" : "def"}, {"label" : "beAnInstanceOf", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAnInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beAnInstanceOf[T](implicitevidence$13:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "beAssignableFrom", "tail" : "(arg0: ClassTag[T]): Matcher[Class[_]]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAssignableFrom", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beAssignableFrom[T](implicitevidence$12:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[Class[_]]", "kind" : "def"}, {"label" : "haveInterface", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.haveInterface", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#haveInterface[T](implicitevidence$11:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "haveSuperclass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.haveSuperclass", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#haveSuperclass[T](implicitevidence$10:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "haveClass", "tail" : "(arg0: ClassTag[T]): Matcher[AnyRef]", "member" : "org.specs2.matcher.AnyBaseMatchers.haveClass", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#haveClass[T](implicitevidence$9:scala.reflect.ClassTag[T]):org.specs2.matcher.Matcher[AnyRef]", "kind" : "def"}, {"label" : "beLike", "tail" : "(pattern: PartialFunction[T, MatchResult[_]]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beLike", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beLike[T](pattern:PartialFunction[T,org.specs2.matcher.MatchResult[_]]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beAnyOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAnyOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beAnyOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beOneOf", "tail" : "(t: T*): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beOneOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beOneOf[T](t:T*):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beAsNullAs", "tail" : "(a: => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beAsNullAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beAsNullAs[T](a:=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "beNull", "tail" : "(): BeNull[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beNull", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beNull[T]:org.specs2.matcher.BeNull[T]", "kind" : "def"}, {"label" : "beEmpty", "tail" : "(arg0: (T) => Any { def isEmpty: Boolean }): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beEmpty", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beEmpty[T](implicitevidence$8:T=>Any{defisEmpty:Boolean}):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "not", "tail" : "(m: Matcher[T]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.not", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#not[T](m:org.specs2.matcher.Matcher[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "==~", "tail" : "(s: => S)(arg0: Diffable[T], convert: (S) => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.==~", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#==~[T,S](s:=>S)(implicitevidence$7:org.specs2.matcher.describe.Diffable[T],implicitconvert:S=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "be_==~", "tail" : "(s: => S)(arg0: Diffable[T], convert: (S) => T): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_==~", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be_==~[T,S](s:=>S)(implicitevidence$6:org.specs2.matcher.describe.Diffable[T],implicitconvert:S=>T):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "typedEqualTo", "tail" : "(t: => T): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.typedEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#typedEqualTo[T](t:=>T):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "beTypedEqualTo", "tail" : "(t: => T)(arg0: Diffable[T]): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beTypedEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beTypedEqualTo[T](t:=>T)(implicitevidence$5:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "equalTo", "tail" : "(t: => T): BeEqualTo", "member" : "org.specs2.matcher.AnyBaseMatchers.equalTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#equalTo[T](t:=>T):org.specs2.matcher.BeEqualTo", "kind" : "def"}, {"label" : "beEqualTo", "tail" : "(t: => T): BeEqualTo", "member" : "org.specs2.matcher.AnyBaseMatchers.beEqualTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beEqualTo[T](t:=>T):org.specs2.matcher.BeEqualTo", "kind" : "def"}, {"label" : "!==", "tail" : "(t: => T)(arg0: Diffable[T]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.!==", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#!==[T](t:=>T)(implicitevidence$4:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "be_!==", "tail" : "(t: => T)(arg0: Diffable[T]): Matcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_!==", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be_!==[T](t:=>T)(implicitevidence$3:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.Matcher[T]", "kind" : "def"}, {"label" : "===", "tail" : "(t: => T)(arg0: Diffable[T]): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.===", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#===[T](t:=>T)(implicitevidence$2:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "be_===", "tail" : "(t: => T)(arg0: Diffable[T]): EqualityMatcher[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_===", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be_===[T](t:=>T)(implicitevidence$1:org.specs2.matcher.describe.Diffable[T]):org.specs2.matcher.EqualityMatcher[T]", "kind" : "def"}, {"label" : "be_!=", "tail" : "(t: => T): Matcher[Any]", "member" : "org.specs2.matcher.AnyBaseMatchers.be_!=", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be_!=[T](t:=>T):org.specs2.matcher.Matcher[Any]", "kind" : "def"}, {"label" : "be_==", "tail" : "(t: => T): BeEqualTo", "member" : "org.specs2.matcher.AnyBaseMatchers.be_==", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be_==[T](t:=>T):org.specs2.matcher.BeEqualTo", "kind" : "def"}, {"label" : "be", "tail" : "(t: => T): BeTheSameAs[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.be", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#be[T<:AnyRef](t:=>T):org.specs2.matcher.BeTheSameAs[T]", "kind" : "def"}, {"label" : "beTheSameAs", "tail" : "(t: => T): BeTheSameAs[T]", "member" : "org.specs2.matcher.AnyBaseMatchers.beTheSameAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beTheSameAs[T<:AnyRef](t:=>T):org.specs2.matcher.BeTheSameAs[T]", "kind" : "def"}, {"label" : "beFalse", "tail" : "(): Matcher[Boolean]", "member" : "org.specs2.matcher.AnyBaseMatchers.beFalse", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beFalse:org.specs2.matcher.Matcher[Boolean]", "kind" : "def"}, {"label" : "beTrue", "tail" : "(): BeTrueMatcher", "member" : "org.specs2.matcher.AnyBaseMatchers.beTrue", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#beTrue:org.specs2.matcher.BeTrueMatcher", "kind" : "def"}, {"label" : "s2", "tail" : "(content: String, Yrangepos: Boolean, texts: Seq[String], textsStartPositions: Seq[String], textsEndPositions: Seq[String], variables: Seq[InterpolatedFragment], rangeExpressions: Seq[String]): Fragments", "member" : "org.specs2.specification.dsl.mutable.SpecificationCreation.s2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#s2(content:String,Yrangepos:Boolean,texts:Seq[String],textsStartPositions:Seq[String],textsEndPositions:Seq[String],variables:Seq[org.specs2.specification.create.InterpolatedFragment],rangeExpressions:Seq[String]):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "section", "tail" : "(tag: NamedTag): Fragment", "member" : "org.specs2.specification.dsl.mutable.TagDsl.section", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#section(tag:org.specs2.data.NamedTag):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "tag", "tail" : "(tag: NamedTag): Fragment", "member" : "org.specs2.specification.dsl.mutable.TagDsl.tag", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#tag(tag:org.specs2.data.NamedTag):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "section", "tail" : "(names: String*): Fragment", "member" : "org.specs2.specification.dsl.mutable.TagDsl.section", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#section(names:String*):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "tag", "tail" : "(names: String*): Fragment", "member" : "org.specs2.specification.dsl.mutable.TagDsl.tag", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#tag(names:String*):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "see", "tail" : "(s: => SpecificationStructure): Fragment", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.see", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#see(s:=>org.specs2.specification.core.SpecificationStructure):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "see", "tail" : "(s: SpecStructure): Fragment", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.see", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#see(s:org.specs2.specification.core.SpecStructure):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "link", "tail" : "(s: => SpecificationStructure): Fragment", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.link", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#link(s:=>org.specs2.specification.core.SpecificationStructure):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "link", "tail" : "(s: SpecStructure): Fragment", "member" : "org.specs2.specification.dsl.mutable.ReferenceDsl.link", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#link(s:org.specs2.specification.core.SpecStructure):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "args", "tail" : "(ex: ArgProperty[String], include: ArgProperty[String], exclude: ArgProperty[String], was: ArgProperty[String], plan: ArgProperty[Boolean], skipAll: ArgProperty[Boolean], stopOnFail: ArgProperty[Boolean], stopOnError: ArgProperty[Boolean], stopOnIssue: ArgProperty[Boolean], stopOnSkip: ArgProperty[Boolean], sequential: ArgProperty[Boolean], batchSize: ArgProperty[Int], asap: ArgProperty[Boolean], isolated: ArgProperty[Boolean], xonly: ArgProperty[Boolean], showOnly: ArgProperty[String], color: ArgProperty[Boolean]): Arguments", "member" : "org.specs2.specification.dsl.mutable.ArgumentsCreation.args", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#args(ex:org.specs2.main.ArgProperty[String],include:org.specs2.main.ArgProperty[String],exclude:org.specs2.main.ArgProperty[String],was:org.specs2.main.ArgProperty[String],plan:org.specs2.main.ArgProperty[Boolean],skipAll:org.specs2.main.ArgProperty[Boolean],stopOnFail:org.specs2.main.ArgProperty[Boolean],stopOnError:org.specs2.main.ArgProperty[Boolean],stopOnIssue:org.specs2.main.ArgProperty[Boolean],stopOnSkip:org.specs2.main.ArgProperty[Boolean],sequential:org.specs2.main.ArgProperty[Boolean],batchSize:org.specs2.main.ArgProperty[Int],asap:org.specs2.main.ArgProperty[Boolean],isolated:org.specs2.main.ArgProperty[Boolean],xonly:org.specs2.main.ArgProperty[Boolean],showOnly:org.specs2.main.ArgProperty[String],color:org.specs2.main.ArgProperty[Boolean]):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "args", "tail" : ": ArgumentsNamespaceMutable", "member" : "org.specs2.specification.dsl.mutable.ArgumentsCreation.args", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#args:ArgumentsCreation.this.ArgumentsNamespaceMutable", "kind" : "lazy val"}, {"label" : "title", "tail" : "(s: String): MutableTitleOps", "member" : "org.specs2.specification.dsl.mutable.TitleDsl.title", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#title(s:String):TitleDsl.this.MutableTitleOps", "kind" : "implicit def"}, {"label" : "stopWhenFail", "tail" : "(when: => Boolean): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhenFail", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stopWhenFail(when:=>Boolean):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "stopWhenFail", "tail" : "(): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhenFail", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stopWhenFail:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "stopWhenSkipped", "tail" : "(when: => Boolean): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhenSkipped", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stopWhenSkipped(when:=>Boolean):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "stopWhenSkipped", "tail" : "(): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhenSkipped", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stopWhenSkipped:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "stopWhen", "tail" : "(f: (Result) => Boolean): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stopWhen(f:org.specs2.execute.Result=>Boolean):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "stopWhen", "tail" : "(r: Result): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.stopWhen", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stopWhen(r:org.specs2.execute.Result):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "step", "tail" : "(a: => Any, global: Boolean): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.step", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#step(a:=>Any,global:Boolean):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "step", "tail" : "(a: => Any): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.step", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#step(a:=>Any):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "action", "tail" : "(a: => Any): Fragment", "member" : "org.specs2.specification.dsl.mutable.ActionDsl.action", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#action(a:=>Any):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addBacktab", "tail" : "(n: Int): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addBacktab", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addBacktab(n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addBacktab", "tail" : "(): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addBacktab", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addBacktab:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addTab", "tail" : "(n: Int): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addTab", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addTab(n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addTab", "tail" : "(): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addTab", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addTab:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addBreak", "tail" : "(n: Int): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addBreak", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addBreak(n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addBreak", "tail" : "(): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addBreak", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addBreak:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addParagraph", "tail" : "(s: String, n: Int): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addParagraph", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addParagraph(s:String,n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addText", "tail" : "(s: String): Fragment", "member" : "org.specs2.specification.dsl.mutable.TextCreation.addText", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addText(s:String):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "bangExample", "tail" : "(d: String): BangExample", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl.bangExample", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#bangExample(d:String):ExampleDsl.this.BangExample", "kind" : "implicit def"}, {"label" : "blockExample", "tail" : "(d: String): BlockExample", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl1.blockExample", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#blockExample(d:String):ExampleDsl1.this.BlockExample", "kind" : "implicit def"}, {"label" : "blockExample0", "tail" : "(d: String): BlockExample0", "member" : "org.specs2.specification.dsl.mutable.ExampleDsl1.blockExample0", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#blockExample0(d:String):ExampleDsl1.this.BlockExample0", "kind" : "def"}, {"label" : "***If you see this message this means that you've forgotten an operator after the description string: you should write \"example\" >> result ***", "tail" : "(s: String): WarningForgottenOperator", "member" : "org.specs2.specification.dsl.mutable.BlockDsl.***If you see this message this means that you've forgotten an operator after the description string: you should write \"example\" >> result ***", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#***Ifyouseethismessagethismeansthatyou'veforgottenanoperatorafterthedescriptionstring:youshouldwrite\"example\">>result***(s:String):BlockDsl.this.WarningForgottenOperator", "kind" : "implicit def"}, {"label" : "addFragmentsBlockWithText", "tail" : "(text: String, fs: => Fragments)(p1: org.specs2.control.ImplicitParameters.ImplicitParam1): Fragments", "member" : "org.specs2.specification.dsl.mutable.BlockDsl.addFragmentsBlockWithText", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addFragmentsBlockWithText(text:String,fs:=>org.specs2.specification.core.Fragments)(implicitp1:org.specs2.control.ImplicitParameters.ImplicitParam1):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "addFragmentBlockWithText", "tail" : "(text: String, f: => Fragment): Fragment", "member" : "org.specs2.specification.dsl.mutable.BlockDsl.addFragmentBlockWithText", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addFragmentBlockWithText(text:String,f:=>org.specs2.specification.core.Fragment):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "createExample", "tail" : "(expression: String, code: => T, asResult: AsResult[T]): Fragments", "member" : "org.specs2.specification.dsl.mutable.AutoExamples.createExample", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#createExample[T](expression:String,code:=>T,asResult:org.specs2.execute.AsResult[T]):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "end", "tail" : "(): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.end", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#end:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "bt", "tail" : "(n: Int): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.bt", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#bt(n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "bt", "tail" : "(): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.bt", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#bt:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "t", "tail" : "(n: Int): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.t", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#t(n:Int):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "t", "tail" : "(): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.t", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#t:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "br", "tail" : "(): Fragment", "member" : "org.specs2.specification.create.mutable.FormattingFragments.br", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#br:org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "p", "tail" : "(): Fragments", "member" : "org.specs2.specification.create.mutable.FormattingFragments.p", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#p:org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "fragmentsIsInterpolatedFragment", "tail" : "(fragments: Fragments): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.fragmentsIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fragmentsIsInterpolatedFragment(fragments:org.specs2.specification.core.Fragments):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "stringIsInterpolatedFragment", "tail" : "(s: => String): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.stringIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stringIsInterpolatedFragment(s:=>String):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "specStructureIsInterpolatedFragment", "tail" : "(s: SpecStructure): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.specStructureIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#specStructureIsInterpolatedFragment(s:org.specs2.specification.core.SpecStructure):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "specificationStructureIsInterpolatedFragment", "tail" : "(s: SpecificationStructure): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.specificationStructureIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#specificationStructureIsInterpolatedFragment(s:org.specs2.specification.core.SpecificationStructure):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "anyAsResultIsInterpolatedFragment", "tail" : "(r: => Function0Result): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.anyAsResultIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyAsResultIsInterpolatedFragment(r:=>org.specs2.execute.Function0Result):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "executionIsInterpolatedFragment", "tail" : "(execution: Execution): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.executionIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#executionIsInterpolatedFragment(execution:org.specs2.specification.core.Execution):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "stepParserIsInterpolatedFragment", "tail" : "(f: StepParser[R])(arg0: AsResult[R]): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.stepParserIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stepParserIsInterpolatedFragment[R](f:org.specs2.specification.script.StepParser[R])(implicitevidence$3:org.specs2.execute.AsResult[R]):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "stringFunctionIsInterpolatedFragment", "tail" : "(f: (String) => R)(arg0: AsResult[R]): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.stringFunctionIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stringFunctionIsInterpolatedFragment[R](f:String=>R)(implicitevidence$2:org.specs2.execute.AsResult[R]):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "asExecutionIsInterpolatedFragment", "tail" : "(e: => R)(arg0: AsExecution[R]): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.asExecutionIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#asExecutionIsInterpolatedFragment[R](e:=>R)(implicitevidence$1:org.specs2.specification.core.AsExecution[R]):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "specificationRefIsInterpolatedFragment", "tail" : "(ref: SpecificationRef): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.specificationRefIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#specificationRefIsInterpolatedFragment(ref:org.specs2.specification.core.SpecificationRef):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "descriptionToFragmentsIsInterpolatedFragment", "tail" : "(fragments: (String) => Fragments): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext.descriptionToFragmentsIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#descriptionToFragmentsIsInterpolatedFragment(fragments:String=>org.specs2.specification.core.Fragments):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "asResultIsInterpolatedFragment", "tail" : "(r: => R)(arg0: AsResult[R]): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext1.asResultIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#asResultIsInterpolatedFragment[R](r:=>R)(implicitevidence$4:org.specs2.execute.AsResult[R]):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "fragmentIsInterpolatedFragment", "tail" : "(f: => Fragment): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContext1.fragmentIsInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fragmentIsInterpolatedFragment(f:=>org.specs2.specification.core.Fragment):org.specs2.specification.create.InterpolatedFragment", "kind" : "implicit def"}, {"label" : "createExecutionInterpolatedFragment", "tail" : "(execution: R)(arg0: AsExecution[R]): InterpolatedFragment", "member" : "org.specs2.specification.create.S2StringContextCreation.createExecutionInterpolatedFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#createExecutionInterpolatedFragment[R](execution:R)(implicitevidence$5:org.specs2.specification.core.AsExecution[R]):org.specs2.specification.create.InterpolatedFragment", "kind" : "def"}, {"label" : "fullStackTrace", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.fullStackTrace", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fullStackTrace:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "excludeAlsoTrace", "tail" : "(patterns: String*): IncludeExcludeStackTraceFilter", "member" : "org.specs2.main.ArgumentsShortcuts.excludeAlsoTrace", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#excludeAlsoTrace(patterns:String*):org.specs2.control.IncludeExcludeStackTraceFilter", "kind" : "def"}, {"label" : "excludeTrace", "tail" : "(patterns: String*): IncludeExcludeStackTraceFilter", "member" : "org.specs2.main.ArgumentsShortcuts.excludeTrace", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#excludeTrace(patterns:String*):org.specs2.control.IncludeExcludeStackTraceFilter", "kind" : "def"}, {"label" : "includeAlsoTrace", "tail" : "(patterns: String*): IncludeExcludeStackTraceFilter", "member" : "org.specs2.main.ArgumentsShortcuts.includeAlsoTrace", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#includeAlsoTrace(patterns:String*):org.specs2.control.IncludeExcludeStackTraceFilter", "kind" : "def"}, {"label" : "includeTrace", "tail" : "(patterns: String*): IncludeExcludeStackTraceFilter", "member" : "org.specs2.main.ArgumentsShortcuts.includeTrace", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#includeTrace(patterns:String*):org.specs2.control.IncludeExcludeStackTraceFilter", "kind" : "def"}, {"label" : "diffs", "tail" : "(show: Boolean, separators: String, triggerSize: Int, diffRatio: Int, shortenSize: Int, full: Boolean, seqTriggerSize: Int, seqMaxSize: Int): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.diffs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#diffs(show:Boolean,separators:String,triggerSize:Int,diffRatio:Int,shortenSize:Int,full:Boolean,seqTriggerSize:Int,seqMaxSize:Int):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "was", "tail" : "(s: String): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.was", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#was(s:String):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "exclude", "tail" : "(tags: String): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.exclude", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#exclude(tags:String):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "include", "tail" : "(tags: String): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.include", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#include(tags:String):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "only", "tail" : "(examples: String): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.only", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#only(examples:String):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "showOnly", "tail" : "(s: String): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.showOnly", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#showOnly(s:String):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "xonly", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.xonly", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#xonly:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "colors", "tail" : "(c: Colors): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.colors", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#colors(c:org.specs2.text.Colors):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "nocolor", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.nocolor", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#nocolor:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "stopOnSkip", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.stopOnSkip", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stopOnSkip:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "stopOnFail", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.stopOnFail", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stopOnFail:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "skipAllUnless", "tail" : "(condition: => Boolean): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.skipAllUnless", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#skipAllUnless(condition:=>Boolean):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "skipAllIf", "tail" : "(condition: => Boolean): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.skipAllIf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#skipAllIf(condition:=>Boolean):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "skipAll", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.skipAll", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#skipAll:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "plan", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.plan", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#plan:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "isolated", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.isolated", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#isolated:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "unbatched", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.unbatched", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#unbatched:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "batchSize", "tail" : "(n: Int): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.batchSize", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#batchSize(n:Int):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "sequential", "tail" : "(): Arguments", "member" : "org.specs2.main.ArgumentsShortcuts.sequential", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#sequential:org.specs2.main.Arguments", "kind" : "def"}, {"label" : "anyToArgProperty", "tail" : "(t: => T): ArgProperty[T]", "member" : "org.specs2.main.ArgProperties.anyToArgProperty", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyToArgProperty[T](t:=>T):org.specs2.main.ArgProperty[T]", "kind" : "implicit def"}, {"label" : "makeExample", "tail" : "(expression: String, code: => T, asResult: AsResult[T]): Fragment", "member" : "org.specs2.specification.create.AutoExamples.makeExample", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#makeExample[T](expression:String,code:=>T,asResult:org.specs2.execute.AsResult[T]):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "eg", "tail" : "(code: => T)(arg0: AsResult[T]): Fragments", "member" : "org.specs2.specification.create.AutoExamples.eg", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#eg[T](code:=>T)(implicitevidence$1:org.specs2.execute.AsResult[T]):org.specs2.specification.core.Fragments", "kind" : "implicit macro def"}, {"label" : "specStructureAsFragments", "tail" : "(spec: SpecStructure): Fragments", "member" : "org.specs2.specification.dsl.SpecStructureDsl.specStructureAsFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#specStructureAsFragments(spec:org.specs2.specification.core.SpecStructure):org.specs2.specification.core.Fragments", "kind" : "implicit def"}, {"label" : "fragmentAsSpecStructure", "tail" : "(f: Fragment): SpecStructure", "member" : "org.specs2.specification.dsl.SpecStructureDsl.fragmentAsSpecStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fragmentAsSpecStructure(f:org.specs2.specification.core.Fragment):org.specs2.specification.core.SpecStructure", "kind" : "implicit def"}, {"label" : "stringAsSpecStructure", "tail" : "(s: String): SpecStructure", "member" : "org.specs2.specification.dsl.SpecStructureDsl.stringAsSpecStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#stringAsSpecStructure(s:String):org.specs2.specification.core.SpecStructure", "kind" : "implicit def"}, {"label" : "specHeaderAsStructure", "tail" : "(header: SpecHeader): SpecStructure", "member" : "org.specs2.specification.dsl.SpecStructureDsl.specHeaderAsStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#specHeaderAsStructure(header:org.specs2.specification.core.SpecHeader):org.specs2.specification.core.SpecStructure", "kind" : "implicit def"}, {"label" : "resultAsSpecStructure", "tail" : "(r: => R)(arg0: AsResult[R]): SpecStructure", "member" : "org.specs2.specification.dsl.SpecStructureDslLowImplicits.resultAsSpecStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#resultAsSpecStructure[R](r:=>R)(implicitevidence$1:org.specs2.execute.AsResult[R]):org.specs2.specification.core.SpecStructure", "kind" : "implicit def"}, {"label" : "fragmentsBlock", "tail" : "(fragments: Seq[Fragment], offset: Int): Fragments", "member" : "org.specs2.specification.dsl.FragmentsDsl.fragmentsBlock", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fragmentsBlock(fragments:Seq[org.specs2.specification.core.Fragment],offset:Int):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "fragmentToFragments", "tail" : "(f: Fragment): Fragments", "member" : "org.specs2.specification.dsl.FragmentsDsl.fragmentToFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fragmentToFragments(f:org.specs2.specification.core.Fragment):org.specs2.specification.core.Fragments", "kind" : "implicit def"}, {"label" : "fragmentsAsSpecStructure", "tail" : "(fs: => Fragments): SpecStructure", "member" : "org.specs2.specification.dsl.SpecStructureDsl1.fragmentsAsSpecStructure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fragmentsAsSpecStructure(fs:=>org.specs2.specification.core.Fragments):org.specs2.specification.core.SpecStructure", "kind" : "implicit def"}, {"label" : "hasSectionsForBlocks", "tail" : "(): Boolean", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.hasSectionsForBlocks", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#hasSectionsForBlocks:Boolean", "kind" : "def"}, {"label" : "addSections", "tail" : "(): Unit", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.addSections", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addSections():Unit", "kind" : "def"}, {"label" : "addFragments", "tail" : "(fragments: Fragments): Fragments", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.addFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addFragments(fragments:org.specs2.specification.core.Fragments):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "addFragment", "tail" : "(fragment: Fragment): Fragment", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.addFragment", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addFragment(fragment:org.specs2.specification.core.Fragment):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "addFragmentsBlock", "tail" : "(fs: => Fragments): Fragments", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.addFragmentsBlock", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addFragmentsBlock(fs:=>org.specs2.specification.core.Fragments):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "addFragmentBlock", "tail" : "(f: => Fragment): Fragment", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.addFragmentBlock", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#addFragmentBlock(f:=>org.specs2.specification.core.Fragment):org.specs2.specification.core.Fragment", "kind" : "def"}, {"label" : "is", "tail" : "(): SpecStructure", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.is", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#is:org.specs2.specification.core.SpecStructure", "kind" : "def"}, {"label" : "specificationFragments", "tail" : "(): Fragments", "member" : "org.specs2.specification.dsl.mutable.MutableFragmentBuilder.specificationFragments", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#specificationFragments:org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "setTitle", "tail" : "(t: String): SpecHeader", "member" : "org.specs2.specification.dsl.mutable.MutableHeaderBuilder.setTitle", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#setTitle(t:String):org.specs2.specification.core.SpecHeader", "kind" : "def"}, {"label" : "setArguments", "tail" : "(a: Arguments): Arguments", "member" : "org.specs2.specification.dsl.mutable.MutableArgumentsBuilder.setArguments", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#setArguments(a:org.specs2.main.Arguments):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "updateArguments", "tail" : "(a: Arguments): Arguments", "member" : "org.specs2.specification.dsl.mutable.MutableArgumentsBuilder.updateArguments", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#updateArguments(a:org.specs2.main.Arguments):org.specs2.main.Arguments", "kind" : "def"}, {"label" : "fragmentFactory", "tail" : "(): FragmentFactory", "member" : "org.specs2.specification.create.FragmentsFactory.fragmentFactory", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fragmentFactory:org.specs2.specification.create.FragmentFactory", "kind" : "def"}, {"label" : "map", "tail" : "(fs: => Fragments, env: Env): Fragments", "member" : "org.specs2.specification.core.SpecificationStructure.map", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#map(fs:=>org.specs2.specification.core.Fragments,env:org.specs2.specification.core.Env):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "map", "tail" : "(fs: => Fragments): Fragments", "member" : "org.specs2.specification.core.SpecificationStructure.map", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#map(fs:=>org.specs2.specification.core.Fragments):org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "map", "tail" : "(structure: SpecStructure): SpecStructure", "member" : "org.specs2.specification.core.SpecificationStructure.map", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#map(structure:org.specs2.specification.core.SpecStructure):org.specs2.specification.core.SpecStructure", "kind" : "def"}, {"label" : "decorate", "tail" : "(is: SpecStructure, env: Env): SpecStructure", "member" : "org.specs2.specification.core.SpecificationStructure.decorate", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#decorate(is:org.specs2.specification.core.SpecStructure,env:org.specs2.specification.core.Env):org.specs2.specification.core.SpecStructure", "kind" : "def"}, {"label" : "structure", "tail" : "(): (Env) => SpecStructure", "member" : "org.specs2.specification.core.SpecificationStructure.structure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#structure:org.specs2.specification.core.Env=>org.specs2.specification.core.SpecStructure", "kind" : "def"}, {"label" : "fragments", "tail" : "(): (Env) => Fragments", "member" : "org.specs2.specification.core.ContextualSpecificationStructure.fragments", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#fragments:org.specs2.specification.core.Env=>org.specs2.specification.core.Fragments", "kind" : "def"}, {"label" : "xmlReader", "tail" : "(maybeResult: Option[T]): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.xmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#xmlReader[T](maybeResult:Option[T]):com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "failureXmlReader", "tail" : "(errors: Seq[ParseError]): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.failureXmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#failureXmlReader[T](errors:Seq[com.lucidchart.open.xtract.ParseError]):com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "failureXmlReader", "tail" : "(error: ParseError): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.failureXmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#failureXmlReader[T](error:com.lucidchart.open.xtract.ParseError):com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "failureXmlReader", "tail" : "(): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.failureXmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#failureXmlReader[T]:com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "partialSuccessXmlReader", "tail" : "(result: T, errors: Seq[ParseError]): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.partialSuccessXmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#partialSuccessXmlReader[T](result:T,errors:Seq[com.lucidchart.open.xtract.ParseError]):com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "successXmlReader", "tail" : "(result: T): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.successXmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#successXmlReader[T](result:T):com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "doNothing", "tail" : "(): Stubber", "member" : "org.specs2.mock.mockito.MockitoFunctions.doNothing", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#doNothing:org.mockito.stubbing.Stubber", "kind" : "def"}, {"label" : "doThrow", "tail" : "(e: E): Stubber", "member" : "org.specs2.mock.mockito.MockitoFunctions.doThrow", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#doThrow[E<:Throwable](e:E):org.mockito.stubbing.Stubber", "kind" : "def"}, {"label" : "doAnswer", "tail" : "(a: Answer[T]): Stubber", "member" : "org.specs2.mock.mockito.MockitoFunctions.doAnswer", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#doAnswer[T](a:org.mockito.stubbing.Answer[T]):org.mockito.stubbing.Stubber", "kind" : "def"}, {"label" : "doReturn", "tail" : "(t: T): Stubber", "member" : "org.specs2.mock.mockito.MockitoFunctions.doReturn", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#doReturn[T](t:T):org.mockito.stubbing.Stubber", "kind" : "def"}, {"label" : "anyFunction22", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction22", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R", "kind" : "def"}, {"label" : "anyFunction21", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction21", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R", "kind" : "def"}, {"label" : "anyFunction20", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction20", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R", "kind" : "def"}, {"label" : "anyFunction19", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction19", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R", "kind" : "def"}, {"label" : "anyFunction18", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction18", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R", "kind" : "def"}, {"label" : "anyFunction17", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction17", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R", "kind" : "def"}, {"label" : "anyFunction16", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction16", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R", "kind" : "def"}, {"label" : "anyFunction15", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction15", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R", "kind" : "def"}, {"label" : "anyFunction14", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction14", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R", "kind" : "def"}, {"label" : "anyFunction13", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction13", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R", "kind" : "def"}, {"label" : "anyFunction12", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction12", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R", "kind" : "def"}, {"label" : "anyFunction11", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction11", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R", "kind" : "def"}, {"label" : "anyFunction10", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction10[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R", "kind" : "def"}, {"label" : "anyFunction9", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction9[T1,T2,T3,T4,T5,T6,T7,T8,T9,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R", "kind" : "def"}, {"label" : "anyFunction8", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction8[T1,T2,T3,T4,T5,T6,T7,T8,R]:(T1,T2,T3,T4,T5,T6,T7,T8)=>R", "kind" : "def"}, {"label" : "anyFunction7", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction7[T1,T2,T3,T4,T5,T6,T7,R]:(T1,T2,T3,T4,T5,T6,T7)=>R", "kind" : "def"}, {"label" : "anyFunction6", "tail" : "(): (T1, T2, T3, T4, T5, T6) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction6[T1,T2,T3,T4,T5,T6,R]:(T1,T2,T3,T4,T5,T6)=>R", "kind" : "def"}, {"label" : "anyFunction5", "tail" : "(): (T1, T2, T3, T4, T5) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction5[T1,T2,T3,T4,T5,R]:(T1,T2,T3,T4,T5)=>R", "kind" : "def"}, {"label" : "anyFunction4", "tail" : "(): (T1, T2, T3, T4) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction4[T1,T2,T3,T4,R]:(T1,T2,T3,T4)=>R", "kind" : "def"}, {"label" : "anyFunction3", "tail" : "(): (T1, T2, T3) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction3[T1,T2,T3,R]:(T1,T2,T3)=>R", "kind" : "def"}, {"label" : "anyFunction2", "tail" : "(): (T1, T2) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction2[T1,T2,R]:(T1,T2)=>R", "kind" : "def"}, {"label" : "anyFunction1", "tail" : "(): (T1) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction1", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction1[T1,R]:T1=>R", "kind" : "def"}, {"label" : "anyFunction0", "tail" : "(): () => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction0", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFunction0[R]:()=>R", "kind" : "def"}, {"label" : "anyPartialFunction", "tail" : "(): PartialFunction[T, R]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyPartialFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyPartialFunction[T,R]:PartialFunction[T,R]", "kind" : "def"}, {"label" : "anyObject", "tail" : "(): T", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyObject", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyObject[T]:T", "kind" : "def"}, {"label" : "any", "tail" : "(): T", "member" : "org.specs2.mock.mockito.MockitoMatchers.any", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#any[T]():T", "kind" : "def"}, {"label" : "any", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.specs2.mock.mockito.MockitoMatchers.any", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#any[T](implicitevidence$11:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "anyMapOf", "tail" : "(arg0: ClassTag[K], arg1: ClassTag[V]): Map[K, V]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyMapOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyMapOf[K,V](implicitevidence$9:scala.reflect.ClassTag[K],implicitevidence$10:scala.reflect.ClassTag[V]):Map[K,V]", "kind" : "def"}, {"label" : "anyTraversableOf", "tail" : "(arg0: ClassTag[T]): Traversable[T]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyTraversableOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyTraversableOf[T](implicitevidence$8:scala.reflect.ClassTag[T]):Traversable[T]", "kind" : "def"}, {"label" : "anySetOf", "tail" : "(arg0: ClassTag[T]): Set[T]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anySetOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anySetOf[T](implicitevidence$7:scala.reflect.ClassTag[T]):Set[T]", "kind" : "def"}, {"label" : "anyListOf", "tail" : "(arg0: ClassTag[T]): List[T]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyListOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyListOf[T](implicitevidence$6:scala.reflect.ClassTag[T]):List[T]", "kind" : "def"}, {"label" : "anyMap", "tail" : "(): Map[_, Any]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyMap", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyMap:scala.collection.immutable.Map[_,Any]", "kind" : "def"}, {"label" : "anyTraversable", "tail" : "(): Iterable[Any]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyTraversable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyTraversable:Iterable[Any]", "kind" : "def"}, {"label" : "anySet", "tail" : "(): Set[_]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anySet", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anySet:scala.collection.immutable.Set[_]", "kind" : "def"}, {"label" : "anyList", "tail" : "(): List[Any]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyList", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyList:List[Any]", "kind" : "def"}, {"label" : "anyJavaMapOf", "tail" : "(arg0: ClassTag[K], arg1: ClassTag[V]): Map[_, _]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaMapOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyJavaMapOf[K,V](implicitevidence$4:scala.reflect.ClassTag[K],implicitevidence$5:scala.reflect.ClassTag[V]):java.util.Map[_,_]", "kind" : "def"}, {"label" : "anyJavaCollectionOf", "tail" : "(arg0: ClassTag[T]): Collection[_]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaCollectionOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyJavaCollectionOf[T](implicitevidence$3:scala.reflect.ClassTag[T]):java.util.Collection[_]", "kind" : "def"}, {"label" : "anyJavaSetOf", "tail" : "(arg0: ClassTag[T]): Set[_]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaSetOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyJavaSetOf[T](implicitevidence$2:scala.reflect.ClassTag[T]):java.util.Set[_]", "kind" : "def"}, {"label" : "anyJavaListOf", "tail" : "(arg0: ClassTag[T]): List[_]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaListOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyJavaListOf[T](implicitevidence$1:scala.reflect.ClassTag[T]):java.util.List[_]", "kind" : "def"}, {"label" : "anyJavaMap", "tail" : "(): Map[Nothing, Nothing]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaMap", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyJavaMap:java.util.Map[Nothing,Nothing]", "kind" : "def"}, {"label" : "anyJavaCollection", "tail" : "(): Collection[Nothing]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaCollection", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyJavaCollection:java.util.Collection[Nothing]", "kind" : "def"}, {"label" : "anyJavaSet", "tail" : "(): Set[Nothing]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaSet", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyJavaSet:java.util.Set[Nothing]", "kind" : "def"}, {"label" : "anyJavaList", "tail" : "(): List[Nothing]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaList", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyJavaList:java.util.List[Nothing]", "kind" : "def"}, {"label" : "anyVarArg", "tail" : "(): T", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyVarArg", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyVarArg[T]:T", "kind" : "def"}, {"label" : "anyFloat", "tail" : "(): Float", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFloat", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyFloat:Float", "kind" : "def"}, {"label" : "anyDouble", "tail" : "(): Double", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyDouble", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyDouble:Double", "kind" : "def"}, {"label" : "anyLong", "tail" : "(): Long", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyLong", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyLong:Long", "kind" : "def"}, {"label" : "anyInt", "tail" : "(): Int", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyInt", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyInt:Int", "kind" : "def"}, {"label" : "anyChar", "tail" : "(): Char", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyChar", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyChar:Char", "kind" : "def"}, {"label" : "anyShort", "tail" : "(): Short", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyShort", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyShort:Short", "kind" : "def"}, {"label" : "anyByte", "tail" : "(): Byte", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyByte", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyByte:Byte", "kind" : "def"}, {"label" : "anyBoolean", "tail" : "(): Boolean", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyBoolean", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyBoolean:Boolean", "kind" : "def"}, {"label" : "anyString", "tail" : "(): String", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyString", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyString:String", "kind" : "def"}, {"label" : "captured", "tail" : "(c: ArgumentCapture[T]): T", "member" : "org.specs2.mock.mockito.CapturedArgument.captured", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#captured[T](c:org.specs2.mock.mockito.ArgumentCapture[T]):T", "kind" : "implicit def"}, {"label" : "capture", "tail" : "(arg0: ClassTag[T]): ArgumentCapture[T]", "member" : "org.specs2.mock.mockito.CapturedArgument.capture", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#capture[T](implicitevidence$1:scala.reflect.ClassTag[T]):org.specs2.mock.mockito.ArgumentCapture[T]", "kind" : "def"}, {"label" : "anOngoingStubbing", "tail" : "(stub: => OngoingStubbing[T]): AnOngoingStubbing[T]", "member" : "org.specs2.mock.mockito.MockitoStubs.anOngoingStubbing", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anOngoingStubbing[T](stub:=>org.mockito.stubbing.OngoingStubbing[T]):MockitoStubs.this.AnOngoingStubbing[T]", "kind" : "implicit def"}, {"label" : "aStubber", "tail" : "(stub: => Stubber): AStubber[Nothing]", "member" : "org.specs2.mock.mockito.MockitoStubs.aStubber", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#aStubber(stub:=>org.mockito.stubbing.Stubber):MockitoStubs.this.AStubber[Nothing]", "kind" : "implicit def"}, {"label" : "theStubbed", "tail" : "(c: T): Stubbed[T]", "member" : "org.specs2.mock.mockito.MockitoStubs.theStubbed", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#theStubbed[T](c:T):MockitoStubs.this.Stubbed[T]", "kind" : "implicit def"}, {"label" : "doAnswer", "tail" : "(f: (Any) => T): Stubber", "member" : "org.specs2.mock.mockito.MockitoStubs.doAnswer", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#doAnswer[T](f:Any=>T):org.mockito.stubbing.Stubber", "kind" : "def"}, {"label" : "ongoingStubbing", "tail" : "(stubbing: => OngoingStubbing[_]): M", "member" : "org.specs2.mock.mockito.MockitoStubsLowerImplicits.ongoingStubbing", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ongoingStubbing[M](stubbing:=>org.mockito.stubbing.OngoingStubbing[_]):M", "kind" : "implicit def"}, {"label" : "toInOrderMode", "tail" : "(calls: => T)(arg0: AsResult[T]): ToInOrderMode[T]", "member" : "org.specs2.mock.mockito.CalledMatchers.toInOrderMode", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toInOrderMode[T](calls:=>T)(implicitevidence$1:org.specs2.execute.AsResult[T]):CalledMatchers.this.ToInOrderMode[T]", "kind" : "implicit def"}, {"label" : "after", "tail" : "(duration: Duration): MockitoVerificationWithTimeout", "member" : "org.specs2.mock.mockito.CalledMatchers.after", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#after(duration:scala.concurrent.duration.Duration):CalledMatchers.this.MockitoVerificationWithTimeout", "kind" : "def"}, {"label" : "noMoreCallsTo", "tail" : "(stubbed: IgnoreStubs): Unit", "member" : "org.specs2.mock.mockito.CalledMatchers.noMoreCallsTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#noMoreCallsTo[T<:<?>](stubbed:org.specs2.mock.mockito.IgnoreStubs):Unit", "kind" : "def"}, {"label" : "noMoreCallsTo", "tail" : "(mocks: T*): Unit", "member" : "org.specs2.mock.mockito.CalledMatchers.noMoreCallsTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#noMoreCallsTo[T<:AnyRef](mocks:T*):Unit", "kind" : "def"}, {"label" : "atMostThree", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atMostThree", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atMostThree[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atMostTwo", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atMostTwo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atMostTwo[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atMostOne", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atMostOne", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atMostOne[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atMost", "tail" : "(i: Int)(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atMost", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atMost[T<:AnyRef](i:Int)(mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atLeastThree", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atLeastThree", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atLeastThree[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atLeastTwo", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atLeastTwo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atLeastTwo[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atLeastOne", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atLeastOne", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atLeastOne[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atLeast", "tail" : "(i: Int)(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atLeast", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#atLeast[T<:AnyRef](i:Int)(mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "exactly", "tail" : "(n: Int)(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.exactly", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#exactly[T<:AnyRef](n:Int)(mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "three", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.three", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#three[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "two", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.two", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#two[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "one", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.one", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#one[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "no", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.no", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#no[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "noCallsTo", "tail" : "(mocks: T*): Unit", "member" : "org.specs2.mock.mockito.CalledMatchers.noCallsTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#noCallsTo[T<:AnyRef](mocks:T*):Unit", "kind" : "def"}, {"label" : "inOrder", "tail" : "(stubbed: IgnoreStubs): Option[InOrder]", "member" : "org.specs2.mock.mockito.CalledMatchers.inOrder", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#inOrder(stubbed:org.specs2.mock.mockito.IgnoreStubs):Option[org.mockito.InOrder]", "kind" : "def"}, {"label" : "inOrder", "tail" : "(mocks: AnyRef*): Option[InOrder]", "member" : "org.specs2.mock.mockito.CalledMatchers.inOrder", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#inOrder(mocks:AnyRef*):Option[org.mockito.InOrder]", "kind" : "def"}, {"label" : "got", "tail" : "(t: => T): MatchResult[T]", "member" : "org.specs2.mock.mockito.CalledMatchers.got", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#got[T](t:=>T):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "there", "tail" : "(): Calls", "member" : "org.specs2.mock.mockito.CalledMatchers.there", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#there:CalledMatchers.this.Calls", "kind" : "def"}, {"label" : "matcherToFunctionCall22", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall22", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall22", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall22", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R", "kind" : "implicit def"}, {"label" : "functionCall22", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, t21: T21, t22: T22, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall22", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21,t22:T22,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R", "kind" : "def"}, {"label" : "callMatching22", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, t21: T21, t22: T22, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching22", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21,t22:T22,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall21", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall21", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall21", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall21", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R", "kind" : "implicit def"}, {"label" : "functionCall21", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, t21: T21, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall21", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R", "kind" : "def"}, {"label" : "callMatching21", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, t21: T21, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching21", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall20", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall20", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall20", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall20", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R", "kind" : "implicit def"}, {"label" : "functionCall20", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall20", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R", "kind" : "def"}, {"label" : "callMatching20", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching20", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall19", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall19", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall19", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall19", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R", "kind" : "implicit def"}, {"label" : "functionCall19", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall19", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R", "kind" : "def"}, {"label" : "callMatching19", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching19", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall18", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall18", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall18", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall18", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R", "kind" : "implicit def"}, {"label" : "functionCall18", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall18", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R", "kind" : "def"}, {"label" : "callMatching18", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching18", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall17", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall17", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall17", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall17", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R", "kind" : "implicit def"}, {"label" : "functionCall17", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall17", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R", "kind" : "def"}, {"label" : "callMatching17", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching17", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall16", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall16", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall16", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall16", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R", "kind" : "implicit def"}, {"label" : "functionCall16", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall16", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R", "kind" : "def"}, {"label" : "callMatching16", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching16", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall15", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall15", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall15", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall15", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R", "kind" : "implicit def"}, {"label" : "functionCall15", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall15", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R", "kind" : "def"}, {"label" : "callMatching15", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching15", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall14", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall14", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall14", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall14", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R", "kind" : "implicit def"}, {"label" : "functionCall14", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall14", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R", "kind" : "def"}, {"label" : "callMatching14", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching14", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall13", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall13", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall13", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall13", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R", "kind" : "implicit def"}, {"label" : "functionCall13", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall13", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R", "kind" : "def"}, {"label" : "callMatching13", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching13", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall12", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall12", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall12", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall12", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R", "kind" : "implicit def"}, {"label" : "functionCall12", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall12", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R", "kind" : "def"}, {"label" : "callMatching12", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching12", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall11", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall11", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall11", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall11", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R", "kind" : "implicit def"}, {"label" : "functionCall11", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall11", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R", "kind" : "def"}, {"label" : "callMatching11", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching11", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall10", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall10[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall10", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall10[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R", "kind" : "implicit def"}, {"label" : "functionCall10", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall10[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R", "kind" : "def"}, {"label" : "callMatching10", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching10[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall9", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall9[T1,T2,T3,T4,T5,T6,T7,T8,T9,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall9", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall9[T1,T2,T3,T4,T5,T6,T7,T8,T9,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R", "kind" : "implicit def"}, {"label" : "functionCall9", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall9[T1,T2,T3,T4,T5,T6,T7,T8,T9,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R", "kind" : "def"}, {"label" : "callMatching9", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching9[T1,T2,T3,T4,T5,T6,T7,T8,T9,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall8", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall8[T1,T2,T3,T4,T5,T6,T7,T8,R](values:((T1,T2,T3,T4,T5,T6,T7,T8),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall8", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8), R)): (T1, T2, T3, T4, T5, T6, T7, T8) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall8[T1,T2,T3,T4,T5,T6,T7,T8,R](values:((T1,T2,T3,T4,T5,T6,T7,T8),R)):(T1,T2,T3,T4,T5,T6,T7,T8)=>R", "kind" : "implicit def"}, {"label" : "functionCall8", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, r: R): (T1, T2, T3, T4, T5, T6, T7, T8) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall8[T1,T2,T3,T4,T5,T6,T7,T8,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,r:R):(T1,T2,T3,T4,T5,T6,T7,T8)=>R", "kind" : "def"}, {"label" : "callMatching8", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching8[T1,T2,T3,T4,T5,T6,T7,T8,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall7", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall7[T1,T2,T3,T4,T5,T6,T7,R](values:((T1,T2,T3,T4,T5,T6,T7),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall7", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7), R)): (T1, T2, T3, T4, T5, T6, T7) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall7[T1,T2,T3,T4,T5,T6,T7,R](values:((T1,T2,T3,T4,T5,T6,T7),R)):(T1,T2,T3,T4,T5,T6,T7)=>R", "kind" : "implicit def"}, {"label" : "functionCall7", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, r: R): (T1, T2, T3, T4, T5, T6, T7) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall7[T1,T2,T3,T4,T5,T6,T7,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,r:R):(T1,T2,T3,T4,T5,T6,T7)=>R", "kind" : "def"}, {"label" : "callMatching7", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching7[T1,T2,T3,T4,T5,T6,T7,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall6", "tail" : "(values: ((T1, T2, T3, T4, T5, T6), Matcher[R])): (T1, T2, T3, T4, T5, T6) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall6[T1,T2,T3,T4,T5,T6,R](values:((T1,T2,T3,T4,T5,T6),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall6", "tail" : "(values: ((T1, T2, T3, T4, T5, T6), R)): (T1, T2, T3, T4, T5, T6) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall6[T1,T2,T3,T4,T5,T6,R](values:((T1,T2,T3,T4,T5,T6),R)):(T1,T2,T3,T4,T5,T6)=>R", "kind" : "implicit def"}, {"label" : "functionCall6", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, r: R): (T1, T2, T3, T4, T5, T6) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall6[T1,T2,T3,T4,T5,T6,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,r:R):(T1,T2,T3,T4,T5,T6)=>R", "kind" : "def"}, {"label" : "callMatching6", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, m: Matcher[R]): (T1, T2, T3, T4, T5, T6) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching6[T1,T2,T3,T4,T5,T6,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall5", "tail" : "(values: ((T1, T2, T3, T4, T5), Matcher[R])): (T1, T2, T3, T4, T5) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall5[T1,T2,T3,T4,T5,R](values:((T1,T2,T3,T4,T5),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall5", "tail" : "(values: ((T1, T2, T3, T4, T5), R)): (T1, T2, T3, T4, T5) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall5[T1,T2,T3,T4,T5,R](values:((T1,T2,T3,T4,T5),R)):(T1,T2,T3,T4,T5)=>R", "kind" : "implicit def"}, {"label" : "functionCall5", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, r: R): (T1, T2, T3, T4, T5) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall5[T1,T2,T3,T4,T5,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,r:R):(T1,T2,T3,T4,T5)=>R", "kind" : "def"}, {"label" : "callMatching5", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, m: Matcher[R]): (T1, T2, T3, T4, T5) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching5[T1,T2,T3,T4,T5,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall4", "tail" : "(values: ((T1, T2, T3, T4), Matcher[R])): (T1, T2, T3, T4) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall4[T1,T2,T3,T4,R](values:((T1,T2,T3,T4),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall4", "tail" : "(values: ((T1, T2, T3, T4), R)): (T1, T2, T3, T4) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall4[T1,T2,T3,T4,R](values:((T1,T2,T3,T4),R)):(T1,T2,T3,T4)=>R", "kind" : "implicit def"}, {"label" : "functionCall4", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, r: R): (T1, T2, T3, T4) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall4[T1,T2,T3,T4,R](t1:T1,t2:T2,t3:T3,t4:T4,r:R):(T1,T2,T3,T4)=>R", "kind" : "def"}, {"label" : "callMatching4", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, m: Matcher[R]): (T1, T2, T3, T4) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching4[T1,T2,T3,T4,R](t1:T1,t2:T2,t3:T3,t4:T4,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall3", "tail" : "(values: ((T1, T2, T3), Matcher[R])): (T1, T2, T3) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall3[T1,T2,T3,R](values:((T1,T2,T3),org.specs2.matcher.Matcher[R])):(T1,T2,T3)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall3", "tail" : "(values: ((T1, T2, T3), R)): (T1, T2, T3) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall3[T1,T2,T3,R](values:((T1,T2,T3),R)):(T1,T2,T3)=>R", "kind" : "implicit def"}, {"label" : "functionCall3", "tail" : "(t1: T1, t2: T2, t3: T3, r: R): (T1, T2, T3) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall3[T1,T2,T3,R](t1:T1,t2:T2,t3:T3,r:R):(T1,T2,T3)=>R", "kind" : "def"}, {"label" : "callMatching3", "tail" : "(t1: T1, t2: T2, t3: T3, m: Matcher[R]): (T1, T2, T3) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching3[T1,T2,T3,R](t1:T1,t2:T2,t3:T3,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall2", "tail" : "(values: ((T1, T2), Matcher[R])): (T1, T2) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall2[T1,T2,R](values:((T1,T2),org.specs2.matcher.Matcher[R])):(T1,T2)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall2", "tail" : "(values: ((T1, T2), R)): (T1, T2) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall2[T1,T2,R](values:((T1,T2),R)):(T1,T2)=>R", "kind" : "implicit def"}, {"label" : "functionCall2", "tail" : "(t1: T1, t2: T2, r: R): (T1, T2) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall2[T1,T2,R](t1:T1,t2:T2,r:R):(T1,T2)=>R", "kind" : "def"}, {"label" : "callMatching2", "tail" : "(t1: T1, t2: T2, m: Matcher[R]): (T1, T2) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching2[T1,T2,R](t1:T1,t2:T2,m:org.specs2.matcher.Matcher[R]):(T1,T2)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall", "tail" : "(values: (A, Matcher[R])): (A) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToFunctionCall[A,R](values:(A,org.specs2.matcher.Matcher[R])):A=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall", "tail" : "(values: (A, R)): (A) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toFunctionCall[A,R](values:(A,R)):A=>R", "kind" : "implicit def"}, {"label" : "functionCall", "tail" : "(a: A, r: R): (A) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#functionCall[A,R](a:A,r:R):A=>R", "kind" : "def"}, {"label" : "callMatching", "tail" : "(a: A, m: Matcher[R]): (A) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#callMatching[A,R](a:A,m:org.specs2.matcher.Matcher[R]):A=>R", "kind" : "def"}, {"label" : "matcherToPartialFunctionCall", "tail" : "(values: (A, Matcher[R])): PartialFunction[A, R]", "member" : "org.specs2.mock.mockito.FunctionArgumentsLowImplicits.matcherToPartialFunctionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#matcherToPartialFunctionCall[A,R](values:(A,org.specs2.matcher.Matcher[R])):PartialFunction[A,R]", "kind" : "implicit def"}, {"label" : "toPartialFunctionCall", "tail" : "(values: (A, R)): PartialFunction[A, R]", "member" : "org.specs2.mock.mockito.FunctionArgumentsLowImplicits.toPartialFunctionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toPartialFunctionCall[A,R](values:(A,R)):PartialFunction[A,R]", "kind" : "implicit def"}, {"label" : "partialFunctionCall", "tail" : "(a: A, r: R): PartialFunction[A, R]", "member" : "org.specs2.mock.mockito.FunctionArgumentsLowImplicits.partialFunctionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#partialFunctionCall[A,R](a:A,r:R):PartialFunction[A,R]", "kind" : "def"}, {"label" : "partialCallMatching", "tail" : "(a: A, m: Matcher[R]): PartialFunction[A, R]", "member" : "org.specs2.mock.mockito.FunctionArgumentsLowImplicits.partialCallMatching", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#partialCallMatching[A,R](a:A,m:org.specs2.matcher.Matcher[R]):PartialFunction[A,R]", "kind" : "def"}, {"label" : "describe", "tail" : "(t: => T): Descriptible[T]", "member" : "org.specs2.matcher.ExpectationsDescription.describe", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#describe[T](t:=>T):ExpectationsDescription.this.Descriptible[T]", "kind" : "implicit def"}, {"label" : "describeExpectation", "tail" : "(description: String): ExpectationDescription", "member" : "org.specs2.matcher.ExpectationsDescription.describeExpectation", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#describeExpectation(description:String):ExpectationsDescription.this.ExpectationDescription", "kind" : "implicit def"}, {"label" : "typedEqualExpectation", "tail" : "(t: => T): TypedEqualExpectation[T]", "member" : "org.specs2.matcher.TypedEqual.typedEqualExpectation", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#typedEqualExpectation[T](t:=>T):TypedEqual.this.TypedEqualExpectation[T]", "kind" : "implicit def"}, {"label" : "mapMatchResult", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.mapMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#mapMatchResult[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "checkFailure", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.checkFailure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#checkFailure[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: (String) => String): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#createExpectable[T](t:=>T,alias:String=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: => String): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#createExpectable[T](t:=>T,alias:=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#createExpectable[T](t:=>T):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "setStacktrace", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.MatchResultStackTrace.setStacktrace", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#setStacktrace[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "anArgThat", "tail" : "(m: Matcher[U]): T", "member" : "org.specs2.mock.mockito.ArgThat.anArgThat", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anArgThat[T,U<:T](m:org.hamcrest.Matcher[U]):T", "kind" : "def"}, {"label" : "argThat", "tail" : "(m: Matcher[U]): T", "member" : "org.specs2.mock.mockito.ArgThat.argThat", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#argThat[T,U<:T](m:org.specs2.matcher.Matcher[U]):T", "kind" : "implicit def"}, {"label" : "timesFor", "tail" : "(n: Int): Times", "member" : "org.specs2.control.NumberOfTimes.timesFor", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#timesFor(n:Int):org.specs2.control.Times", "kind" : "implicit def"}, {"label" : "ignoreStubs", "tail" : "(mocks: AnyRef*): IgnoreStubs", "member" : "org.specs2.mock.mockito.MocksCreation.ignoreStubs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ignoreStubs(mocks:AnyRef*):org.specs2.mock.mockito.IgnoreStubs", "kind" : "def"}, {"label" : "spy", "tail" : "(m: T): T", "member" : "org.specs2.mock.mockito.MocksCreation.spy", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#spy[T](m:T):T", "kind" : "def"}, {"label" : "smartMock", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.specs2.mock.mockito.MocksCreation.smartMock", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#smartMock[T](implicitevidence$16:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "anyToMockProperty", "tail" : "(t: => T): MockProperty[T]", "member" : "org.specs2.mock.mockito.MocksCreation.anyToMockProperty", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#anyToMockProperty[T](t:=>T):MocksCreation.this.MockProperty[T]", "kind" : "implicit def"}, {"label" : "mocked", "tail" : "(t: => T)(arg0: ClassTag[T]): Mocked[T]", "member" : "org.specs2.mock.mockito.MocksCreation.mocked", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#mocked[T](t:=>T)(implicitevidence$4:scala.reflect.ClassTag[T]):MocksCreation.this.Mocked[T]", "kind" : "implicit def"}, {"label" : "mock", "tail" : "(settings: MockSettings)(arg0: ClassTag[T]): T", "member" : "org.specs2.mock.mockito.MocksCreation.mock", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#mock[T](settings:org.mockito.MockSettings)(implicitevidence$3:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "mockAs", "tail" : "(name: String)(arg0: ClassTag[T]): T", "member" : "org.specs2.mock.mockito.MocksCreation.mockAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#mockAs[T](name:String)(implicitevidence$2:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "mock", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.specs2.mock.mockito.MocksCreation.mock", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#mock[T](implicitevidence$1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "classesOf", "tail" : "(arg0: ClassTag[T1], arg1: ClassTag[T2], arg2: ClassTag[T3], arg3: ClassTag[T4], arg4: ClassTag[T5]): Seq[Class[_ >: _$1 with _$1 with _$1 with _$1 with _$1]] forSome {type _$1, type _$1, type _$1, type _$1, type _$1}", "member" : "org.specs2.reflect.ClassesOf.classesOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#classesOf[T1,T2,T3,T4,T5](implicitevidence$10:scala.reflect.ClassTag[T1],implicitevidence$11:scala.reflect.ClassTag[T2],implicitevidence$12:scala.reflect.ClassTag[T3],implicitevidence$13:scala.reflect.ClassTag[T4],implicitevidence$14:scala.reflect.ClassTag[T5]):Seq[Class[_>:_$1with_$1with_$1with_$1with_$1]]forSome{type_$1;type_$1;type_$1;type_$1;type_$1}", "kind" : "def"}, {"label" : "classesOf", "tail" : "(arg0: ClassTag[T1], arg1: ClassTag[T2], arg2: ClassTag[T3], arg3: ClassTag[T4]): Seq[Class[_ >: _$1 with _$1 with _$1 with _$1]] forSome {type _$1, type _$1, type _$1, type _$1}", "member" : "org.specs2.reflect.ClassesOf.classesOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#classesOf[T1,T2,T3,T4](implicitevidence$6:scala.reflect.ClassTag[T1],implicitevidence$7:scala.reflect.ClassTag[T2],implicitevidence$8:scala.reflect.ClassTag[T3],implicitevidence$9:scala.reflect.ClassTag[T4]):Seq[Class[_>:_$1with_$1with_$1with_$1]]forSome{type_$1;type_$1;type_$1;type_$1}", "kind" : "def"}, {"label" : "classesOf", "tail" : "(arg0: ClassTag[T1], arg1: ClassTag[T2], arg2: ClassTag[T3]): Seq[Class[_ >: _$1 with _$1 with _$1]] forSome {type _$1, type _$1, type _$1}", "member" : "org.specs2.reflect.ClassesOf.classesOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#classesOf[T1,T2,T3](implicitevidence$3:scala.reflect.ClassTag[T1],implicitevidence$4:scala.reflect.ClassTag[T2],implicitevidence$5:scala.reflect.ClassTag[T3]):Seq[Class[_>:_$1with_$1with_$1]]forSome{type_$1;type_$1;type_$1}", "kind" : "def"}, {"label" : "classesOf", "tail" : "(arg0: ClassTag[T1], arg1: ClassTag[T2]): Seq[Class[_ >: _$1 with _$1]] forSome {type _$1, type _$1}", "member" : "org.specs2.reflect.ClassesOf.classesOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#classesOf[T1,T2](implicitevidence$1:scala.reflect.ClassTag[T1],implicitevidence$2:scala.reflect.ClassTag[T2]):Seq[Class[_>:_$1with_$1]]forSome{type_$1;type_$1}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpecification.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "com.lucidchart.open.xtract.XmlReaderSpies", "trait" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html", "kind" : "trait", "members_trait" : [{"label" : "MockAnswer3", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.MockAnswer3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#MockAnswer3[T]extendsAnswer[T]", "kind" : "class"}, {"label" : "MockAnswer2", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.MockAnswer2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#MockAnswer2[T]extendsAnswer[T]", "kind" : "class"}, {"label" : "MockAnswer", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.MockAnswer", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#MockAnswer[T]extendsAnswer[T]", "kind" : "class"}, {"label" : "AnOngoingStubbing", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.AnOngoingStubbing", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#AnOngoingStubbing[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AStubber", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.AStubber", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#AStubber[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Stubbed", "tail" : "", "member" : "org.specs2.mock.mockito.MockitoStubs.Stubbed", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#Stubbed[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ToInOrderMode", "tail" : "", "member" : "org.specs2.mock.mockito.CalledMatchers.ToInOrderMode", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#ToInOrderMode[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MockitoVerificationWithTimeout", "tail" : "", "member" : "org.specs2.mock.mockito.CalledMatchers.MockitoVerificationWithTimeout", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#MockitoVerificationWithTimeoutextendsProductwithSerializable", "kind" : "case class"}, {"label" : "TimesCall", "tail" : "", "member" : "org.specs2.mock.mockito.CalledMatchers.TimesCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#TimesCallextendsAnyRef", "kind" : "implicit class"}, {"label" : "Calls", "tail" : "", "member" : "org.specs2.mock.mockito.CalledMatchers.Calls", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#CallsextendsAnyRef", "kind" : "class"}, {"label" : "Descriptible", "tail" : "", "member" : "org.specs2.matcher.ExpectationsDescription.Descriptible", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#Descriptible[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "ExpectationDescription", "tail" : "", "member" : "org.specs2.matcher.ExpectationsDescription.ExpectationDescription", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#ExpectationDescriptionextendsAnyRef", "kind" : "class"}, {"label" : "TypedEqualExpectation", "tail" : "", "member" : "org.specs2.matcher.TypedEqual.TypedEqualExpectation", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#TypedEqualExpectation[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "MockProperty", "tail" : "", "member" : "org.specs2.mock.mockito.MocksCreation.MockProperty", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#MockProperty[T<:<?>]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "xmlReader", "tail" : "(maybeResult: Option[T]): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.xmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#xmlReader[T](maybeResult:Option[T]):com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "failureXmlReader", "tail" : "(errors: Seq[ParseError]): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.failureXmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#failureXmlReader[T](errors:Seq[com.lucidchart.open.xtract.ParseError]):com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "failureXmlReader", "tail" : "(error: ParseError): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.failureXmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#failureXmlReader[T](error:com.lucidchart.open.xtract.ParseError):com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "failureXmlReader", "tail" : "(): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.failureXmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#failureXmlReader[T]:com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "partialSuccessXmlReader", "tail" : "(result: T, errors: Seq[ParseError]): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.partialSuccessXmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#partialSuccessXmlReader[T](result:T,errors:Seq[com.lucidchart.open.xtract.ParseError]):com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "successXmlReader", "tail" : "(result: T): XmlReader[T]", "member" : "com.lucidchart.open.xtract.XmlReaderSpies.successXmlReader", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#successXmlReader[T](result:T):com.lucidchart.open.xtract.XmlReader[T]", "kind" : "def"}, {"label" : "doNothing", "tail" : "(): Stubber", "member" : "org.specs2.mock.mockito.MockitoFunctions.doNothing", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#doNothing:org.mockito.stubbing.Stubber", "kind" : "def"}, {"label" : "doThrow", "tail" : "(e: E): Stubber", "member" : "org.specs2.mock.mockito.MockitoFunctions.doThrow", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#doThrow[E<:Throwable](e:E):org.mockito.stubbing.Stubber", "kind" : "def"}, {"label" : "doAnswer", "tail" : "(a: Answer[T]): Stubber", "member" : "org.specs2.mock.mockito.MockitoFunctions.doAnswer", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#doAnswer[T](a:org.mockito.stubbing.Answer[T]):org.mockito.stubbing.Stubber", "kind" : "def"}, {"label" : "doReturn", "tail" : "(t: T): Stubber", "member" : "org.specs2.mock.mockito.MockitoFunctions.doReturn", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#doReturn[T](t:T):org.mockito.stubbing.Stubber", "kind" : "def"}, {"label" : "anyFunction22", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction22", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R", "kind" : "def"}, {"label" : "anyFunction21", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction21", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R", "kind" : "def"}, {"label" : "anyFunction20", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction20", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R", "kind" : "def"}, {"label" : "anyFunction19", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction19", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R", "kind" : "def"}, {"label" : "anyFunction18", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction18", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R", "kind" : "def"}, {"label" : "anyFunction17", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction17", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R", "kind" : "def"}, {"label" : "anyFunction16", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction16", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R", "kind" : "def"}, {"label" : "anyFunction15", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction15", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R", "kind" : "def"}, {"label" : "anyFunction14", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction14", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R", "kind" : "def"}, {"label" : "anyFunction13", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction13", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R", "kind" : "def"}, {"label" : "anyFunction12", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction12", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R", "kind" : "def"}, {"label" : "anyFunction11", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction11", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R", "kind" : "def"}, {"label" : "anyFunction10", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction10[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R", "kind" : "def"}, {"label" : "anyFunction9", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction9[T1,T2,T3,T4,T5,T6,T7,T8,T9,R]:(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R", "kind" : "def"}, {"label" : "anyFunction8", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7, T8) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction8[T1,T2,T3,T4,T5,T6,T7,T8,R]:(T1,T2,T3,T4,T5,T6,T7,T8)=>R", "kind" : "def"}, {"label" : "anyFunction7", "tail" : "(): (T1, T2, T3, T4, T5, T6, T7) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction7[T1,T2,T3,T4,T5,T6,T7,R]:(T1,T2,T3,T4,T5,T6,T7)=>R", "kind" : "def"}, {"label" : "anyFunction6", "tail" : "(): (T1, T2, T3, T4, T5, T6) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction6[T1,T2,T3,T4,T5,T6,R]:(T1,T2,T3,T4,T5,T6)=>R", "kind" : "def"}, {"label" : "anyFunction5", "tail" : "(): (T1, T2, T3, T4, T5) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction5[T1,T2,T3,T4,T5,R]:(T1,T2,T3,T4,T5)=>R", "kind" : "def"}, {"label" : "anyFunction4", "tail" : "(): (T1, T2, T3, T4) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction4[T1,T2,T3,T4,R]:(T1,T2,T3,T4)=>R", "kind" : "def"}, {"label" : "anyFunction3", "tail" : "(): (T1, T2, T3) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction3[T1,T2,T3,R]:(T1,T2,T3)=>R", "kind" : "def"}, {"label" : "anyFunction2", "tail" : "(): (T1, T2) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction2[T1,T2,R]:(T1,T2)=>R", "kind" : "def"}, {"label" : "anyFunction1", "tail" : "(): (T1) => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction1", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction1[T1,R]:T1=>R", "kind" : "def"}, {"label" : "anyFunction0", "tail" : "(): () => R", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFunction0", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFunction0[R]:()=>R", "kind" : "def"}, {"label" : "anyPartialFunction", "tail" : "(): PartialFunction[T, R]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyPartialFunction", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyPartialFunction[T,R]:PartialFunction[T,R]", "kind" : "def"}, {"label" : "anyObject", "tail" : "(): T", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyObject", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyObject[T]:T", "kind" : "def"}, {"label" : "any", "tail" : "(): T", "member" : "org.specs2.mock.mockito.MockitoMatchers.any", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#any[T]():T", "kind" : "def"}, {"label" : "any", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.specs2.mock.mockito.MockitoMatchers.any", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#any[T](implicitevidence$11:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "anyMapOf", "tail" : "(arg0: ClassTag[K], arg1: ClassTag[V]): Map[K, V]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyMapOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyMapOf[K,V](implicitevidence$9:scala.reflect.ClassTag[K],implicitevidence$10:scala.reflect.ClassTag[V]):Map[K,V]", "kind" : "def"}, {"label" : "anyTraversableOf", "tail" : "(arg0: ClassTag[T]): Traversable[T]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyTraversableOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyTraversableOf[T](implicitevidence$8:scala.reflect.ClassTag[T]):Traversable[T]", "kind" : "def"}, {"label" : "anySetOf", "tail" : "(arg0: ClassTag[T]): Set[T]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anySetOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anySetOf[T](implicitevidence$7:scala.reflect.ClassTag[T]):Set[T]", "kind" : "def"}, {"label" : "anyListOf", "tail" : "(arg0: ClassTag[T]): List[T]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyListOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyListOf[T](implicitevidence$6:scala.reflect.ClassTag[T]):List[T]", "kind" : "def"}, {"label" : "anyMap", "tail" : "(): Map[_, Any]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyMap", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyMap:scala.collection.immutable.Map[_,Any]", "kind" : "def"}, {"label" : "anyTraversable", "tail" : "(): Iterable[Any]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyTraversable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyTraversable:Iterable[Any]", "kind" : "def"}, {"label" : "anySet", "tail" : "(): Set[_]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anySet", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anySet:scala.collection.immutable.Set[_]", "kind" : "def"}, {"label" : "anyList", "tail" : "(): List[Any]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyList", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyList:List[Any]", "kind" : "def"}, {"label" : "anyJavaMapOf", "tail" : "(arg0: ClassTag[K], arg1: ClassTag[V]): Map[_, _]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaMapOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyJavaMapOf[K,V](implicitevidence$4:scala.reflect.ClassTag[K],implicitevidence$5:scala.reflect.ClassTag[V]):java.util.Map[_,_]", "kind" : "def"}, {"label" : "anyJavaCollectionOf", "tail" : "(arg0: ClassTag[T]): Collection[_]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaCollectionOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyJavaCollectionOf[T](implicitevidence$3:scala.reflect.ClassTag[T]):java.util.Collection[_]", "kind" : "def"}, {"label" : "anyJavaSetOf", "tail" : "(arg0: ClassTag[T]): Set[_]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaSetOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyJavaSetOf[T](implicitevidence$2:scala.reflect.ClassTag[T]):java.util.Set[_]", "kind" : "def"}, {"label" : "anyJavaListOf", "tail" : "(arg0: ClassTag[T]): List[_]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaListOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyJavaListOf[T](implicitevidence$1:scala.reflect.ClassTag[T]):java.util.List[_]", "kind" : "def"}, {"label" : "anyJavaMap", "tail" : "(): Map[Nothing, Nothing]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaMap", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyJavaMap:java.util.Map[Nothing,Nothing]", "kind" : "def"}, {"label" : "anyJavaCollection", "tail" : "(): Collection[Nothing]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaCollection", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyJavaCollection:java.util.Collection[Nothing]", "kind" : "def"}, {"label" : "anyJavaSet", "tail" : "(): Set[Nothing]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaSet", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyJavaSet:java.util.Set[Nothing]", "kind" : "def"}, {"label" : "anyJavaList", "tail" : "(): List[Nothing]", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyJavaList", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyJavaList:java.util.List[Nothing]", "kind" : "def"}, {"label" : "anyVarArg", "tail" : "(): T", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyVarArg", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyVarArg[T]:T", "kind" : "def"}, {"label" : "anyFloat", "tail" : "(): Float", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyFloat", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyFloat:Float", "kind" : "def"}, {"label" : "anyDouble", "tail" : "(): Double", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyDouble", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyDouble:Double", "kind" : "def"}, {"label" : "anyLong", "tail" : "(): Long", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyLong", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyLong:Long", "kind" : "def"}, {"label" : "anyInt", "tail" : "(): Int", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyInt", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyInt:Int", "kind" : "def"}, {"label" : "anyChar", "tail" : "(): Char", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyChar", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyChar:Char", "kind" : "def"}, {"label" : "anyShort", "tail" : "(): Short", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyShort", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyShort:Short", "kind" : "def"}, {"label" : "anyByte", "tail" : "(): Byte", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyByte", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyByte:Byte", "kind" : "def"}, {"label" : "anyBoolean", "tail" : "(): Boolean", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyBoolean", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyBoolean:Boolean", "kind" : "def"}, {"label" : "anyString", "tail" : "(): String", "member" : "org.specs2.mock.mockito.MockitoMatchers.anyString", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyString:String", "kind" : "def"}, {"label" : "captured", "tail" : "(c: ArgumentCapture[T]): T", "member" : "org.specs2.mock.mockito.CapturedArgument.captured", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#captured[T](c:org.specs2.mock.mockito.ArgumentCapture[T]):T", "kind" : "implicit def"}, {"label" : "capture", "tail" : "(arg0: ClassTag[T]): ArgumentCapture[T]", "member" : "org.specs2.mock.mockito.CapturedArgument.capture", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#capture[T](implicitevidence$1:scala.reflect.ClassTag[T]):org.specs2.mock.mockito.ArgumentCapture[T]", "kind" : "def"}, {"label" : "anOngoingStubbing", "tail" : "(stub: => OngoingStubbing[T]): AnOngoingStubbing[T]", "member" : "org.specs2.mock.mockito.MockitoStubs.anOngoingStubbing", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anOngoingStubbing[T](stub:=>org.mockito.stubbing.OngoingStubbing[T]):MockitoStubs.this.AnOngoingStubbing[T]", "kind" : "implicit def"}, {"label" : "aStubber", "tail" : "(stub: => Stubber): AStubber[Nothing]", "member" : "org.specs2.mock.mockito.MockitoStubs.aStubber", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#aStubber(stub:=>org.mockito.stubbing.Stubber):MockitoStubs.this.AStubber[Nothing]", "kind" : "implicit def"}, {"label" : "theStubbed", "tail" : "(c: T): Stubbed[T]", "member" : "org.specs2.mock.mockito.MockitoStubs.theStubbed", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#theStubbed[T](c:T):MockitoStubs.this.Stubbed[T]", "kind" : "implicit def"}, {"label" : "doAnswer", "tail" : "(f: (Any) => T): Stubber", "member" : "org.specs2.mock.mockito.MockitoStubs.doAnswer", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#doAnswer[T](f:Any=>T):org.mockito.stubbing.Stubber", "kind" : "def"}, {"label" : "ongoingStubbing", "tail" : "(stubbing: => OngoingStubbing[_]): M", "member" : "org.specs2.mock.mockito.MockitoStubsLowerImplicits.ongoingStubbing", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#ongoingStubbing[M](stubbing:=>org.mockito.stubbing.OngoingStubbing[_]):M", "kind" : "implicit def"}, {"label" : "toInOrderMode", "tail" : "(calls: => T)(arg0: AsResult[T]): ToInOrderMode[T]", "member" : "org.specs2.mock.mockito.CalledMatchers.toInOrderMode", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toInOrderMode[T](calls:=>T)(implicitevidence$1:org.specs2.execute.AsResult[T]):CalledMatchers.this.ToInOrderMode[T]", "kind" : "implicit def"}, {"label" : "after", "tail" : "(duration: Duration): MockitoVerificationWithTimeout", "member" : "org.specs2.mock.mockito.CalledMatchers.after", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#after(duration:scala.concurrent.duration.Duration):CalledMatchers.this.MockitoVerificationWithTimeout", "kind" : "def"}, {"label" : "noMoreCallsTo", "tail" : "(stubbed: IgnoreStubs): Unit", "member" : "org.specs2.mock.mockito.CalledMatchers.noMoreCallsTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#noMoreCallsTo[T<:<?>](stubbed:org.specs2.mock.mockito.IgnoreStubs):Unit", "kind" : "def"}, {"label" : "noMoreCallsTo", "tail" : "(mocks: T*): Unit", "member" : "org.specs2.mock.mockito.CalledMatchers.noMoreCallsTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#noMoreCallsTo[T<:AnyRef](mocks:T*):Unit", "kind" : "def"}, {"label" : "atMostThree", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atMostThree", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#atMostThree[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atMostTwo", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atMostTwo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#atMostTwo[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atMostOne", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atMostOne", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#atMostOne[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atMost", "tail" : "(i: Int)(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atMost", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#atMost[T<:AnyRef](i:Int)(mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atLeastThree", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atLeastThree", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#atLeastThree[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atLeastTwo", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atLeastTwo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#atLeastTwo[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atLeastOne", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atLeastOne", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#atLeastOne[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "atLeast", "tail" : "(i: Int)(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.atLeast", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#atLeast[T<:AnyRef](i:Int)(mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "exactly", "tail" : "(n: Int)(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.exactly", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#exactly[T<:AnyRef](n:Int)(mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "three", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.three", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#three[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "two", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.two", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#two[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "one", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.one", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#one[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "no", "tail" : "(mock: T)(anOrder: Option[InOrder]): T", "member" : "org.specs2.mock.mockito.CalledMatchers.no", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#no[T<:AnyRef](mock:T)(implicitanOrder:Option[org.mockito.InOrder]):T", "kind" : "def"}, {"label" : "noCallsTo", "tail" : "(mocks: T*): Unit", "member" : "org.specs2.mock.mockito.CalledMatchers.noCallsTo", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#noCallsTo[T<:AnyRef](mocks:T*):Unit", "kind" : "def"}, {"label" : "inOrder", "tail" : "(stubbed: IgnoreStubs): Option[InOrder]", "member" : "org.specs2.mock.mockito.CalledMatchers.inOrder", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#inOrder(stubbed:org.specs2.mock.mockito.IgnoreStubs):Option[org.mockito.InOrder]", "kind" : "def"}, {"label" : "inOrder", "tail" : "(mocks: AnyRef*): Option[InOrder]", "member" : "org.specs2.mock.mockito.CalledMatchers.inOrder", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#inOrder(mocks:AnyRef*):Option[org.mockito.InOrder]", "kind" : "def"}, {"label" : "got", "tail" : "(t: => T): MatchResult[T]", "member" : "org.specs2.mock.mockito.CalledMatchers.got", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#got[T](t:=>T):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "there", "tail" : "(): Calls", "member" : "org.specs2.mock.mockito.CalledMatchers.there", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#there:CalledMatchers.this.Calls", "kind" : "def"}, {"label" : "matcherToFunctionCall22", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall22", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall22", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall22", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R", "kind" : "implicit def"}, {"label" : "functionCall22", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, t21: T21, t22: T22, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall22", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21,t22:T22,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R", "kind" : "def"}, {"label" : "callMatching22", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, t21: T21, t22: T22, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching22", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21,t22:T22,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall21", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall21", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall21", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall21", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R", "kind" : "implicit def"}, {"label" : "functionCall21", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, t21: T21, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall21", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R", "kind" : "def"}, {"label" : "callMatching21", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, t21: T21, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching21", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,t21:T21,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall20", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall20", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall20", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall20", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R", "kind" : "implicit def"}, {"label" : "functionCall20", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall20", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R", "kind" : "def"}, {"label" : "callMatching20", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, t20: T20, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching20", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,t20:T20,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall19", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall19", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall19", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall19", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R", "kind" : "implicit def"}, {"label" : "functionCall19", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall19", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R", "kind" : "def"}, {"label" : "callMatching19", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, t19: T19, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching19", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,t19:T19,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall18", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall18", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall18", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall18", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R", "kind" : "implicit def"}, {"label" : "functionCall18", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall18", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R", "kind" : "def"}, {"label" : "callMatching18", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, t18: T18, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching18", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,t18:T18,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall17", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall17", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall17", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall17", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R", "kind" : "implicit def"}, {"label" : "functionCall17", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall17", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R", "kind" : "def"}, {"label" : "callMatching17", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, t17: T17, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching17", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,t17:T17,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall16", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall16", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall16", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall16", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R", "kind" : "implicit def"}, {"label" : "functionCall16", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall16", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R", "kind" : "def"}, {"label" : "callMatching16", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching16", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,t16:T16,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall15", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall15", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall15", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall15", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R", "kind" : "implicit def"}, {"label" : "functionCall15", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall15", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R", "kind" : "def"}, {"label" : "callMatching15", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching15", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,t15:T15,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall14", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall14", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall14", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall14", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R", "kind" : "implicit def"}, {"label" : "functionCall14", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall14", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R", "kind" : "def"}, {"label" : "callMatching14", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching14", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,t14:T14,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall13", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall13", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall13", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall13", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R", "kind" : "implicit def"}, {"label" : "functionCall13", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall13", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R", "kind" : "def"}, {"label" : "callMatching13", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching13", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,t13:T13,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall12", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall12", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall12", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall12", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R", "kind" : "implicit def"}, {"label" : "functionCall12", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall12", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R", "kind" : "def"}, {"label" : "callMatching12", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching12", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,t12:T12,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall11", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall11", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall11", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall11", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R", "kind" : "implicit def"}, {"label" : "functionCall11", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall11", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R", "kind" : "def"}, {"label" : "callMatching11", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching11", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,t11:T11,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall10", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall10[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall10", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall10[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9,T10),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R", "kind" : "implicit def"}, {"label" : "functionCall10", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall10[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R", "kind" : "def"}, {"label" : "callMatching10", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching10", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching10[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,t10:T10,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall9", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall9[T1,T2,T3,T4,T5,T6,T7,T8,T9,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall9", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8, T9), R)): (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall9[T1,T2,T3,T4,T5,T6,T7,T8,T9,R](values:((T1,T2,T3,T4,T5,T6,T7,T8,T9),R)):(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R", "kind" : "implicit def"}, {"label" : "functionCall9", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, r: R): (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall9[T1,T2,T3,T4,T5,T6,T7,T8,T9,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,r:R):(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R", "kind" : "def"}, {"label" : "callMatching9", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching9", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching9[T1,T2,T3,T4,T5,T6,T7,T8,T9,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,t9:T9,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall8", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7, T8) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall8[T1,T2,T3,T4,T5,T6,T7,T8,R](values:((T1,T2,T3,T4,T5,T6,T7,T8),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7,T8)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall8", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7, T8), R)): (T1, T2, T3, T4, T5, T6, T7, T8) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall8[T1,T2,T3,T4,T5,T6,T7,T8,R](values:((T1,T2,T3,T4,T5,T6,T7,T8),R)):(T1,T2,T3,T4,T5,T6,T7,T8)=>R", "kind" : "implicit def"}, {"label" : "functionCall8", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, r: R): (T1, T2, T3, T4, T5, T6, T7, T8) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall8[T1,T2,T3,T4,T5,T6,T7,T8,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,r:R):(T1,T2,T3,T4,T5,T6,T7,T8)=>R", "kind" : "def"}, {"label" : "callMatching8", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7, T8) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching8", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching8[T1,T2,T3,T4,T5,T6,T7,T8,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,t8:T8,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7,T8)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall7", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7), Matcher[R])): (T1, T2, T3, T4, T5, T6, T7) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall7[T1,T2,T3,T4,T5,T6,T7,R](values:((T1,T2,T3,T4,T5,T6,T7),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6,T7)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall7", "tail" : "(values: ((T1, T2, T3, T4, T5, T6, T7), R)): (T1, T2, T3, T4, T5, T6, T7) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall7[T1,T2,T3,T4,T5,T6,T7,R](values:((T1,T2,T3,T4,T5,T6,T7),R)):(T1,T2,T3,T4,T5,T6,T7)=>R", "kind" : "implicit def"}, {"label" : "functionCall7", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, r: R): (T1, T2, T3, T4, T5, T6, T7) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall7[T1,T2,T3,T4,T5,T6,T7,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,r:R):(T1,T2,T3,T4,T5,T6,T7)=>R", "kind" : "def"}, {"label" : "callMatching7", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, m: Matcher[R]): (T1, T2, T3, T4, T5, T6, T7) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching7", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching7[T1,T2,T3,T4,T5,T6,T7,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,t7:T7,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6,T7)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall6", "tail" : "(values: ((T1, T2, T3, T4, T5, T6), Matcher[R])): (T1, T2, T3, T4, T5, T6) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall6[T1,T2,T3,T4,T5,T6,R](values:((T1,T2,T3,T4,T5,T6),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5,T6)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall6", "tail" : "(values: ((T1, T2, T3, T4, T5, T6), R)): (T1, T2, T3, T4, T5, T6) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall6[T1,T2,T3,T4,T5,T6,R](values:((T1,T2,T3,T4,T5,T6),R)):(T1,T2,T3,T4,T5,T6)=>R", "kind" : "implicit def"}, {"label" : "functionCall6", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, r: R): (T1, T2, T3, T4, T5, T6) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall6[T1,T2,T3,T4,T5,T6,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,r:R):(T1,T2,T3,T4,T5,T6)=>R", "kind" : "def"}, {"label" : "callMatching6", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, m: Matcher[R]): (T1, T2, T3, T4, T5, T6) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching6", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching6[T1,T2,T3,T4,T5,T6,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,t6:T6,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5,T6)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall5", "tail" : "(values: ((T1, T2, T3, T4, T5), Matcher[R])): (T1, T2, T3, T4, T5) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall5[T1,T2,T3,T4,T5,R](values:((T1,T2,T3,T4,T5),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4,T5)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall5", "tail" : "(values: ((T1, T2, T3, T4, T5), R)): (T1, T2, T3, T4, T5) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall5[T1,T2,T3,T4,T5,R](values:((T1,T2,T3,T4,T5),R)):(T1,T2,T3,T4,T5)=>R", "kind" : "implicit def"}, {"label" : "functionCall5", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, r: R): (T1, T2, T3, T4, T5) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall5[T1,T2,T3,T4,T5,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,r:R):(T1,T2,T3,T4,T5)=>R", "kind" : "def"}, {"label" : "callMatching5", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, m: Matcher[R]): (T1, T2, T3, T4, T5) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching5", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching5[T1,T2,T3,T4,T5,R](t1:T1,t2:T2,t3:T3,t4:T4,t5:T5,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4,T5)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall4", "tail" : "(values: ((T1, T2, T3, T4), Matcher[R])): (T1, T2, T3, T4) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall4[T1,T2,T3,T4,R](values:((T1,T2,T3,T4),org.specs2.matcher.Matcher[R])):(T1,T2,T3,T4)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall4", "tail" : "(values: ((T1, T2, T3, T4), R)): (T1, T2, T3, T4) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall4[T1,T2,T3,T4,R](values:((T1,T2,T3,T4),R)):(T1,T2,T3,T4)=>R", "kind" : "implicit def"}, {"label" : "functionCall4", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, r: R): (T1, T2, T3, T4) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall4[T1,T2,T3,T4,R](t1:T1,t2:T2,t3:T3,t4:T4,r:R):(T1,T2,T3,T4)=>R", "kind" : "def"}, {"label" : "callMatching4", "tail" : "(t1: T1, t2: T2, t3: T3, t4: T4, m: Matcher[R]): (T1, T2, T3, T4) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching4", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching4[T1,T2,T3,T4,R](t1:T1,t2:T2,t3:T3,t4:T4,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3,T4)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall3", "tail" : "(values: ((T1, T2, T3), Matcher[R])): (T1, T2, T3) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall3[T1,T2,T3,R](values:((T1,T2,T3),org.specs2.matcher.Matcher[R])):(T1,T2,T3)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall3", "tail" : "(values: ((T1, T2, T3), R)): (T1, T2, T3) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall3[T1,T2,T3,R](values:((T1,T2,T3),R)):(T1,T2,T3)=>R", "kind" : "implicit def"}, {"label" : "functionCall3", "tail" : "(t1: T1, t2: T2, t3: T3, r: R): (T1, T2, T3) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall3[T1,T2,T3,R](t1:T1,t2:T2,t3:T3,r:R):(T1,T2,T3)=>R", "kind" : "def"}, {"label" : "callMatching3", "tail" : "(t1: T1, t2: T2, t3: T3, m: Matcher[R]): (T1, T2, T3) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching3", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching3[T1,T2,T3,R](t1:T1,t2:T2,t3:T3,m:org.specs2.matcher.Matcher[R]):(T1,T2,T3)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall2", "tail" : "(values: ((T1, T2), Matcher[R])): (T1, T2) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall2[T1,T2,R](values:((T1,T2),org.specs2.matcher.Matcher[R])):(T1,T2)=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall2", "tail" : "(values: ((T1, T2), R)): (T1, T2) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall2[T1,T2,R](values:((T1,T2),R)):(T1,T2)=>R", "kind" : "implicit def"}, {"label" : "functionCall2", "tail" : "(t1: T1, t2: T2, r: R): (T1, T2) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall2[T1,T2,R](t1:T1,t2:T2,r:R):(T1,T2)=>R", "kind" : "def"}, {"label" : "callMatching2", "tail" : "(t1: T1, t2: T2, m: Matcher[R]): (T1, T2) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching2", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching2[T1,T2,R](t1:T1,t2:T2,m:org.specs2.matcher.Matcher[R]):(T1,T2)=>R", "kind" : "def"}, {"label" : "matcherToFunctionCall", "tail" : "(values: (A, Matcher[R])): (A) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.matcherToFunctionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToFunctionCall[A,R](values:(A,org.specs2.matcher.Matcher[R])):A=>R", "kind" : "implicit def"}, {"label" : "toFunctionCall", "tail" : "(values: (A, R)): (A) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.toFunctionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toFunctionCall[A,R](values:(A,R)):A=>R", "kind" : "implicit def"}, {"label" : "functionCall", "tail" : "(a: A, r: R): (A) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.functionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#functionCall[A,R](a:A,r:R):A=>R", "kind" : "def"}, {"label" : "callMatching", "tail" : "(a: A, m: Matcher[R]): (A) => R", "member" : "org.specs2.mock.mockito.FunctionArguments.callMatching", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#callMatching[A,R](a:A,m:org.specs2.matcher.Matcher[R]):A=>R", "kind" : "def"}, {"label" : "matcherToPartialFunctionCall", "tail" : "(values: (A, Matcher[R])): PartialFunction[A, R]", "member" : "org.specs2.mock.mockito.FunctionArgumentsLowImplicits.matcherToPartialFunctionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#matcherToPartialFunctionCall[A,R](values:(A,org.specs2.matcher.Matcher[R])):PartialFunction[A,R]", "kind" : "implicit def"}, {"label" : "toPartialFunctionCall", "tail" : "(values: (A, R)): PartialFunction[A, R]", "member" : "org.specs2.mock.mockito.FunctionArgumentsLowImplicits.toPartialFunctionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toPartialFunctionCall[A,R](values:(A,R)):PartialFunction[A,R]", "kind" : "implicit def"}, {"label" : "partialFunctionCall", "tail" : "(a: A, r: R): PartialFunction[A, R]", "member" : "org.specs2.mock.mockito.FunctionArgumentsLowImplicits.partialFunctionCall", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#partialFunctionCall[A,R](a:A,r:R):PartialFunction[A,R]", "kind" : "def"}, {"label" : "partialCallMatching", "tail" : "(a: A, m: Matcher[R]): PartialFunction[A, R]", "member" : "org.specs2.mock.mockito.FunctionArgumentsLowImplicits.partialCallMatching", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#partialCallMatching[A,R](a:A,m:org.specs2.matcher.Matcher[R]):PartialFunction[A,R]", "kind" : "def"}, {"label" : "describe", "tail" : "(t: => T): Descriptible[T]", "member" : "org.specs2.matcher.ExpectationsDescription.describe", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#describe[T](t:=>T):ExpectationsDescription.this.Descriptible[T]", "kind" : "implicit def"}, {"label" : "describeExpectation", "tail" : "(description: String): ExpectationDescription", "member" : "org.specs2.matcher.ExpectationsDescription.describeExpectation", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#describeExpectation(description:String):ExpectationsDescription.this.ExpectationDescription", "kind" : "implicit def"}, {"label" : "typedEqualExpectation", "tail" : "(t: => T): TypedEqualExpectation[T]", "member" : "org.specs2.matcher.TypedEqual.typedEqualExpectation", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#typedEqualExpectation[T](t:=>T):TypedEqual.this.TypedEqualExpectation[T]", "kind" : "implicit def"}, {"label" : "sandboxMatchResult", "tail" : "(mr: => MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.sandboxMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#sandboxMatchResult[T](mr:=>org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "checkMatchResultFailure", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.checkMatchResultFailure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#checkMatchResultFailure[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "checkResultFailure", "tail" : "(r: => Result): Result", "member" : "org.specs2.matcher.ExpectationsCreation.checkResultFailure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#checkResultFailure(r:=>org.specs2.execute.Result):org.specs2.execute.Result", "kind" : "def"}, {"label" : "mapMatchResult", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.mapMatchResult", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#mapMatchResult[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "checkFailure", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.ExpectationsCreation.checkFailure", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#checkFailure[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "createExpectableWithShowAs", "tail" : "(t: => T, showAs: => String): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectableWithShowAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#createExpectableWithShowAs[T](t:=>T,showAs:=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: Option[(String) => String]): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#createExpectable[T](t:=>T,alias:Option[String=>String]):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: (String) => String): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#createExpectable[T](t:=>T,alias:String=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T, alias: => String): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#createExpectable[T](t:=>T,alias:=>String):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "createExpectable", "tail" : "(t: => T): Expectable[T]", "member" : "org.specs2.matcher.ExpectationsCreation.createExpectable", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#createExpectable[T](t:=>T):org.specs2.matcher.Expectable[T]", "kind" : "def"}, {"label" : "setStacktrace", "tail" : "(m: MatchResult[T]): MatchResult[T]", "member" : "org.specs2.matcher.MatchResultStackTrace.setStacktrace", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#setStacktrace[T](m:org.specs2.matcher.MatchResult[T]):org.specs2.matcher.MatchResult[T]", "kind" : "def"}, {"label" : "anArgThat", "tail" : "(m: Matcher[U]): T", "member" : "org.specs2.mock.mockito.ArgThat.anArgThat", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anArgThat[T,U<:T](m:org.hamcrest.Matcher[U]):T", "kind" : "def"}, {"label" : "argThat", "tail" : "(m: Matcher[U]): T", "member" : "org.specs2.mock.mockito.ArgThat.argThat", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#argThat[T,U<:T](m:org.specs2.matcher.Matcher[U]):T", "kind" : "implicit def"}, {"label" : "timesFor", "tail" : "(n: Int): Times", "member" : "org.specs2.control.NumberOfTimes.timesFor", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#timesFor(n:Int):org.specs2.control.Times", "kind" : "implicit def"}, {"label" : "ignoreStubs", "tail" : "(mocks: AnyRef*): IgnoreStubs", "member" : "org.specs2.mock.mockito.MocksCreation.ignoreStubs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#ignoreStubs(mocks:AnyRef*):org.specs2.mock.mockito.IgnoreStubs", "kind" : "def"}, {"label" : "spy", "tail" : "(m: T): T", "member" : "org.specs2.mock.mockito.MocksCreation.spy", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#spy[T](m:T):T", "kind" : "def"}, {"label" : "smartMock", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.specs2.mock.mockito.MocksCreation.smartMock", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#smartMock[T](implicitevidence$16:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "anyToMockProperty", "tail" : "(t: => T): MockProperty[T]", "member" : "org.specs2.mock.mockito.MocksCreation.anyToMockProperty", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#anyToMockProperty[T](t:=>T):MocksCreation.this.MockProperty[T]", "kind" : "implicit def"}, {"label" : "mocked", "tail" : "(t: => T)(arg0: ClassTag[T]): Mocked[T]", "member" : "org.specs2.mock.mockito.MocksCreation.mocked", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#mocked[T](t:=>T)(implicitevidence$4:scala.reflect.ClassTag[T]):MocksCreation.this.Mocked[T]", "kind" : "implicit def"}, {"label" : "mock", "tail" : "(settings: MockSettings)(arg0: ClassTag[T]): T", "member" : "org.specs2.mock.mockito.MocksCreation.mock", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#mock[T](settings:org.mockito.MockSettings)(implicitevidence$3:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "mockAs", "tail" : "(name: String)(arg0: ClassTag[T]): T", "member" : "org.specs2.mock.mockito.MocksCreation.mockAs", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#mockAs[T](name:String)(implicitevidence$2:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "mock", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.specs2.mock.mockito.MocksCreation.mock", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#mock[T](implicitevidence$1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "classesOf", "tail" : "(arg0: ClassTag[T1], arg1: ClassTag[T2], arg2: ClassTag[T3], arg3: ClassTag[T4], arg4: ClassTag[T5]): Seq[Class[_ >: _$1 with _$1 with _$1 with _$1 with _$1]] forSome {type _$1, type _$1, type _$1, type _$1, type _$1}", "member" : "org.specs2.reflect.ClassesOf.classesOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#classesOf[T1,T2,T3,T4,T5](implicitevidence$10:scala.reflect.ClassTag[T1],implicitevidence$11:scala.reflect.ClassTag[T2],implicitevidence$12:scala.reflect.ClassTag[T3],implicitevidence$13:scala.reflect.ClassTag[T4],implicitevidence$14:scala.reflect.ClassTag[T5]):Seq[Class[_>:_$1with_$1with_$1with_$1with_$1]]forSome{type_$1;type_$1;type_$1;type_$1;type_$1}", "kind" : "def"}, {"label" : "classesOf", "tail" : "(arg0: ClassTag[T1], arg1: ClassTag[T2], arg2: ClassTag[T3], arg3: ClassTag[T4]): Seq[Class[_ >: _$1 with _$1 with _$1 with _$1]] forSome {type _$1, type _$1, type _$1, type _$1}", "member" : "org.specs2.reflect.ClassesOf.classesOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#classesOf[T1,T2,T3,T4](implicitevidence$6:scala.reflect.ClassTag[T1],implicitevidence$7:scala.reflect.ClassTag[T2],implicitevidence$8:scala.reflect.ClassTag[T3],implicitevidence$9:scala.reflect.ClassTag[T4]):Seq[Class[_>:_$1with_$1with_$1with_$1]]forSome{type_$1;type_$1;type_$1;type_$1}", "kind" : "def"}, {"label" : "classesOf", "tail" : "(arg0: ClassTag[T1], arg1: ClassTag[T2], arg2: ClassTag[T3]): Seq[Class[_ >: _$1 with _$1 with _$1]] forSome {type _$1, type _$1, type _$1}", "member" : "org.specs2.reflect.ClassesOf.classesOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#classesOf[T1,T2,T3](implicitevidence$3:scala.reflect.ClassTag[T1],implicitevidence$4:scala.reflect.ClassTag[T2],implicitevidence$5:scala.reflect.ClassTag[T3]):Seq[Class[_>:_$1with_$1with_$1]]forSome{type_$1;type_$1;type_$1}", "kind" : "def"}, {"label" : "classesOf", "tail" : "(arg0: ClassTag[T1], arg1: ClassTag[T2]): Seq[Class[_ >: _$1 with _$1]] forSome {type _$1, type _$1}", "member" : "org.specs2.reflect.ClassesOf.classesOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#classesOf[T1,T2](implicitevidence$1:scala.reflect.ClassTag[T1],implicitevidence$2:scala.reflect.ClassTag[T2]):Seq[Class[_>:_$1with_$1]]forSome{type_$1;type_$1}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/lucidchart\/open\/xtract\/XmlReaderSpies.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "com.lucidchart" : [], "com.lucidchart.open" : [], "org.specs2.matcher" : [], "org.specs2" : [], "org" : [], "com" : []};